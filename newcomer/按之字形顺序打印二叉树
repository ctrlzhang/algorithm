/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
    //bfs
    vector<vector<int> > Print(TreeNode* pRoot) {
        queue<TreeNode*> q;
        vector<vector<int>> ans;
        if(nullptr == pRoot) return ans;
        q.push(pRoot);
        int level = 0;
        while(!q.empty()) {
            int n = q.size();
            int i = 0;
            vector<int> tmp;
            while(i < n) {
                TreeNode* cur = q.front();
                q.pop();
                tmp.push_back(cur->val);
                if(cur->left != nullptr) {
                    q.push(cur->left);
                }
                if(cur->right != nullptr) {
                    q.push(cur->right);
                }
                i++;
            }
            if(level % 2) {
                reverse(tmp.begin(), tmp.end());
            }
            ans.push_back(tmp);
            level++;
        }
        return ans;
    }
};

import java.util.*;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        LinkedList<TreeNode> q = new LinkedList<TreeNode>();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        if(null == pRoot) {
            return ans;
        }
        q.offer(pRoot);
        boolean leftToRight = true;
        while(!q.isEmpty()) {
            int n = q.size();
            int i = 0;
            
            //先遍历输出，再有序入队
            Iterator<TreeNode> iter = null;
            if(leftToRight) {
                iter = q.iterator();
            } else {
                iter = q.descendingIterator();
            }
            
            leftToRight = !leftToRight;
            ArrayList<Integer> tmp = new ArrayList<>();
            while(iter.hasNext()) {
                tmp.add(iter.next().val);
            }
            ans.add(tmp);
            
            while(i < n) {
                TreeNode cur = q.peek();
                q.poll();
                if(null != cur.left) {
                    q.offer(cur.left);
                }
                if(null != cur.right) {
                    q.offer(cur.right);
                }
                i++;
            }
        }
        return ans;
    }
}

/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
    //先遍历，再入队
    vector<vector<int> > Print(TreeNode* pRoot) {
        vector<vector<int>> ans;
        if(nullptr == pRoot) {
            return ans;
        }
        deque<TreeNode*> q;
        q.push_back(pRoot);
        vector<int> tmp;
        bool leftToRight = true;
        while(!q.empty()) {
            int n = q.size();
            int i = 0;
            if(leftToRight) {
                deque<TreeNode*>::iterator it = q.begin();
                while(it != q.end()) {
                    tmp.push_back((*it)->val);
                    it++;
                }
            } else {
                deque<TreeNode*>::reverse_iterator it = q.rbegin();
                while(it != q.rend()) {
                    tmp.push_back((*it)->val);
                    it++;
                }
            }
            cout<<tmp.size()<<endl;
            leftToRight = !leftToRight;
            ans.push_back(tmp);
            tmp.clear();
            while(i < n) {
                TreeNode* cur = q.front();
                q.pop_front();
                if(nullptr != cur->left) {
                    q.push_back(cur->left);
                }
                if(nullptr != cur->right) {
                    q.push_back(cur->right);
                }
                i++;
            }
        }
        return ans;
    }
};
