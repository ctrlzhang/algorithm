class Solution {
public:
    int GetUglyNumber_Solution(int index) {
        if(index <= 0) return 0;
        int i = 1;
        int cnt = 0;
        while(1) {
           	if(isUgly(i)) {
                cnt++;
                if(cnt == index) {
                    break;
                }
            }
            
            i++;
        }
        return i;
    }
    
    bool isUgly(int d) {
        while(d % 2 == 0) {
            d /= 2;
        }
        
        while(d % 3 == 0) {
            d /= 3;
        }
        
        while(d % 5 == 0) {
            d /= 5;
        }
        
        return 1 == d;
    }
};


//思路：丑数=丑数 times 2 3 5，所以维护一个丑数的数组，下一个丑数=所有的数*2 所有的数*3 所有的数*5 ，从里面找第一个大于当前最大值的
//我们维护了三个下标，最开始都是指向0，所以 1*2 1*3 1*5 从里面挑最小的，然后把最小值加入到数组里，然后，对于此例中，2对应的下标需要+1，
//表示，求下一个丑数的时候，从2这个下标开始城，即变成了 2*2 1*3 1*5 取最小值，发现是3，然后3的下标+1，
//问题进一步变为了 2*2 3*2 5*1 三者取最小值.
class Solution {
public:
    //有序
    //所有数*2 所有数*3 所有数*5 从这里面分别找到第一个大于当前
    //最大值的数，三者比较取最下
    //相应的最小的那个数，下标向前走
    int GetUglyNumber_Solution(int index) {
        if(index <= 0) return 0;
        vector<int> dp(index, -1);
        dp[0] = 1;
        int two = 0, three = 0, five = 0;
        int cnt = 1;
        int pos = 0;
        while(cnt < index) {
            int val = getMin(dp[two] * 2, dp[three] * 3, dp[five] * 5);
            if(val == dp[two] * 2) {
                two += 1;
            }
            
            if(val == dp[three] * 3) {
                three += 1;
            }
            
            if(val == dp[five] * 5) {
                five += 1;
            }
            
            dp[++pos] = val;
            cnt++;
        }
        
        return dp[index - 1];
    }
    
    int getMin(int a, int b, int c) {
        int l = min(a, b);
        return min(l, c);
    }
};

import java.util.*;
public class Solution {
    public int GetUglyNumber_Solution(int index) {
        if(index <= 0) return 0;
        ArrayList<Integer> dp = new ArrayList<Integer>();
        dp.add(1);
        int cnt = 1;
        int pos = 0;
        int a = 0, b = 0, c = 0;
        while(cnt < index) {
            int val = getMin(dp.get(a) * 2, dp.get(b) * 3, dp.get(c) * 5);
            if(val == dp.get(a) * 2) {
                a++;
            }
            
            if(val == dp.get(b) * 3) {
                b++;
            }
            
            if(val == dp.get(c) * 5) {
                c++;
            }
            cnt++;
            dp.add(val);
        }
        return dp.get(index - 1);
    }
    
    int getMin(int a, int b, int c) {
        int l = Math.min(a, b);
        return Math.min(l, c);
    }
}
