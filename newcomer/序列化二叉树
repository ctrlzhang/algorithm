/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
    vector<int> data;
    char* Serialize(TreeNode *root) {
        helper(root);
        int *p = new int[data.size()];
        int i = 0;
        for(int d : data) {
            p[i++] = d;
        }
        return (char*)p;
    }
    
    TreeNode* Deserialize(char *str) {
        int* p = (int*)str;
        return dfs(p);
    }
    
    //preorder
    void helper(TreeNode *root) {
        if(nullptr == root) {
            data.push_back(0x2333);
        } else {
            data.push_back(root->val);
            helper(root->left);
            helper(root->right);
        }
    }
    
    TreeNode* dfs(int*& p) {
        if(*p == 0x2333) {
            p++;
            return nullptr;
        }
        
        TreeNode* node = new TreeNode(*p);
        p++;
        node->left = dfs(p);
        node->right = dfs(p);
        return node;
    }
};

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    private int i = 0;
    String Serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        preOrder(sb, root);
        return sb.toString();
    }
    void preOrder(StringBuilder sb, TreeNode root) {
        if(null == root) {
            sb.append("#,");
            return;
        }
        sb.append(root.val);
        sb.append(",");
        preOrder(sb, root.left);
        preOrder(sb, root.right);
    }
    
    TreeNode Deserialize(String str) {
        if(str.isEmpty()) {
            return null;
        }
        String[] tokens = str.split(",");
        return dfs(tokens);
    }
    
    TreeNode dfs(String[] tokens) {
        if(i >= tokens.length - 1) return null;
        if("#".equals(tokens[i])) {
            i++;
            return null;
        }
        TreeNode node = new TreeNode(Integer.valueOf(tokens[i]));
        i++;
        node.left = dfs(tokens);
        node.right = dfs(tokens);
        return node;
    }
}
