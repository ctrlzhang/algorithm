class Solution {
public:
    bool match(char* str, char* pattern)
    {
        if(nullptr == str || nullptr == pattern) return false;
        return matchCore(str, pattern);
    }
    
    bool matchCore(char* str, char* p) {
        if(*str == '\0' && *p == '\0') return true;
        if(*str != '\0' && *p == '\0') return false;
        if(*(p + 1) == '*') {
           	if(*p == *str || (*p == '.' && *str != '\0')) {
           		return matchCore(str, p + 2) || matchCore(str + 1, p + 2) || matchCore(str + 1, p);
            } else {
                return matchCore(str, p + 2);
            }
        } else {
         	if(*p == *str || (*p == '.' && *str != '\0')) {
            	return matchCore(str + 1, p + 1);
            }
            return false;
        }
    }
};

public class Solution {
    public boolean match(char[] str, char[] pattern)
    {
        if(null == str || pattern == null) return false;
        return matchCore(str, 0, pattern, 0);
    }
    
    boolean matchCore(char[] str, int sp, char[] pat, int pp) {
        if(sp == str.length && pp == pat.length) return true;
        if(sp != str.length && pp == pat.length) return false;
        if(pp + 1 < pat.length && pat[pp + 1] == '*') {
            if(sp < str.length) {
                if(str[sp] == pat[pp] || pat[pp] == '.') {
                    return matchCore(str, sp, pat, pp + 2) ||
                        matchCore(str, sp + 1, pat, pp + 2) ||
                        matchCore(str, sp + 1, pat, pp);
                } else {
                    return matchCore(str, sp, pat, pp + 2);
                }
            } else {
                return matchCore(str, sp, pat, pp + 2);
            }
        } else {
            if(sp < str.length && (str[sp] == pat[pp] || pat[pp] == '.')) {
                return matchCore(str, sp + 1, pat, pp + 1);
            }
            return false;
        }
    }
}
