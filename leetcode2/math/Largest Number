class Solution {
    public String largestNumber(int[] nums) {
        //edge case
        if (null == nums || 0 == nums.length) return "";
        
        List<String> data = new ArrayList<>();
        for (int d : nums) {
            data.add(String.valueOf(d));
        }
        
        Collections.sort(data, (a, b) -> {
            String left = a + b;
            String right = b + a;
            return right.compareTo(left);
        });
        
        if (data.get(0).charAt(0) == '0') return "0";
        
        StringBuilder sb = new StringBuilder();
        for (String s : data) {
            sb.append(s);
        }
        
        String ret = sb.toString();
        return ret;
    }
}

bool myCmp(const string& l, const string& r) {
    string left = l + r;
    string right = r + l;
    return left > right;
}

class Solution {
public:
    string largestNumber(vector<int>& nums) {
        //edge case
        if (nums.empty()) return "";
        vector<string> data;
        for (int d : nums) {
            data.push_back(to_string(d));
        }
        
        sort(data.begin(), data.end(), myCmp);
        if (data[0].at(0) == '0') return "0";
        
        string ans = "";
        for (string s : data) {
            ans += s;
        }
        return ans;
    }
};
