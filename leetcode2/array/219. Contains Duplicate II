class Solution {
public:
    typedef pair<set<int>::iterator, bool> PR;
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        //slide window
        set<int> st;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (st.size() < k) {
                PR ret = st.insert(nums[i]);
                if (!ret.second) return true;
            } else {
                PR ret = st.insert(nums[i]);
                if (!ret.second) return true;
                st.erase(nums[i - k]);
            }
            
            /*
            for (int d : st) {
                cout<<d<<" ";
            }
            cout<<endl;
            */
        }
        
        return false;
    }
};

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Set<Integer> st = new HashSet<>();
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (st.size() < k) {
                boolean ret = st.add(nums[i]);
                if (!ret) return true;
            } else { 
                boolean ret = st.add(nums[i]);
                if (!ret) return true;
                st.remove(nums[i - k]);
            } 
        }
        
        return false;
    }
}
