class Solution {
    public int largestRectangleArea(int[] heights) {
        //找左边第一个比当前元素小的，找右边第一个比当前元素小的
        //时间复杂度n平方，可以优化为n，需要记录每个元素的第一个比它小的元素
        int n = heights.length;
        int[] left = new int[n];
        
        for(int i = 0; i < n; i++) {
            left[i] = -1;
        }
        int[] right = new int[n];
        for(int i = 0; i < n; i++) {
            right[i] = n;
        }
    
        for(int i = 1; i < n; i++) {
            int p = i - 1;
            while(p >= 0 && heights[i] <= heights[p]) {
                p = left[p];
            }
            
            left[i] = p;
        }
        
        for(int i = n - 2; i >= 0; i--) {
            int p = i + 1;
            while(p < n && heights[i] <= heights[p]) {
                p = right[p];
            }
            
            right[i] = p;
        }
        
        int ans = 0;
        int tmp = 0;
        for(int i = 0; i < n; i++) {
            tmp = (right[i] - left[i] - 1) * heights[i];
            if(tmp > ans) {
                ans = tmp;
            }
        }
        return ans;
    }
}
