class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if (n <= 1) return 0;
        int lowPrice = prices[0];
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (lowPrice > prices[i]) {
                lowPrice = prices[i];
            }
            
            if (prices[i] - lowPrice > ans) {
                ans = prices[i] - lowPrice;
            }
        }
        return ans;
    }
}

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if (n <= 1) return 0;
        int lowPrice = prices[0];
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (lowPrice > prices[i]) {
                lowPrice = prices[i];
            } else {
                if (prices[i] - lowPrice > ans) {
                    ans = prices[i] - lowPrice;
                }
            }
        }
        return ans;
    }
};
