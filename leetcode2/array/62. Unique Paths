//brute force TLE
class Solution {
public:
    int uniquePaths(int m, int n) {
        return dfs(0, 0, m - 1, n - 1);
    }
    
    int dfs(int x, int y, int m, int n) {
        if(x > m || y > n) return 0;
        if(x == m && y == n) return 1;
        return dfs(x + 1, y, m, n) + dfs(x, y + 1, m, n);
    }
};

//dp 时间复杂度o(n^2) 空间复杂度o(n^2) 使用滚动数组，空间复杂度可以降为o(2 * n)
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[m - 1][n - 1] = 1;
        for(int i = m - 1; i >= 0; i--) {
            for(int j = n - 1; j >= 0; j--) {
                if(i + 1 < m && j < n) {
                    dp[i][j] += dp[i + 1][j];
                }
                
                if(i < m && j + 1 < n) {
                    dp[i][j] += dp[i][j + 1];
                }
            }
        }
        return dp[0][0];
    }
};
