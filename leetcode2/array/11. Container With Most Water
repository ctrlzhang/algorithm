class Solution {
    public int maxArea(int[] height) {
        int ans = 0;
        int n = height.length;
        int i = 0, j = n - 1;
        while(i < j) {
            int width = j - i;
            int len = Math.min(height[i], height[j]);
            if(ans < width * len) {
                ans = width * len;
            }
            
            if(height[i] < height[j]) {
                i++;
            } else {
                j--;
            }
        }
        return ans;
    }
}

class Solution {
public:
    int maxArea(vector<int>& height) {
        int n = height.size();
        int i = 0, j = n - 1;
        int ans = 0;
        while(i < j) {
            int l = j - i;
            int w = min(height[i], height[j]);
            if(ans < l * w) {
                ans = l * w;
            }
            
            while(i < j && height[i] <= w) {
                i++;
            }
            
            while(i < j && height[j] <= w) {
                j--;
            }
        }
        return ans;
    }
};
