class Solution {
    // we can use array's index to represent the value in array
	public List<Integer> findDuplicates(int[] nums) {
        int len = nums.length;
		for (int i = 0; i < len; i++) {
			nums[Math.abs(nums[i]) - 1] *= -1;
		}
		
		Set<Integer> uniq = new HashSet<>();
		for (int i = 0; i < len; i++) {
			if (nums[Math.abs(nums[i]) - 1] < 0) continue;
			uniq.add(Math.abs(nums[i]));
		}
		
		List<Integer> ans = new ArrayList<>(uniq);
		return ans;
    }
}

class Solution {
	// when we encounter a positive value, we know it is the first time we encounter it
	// when we encounter a negtive value, we know it is the second time we encounter it
	public List<Integer> findDuplicates(int[] nums) {
		List<Integer> ans = new ArrayList<>();
		for (int i = 0; i < nums.length; i++) {
			if (nums[Math.abs(nums[i]) - 1] < 0) {
				ans.add(Math.abs(nums[i]));
			}
			
			nums[Math.abs(nums[i]) - 1] *= -1;
		}
		
		return ans;
	}
}
