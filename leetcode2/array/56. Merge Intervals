/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */

bool myCmp(const Interval& l, const Interval& r) {
    if(l.start < r.start) return true;
    if(l.start == r.start && l.end < r.end) return true;
    return false;
}

class Solution {
public:
    //brute force runtime is o(n^2)
    //we can ruduce time complex
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> ans;
        int n = intervals.size();
        if(n <= 1) return intervals;
        sort(intervals.begin(), intervals.end(), myCmp);
        Interval cur = intervals[0];
        for(int i = 1; i < n; i++) {
            if(cur.end >= intervals[i].start) {
                cur.end = max(cur.end, intervals[i].end);  
            } else {
                ans.push_back(cur);
                cur = intervals[i];
            }
        }
        ans.push_back(cur);
        return ans;
    }
};
