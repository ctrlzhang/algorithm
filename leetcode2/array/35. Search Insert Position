class Solution {
public:
    //binary search, find upbound
    int searchInsert(vector<int>& nums, int target) {
        int n = nums.size();
        int left = 0, right = n - 1;
        while(left + 1 < right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] >= target) {
                right = mid;
            } else {
                left = mid;
            }
        }
        
        if(nums[left] >= target) return left;
        if(nums[right] >= target) return right;
        return n;
    }
};

class Solution {
    public int searchInsert(int[] nums, int target) {
        int n = nums.length;
        int left = 0, right = n - 1;
        while(left + 1 < right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] >= target) {
                right = mid;
            } else {
                left = mid;
            }
        }
        
        if(nums[left] >= target) return left;
        if(nums[right] >= target) return right;
        return n;
    }
}
