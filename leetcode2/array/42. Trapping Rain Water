class Solution {
    public int trap(int[] height) {
        //scan from left to right to compute left max
        //scan from right to left to compute right max
        int n = height.length;
        if(n <= 1) return 0;
        
        int[] left = new int[n];
        int[] right = new int[n];
        int leftMax = -1;
        int rightMax = -1;
        for(int i = 1; i < n - 1; i++) {
            leftMax = Math.max(leftMax, height[i - 1]);
            left[i] = leftMax;
        }
        
        for(int i = n - 2; i >= 1; i--) {
            rightMax = Math.max(height[i + 1], rightMax);
            right[i] = rightMax;
        }
        
        int ans = 0;
        for(int i = 1; i < n - 1; i++) {
            int minH = Math.min(left[i], right[i]);
            if(minH > height[i]) {
                ans += minH - height[i];
            }
        }
        return ans;
    }
}

class Solution {
public:
    int trap(vector<int>& height) {
        //edge case
        int n = height.size();
        if(n <= 1) return 0;
        
        //common
        vector<int> left(n, -1);
        vector<int> right(n, -1);
        int leftMax = -1, rightMax = -1;
        for(int i = 1; i < n - 1; i++) {
            leftMax = max(leftMax, height[i - 1]);
            left[i] = leftMax;
        }
        
        for(int i = n - 2; i >= 1; i--) {
            rightMax = max(rightMax, height[i + 1]);
            right[i] = rightMax;
        }
        
        int ans = 0;
        for(int i = 1; i < n - 1; i++) {
            int ch = min(left[i], right[i]);
            if(ch > height[i]) {
                ans += ch - height[i];
            }
        }
        return ans;
    }
};
