class Solution {
    //二分查找，这里要判断mid和左右两边的数的大小关系
    //left<mid<right, right肯定有peek
    //left<mid>right, mid是peek
    //left>mid<right, 两边都有peek
    //left>mid>right, left有peek
    public int findPeakElement(int[] nums) {
        int n = nums.length;
        int l = 0, r = n - 1;
        while (l + 1 < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]) {
                return mid;
            }
            
            if (nums[mid] < nums[mid - 1] && nums[mid] < nums[mid + 1]) {
                r = mid;
            } else if (nums[mid] < nums[mid - 1] && nums[mid] > nums[mid + 1]) {
                r = mid;
            } else {
                l = mid;
            }
        }
        
        int pos = -1;
        int ans = 0;
        if (l >= 0 && l < n) {
            pos = l;
            ans = nums[l];
        }
        
        if (r >= 0 && r < n) {
           if (nums[r] > ans) {
               pos = r;
               ans = nums[r];
           }
        }
        
        return pos;
    }
}
