class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        //cout<<nums.size()<<endl;
        sort(nums.begin(), nums.end());
        int n = nums.size() - 3;
        for(int i = 0; i <= n; i++) {
            //cout<<"xxx"<<n<<endl;
            vector<vector<int>> tmp = threeSum(nums, i + 1, target - nums[i]);
            for(vector<int> v : tmp) {
                v.push_back(nums[i]);
                //sort(v.begin(), v.end());
                ans.push_back(v);
            }
        }
              
        set<vector<int>> uniq(ans.begin(), ans.end());
        vector<vector<int>> result(uniq.begin(), uniq.end());
        return result;
        //return ans;
    }
    
    vector<vector<int>> threeSum(vector<int>& nums, int start, int target) {
        vector<vector<int>> ans;
        int n = nums.size() - 2;
        for(int i = start; i <= n; i++) { 
            vector<vector<int>> tmp = twoSum(nums, i + 1, target - nums[i]);
            for(vector<int> v : tmp) {
                v.push_back(nums[i]);
                ans.push_back(v);
            }
        }
        return ans;
    }
    
    vector<vector<int>> twoSum(vector<int>& nums, int start, int target) {
        unordered_map<int, int> data;
        vector<vector<int>> ans;
        for(int i = start; i < nums.size(); i++) {
            if(data.find(target - nums[i]) != data.end()) {
                vector<int> tmp;
                tmp.push_back(target - nums[i]);
                tmp.push_back(nums[i]);
                ans.push_back(tmp);
            } else {
                data[nums[i]] = i;
            }
        }
        
        return ans;
    }
};

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        unordered_map<int, vector<vector<int>>> twoSum;
        for(int i = 0; i < nums.size(); i++) {
            for(int j = i + 1; j < nums.size(); j++) {
                vector<int> tmp;
                tmp.push_back(i);
                tmp.push_back(j);
                twoSum[nums[i] + nums[j]].push_back(tmp);
            }
        }
        
        unordered_map<int, int> visited;
        set<vector<int>> uniq;
        for(auto& mit : twoSum) {
            int d = mit.first;
            if(1 == visited[d]) continue;
            visited[d] = 1;
            if(twoSum.find(target - d) == twoSum.end()) continue;
            visited[target - d] = 1;
            for(vector<int> v : twoSum[target - d]) {
                for(vector<int> p : twoSum[d]) {
                    if(v[0] == p[0] || v[0] == p[1] || v[1] == p[0] || v[1] == p[1]) continue;
                    vector<int> tmp;
                    tmp.push_back(nums[v[0]]);
                    tmp.push_back(nums[v[1]]);
                    tmp.push_back(nums[p[0]]);
                    tmp.push_back(nums[p[1]]);
                    sort(tmp.begin(), tmp.end());
                    uniq.insert(tmp);
                }
            }
        }
        
        vector<vector<int>> ans(uniq.begin(), uniq.end());
        return ans;
    }
};


//利用减枝加速
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        int n = nums.size() - 4;
        if(n < 0) return ans;
        int l = nums[0], r = nums[nums.size() - 1];
        //cout<<r<<endl;
        if(4 * l > target || 4 * r < target) return ans;
        int cur = nums[0];
        for(int i = 0; i <= n; i++) {
            cur = nums[i];
            if(i > 0 && cur == nums[i - 1]) {
                //cout<<"1"<<endl;
                continue;
            }
            if(4 * cur > target) {
                //cout<<"2"<<endl;
                continue;
            }
            if(cur + 3 * r < target) {
                //cout<<"3"<<endl;
                continue;
            }
            vector<vector<int>> tmp = threeSum(nums, i + 1, target - nums[i]);
            for(vector<int> v : tmp) {
                v.push_back(nums[i]);
                ans.push_back(v);
            }
        }
              
        set<vector<int>> uniq(ans.begin(), ans.end());
        vector<vector<int>> result(uniq.begin(), uniq.end());
        return result;
    }
    
    vector<vector<int>> threeSum(vector<int>& nums, int start, int target) {
        vector<vector<int>> ans;
        int n = nums.size() - 2;
        int l = nums[start];
        int r = nums[nums.size() - 1];
        if(3 * l > target || 3 * r < target) return ans;
        int cur = nums[start];
        for(int i = start; i <= n; i++) { 
            cur = nums[i];
            if(i > start && cur == nums[i - 1]) continue;
            if(cur + 2 * r < target) continue;
            if(cur * 3 > target) continue;
            vector<vector<int>> tmp = twoSum(nums, i + 1, target - nums[i]);
            for(vector<int> v : tmp) {
                v.push_back(nums[i]);
                ans.push_back(v);
            }
        }
        return ans;
    }
    
    vector<vector<int>> twoSum(vector<int>& nums, int start, int target) {
        unordered_map<int, int> data;
        vector<vector<int>> ans;
        for(int i = start; i < nums.size(); i++) {
            if(data.find(target - nums[i]) != data.end()) {
                vector<int> tmp;
                tmp.push_back(target - nums[i]);
                tmp.push_back(nums[i]);
                ans.push_back(tmp);
            } else {
                data[nums[i]] = i;
            }
        }
        
        return ans;
    }
};

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        if(n < 4) return ans;
        for(int i = 0; i < n - 3; i++) {
            if(i > 0 && nums[i] == nums[i - 1]) continue;
            if(nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) break;
            if(nums[i] + nums[n - 1] + nums[n - 2] + nums[n - 3] < target) continue;
            for(int j = i + 1; j < n - 2; j++) {
                if(j > i + 1 && nums[j] == nums[j - 1]) continue;
                if(nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) break;
                if(nums[i] + nums[j] + nums[n - 1] + nums[n - 2] < target) continue;
                int left = j + 1;
                int right = n - 1;
                while(left < right) {
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if(sum > target) {
                        right--;
                    } else if(sum < target) {
                        left++;
                    } else {
                        vector<int> v = {nums[i], nums[j], nums[left], nums[right]};
                        ans.push_back(v);
                        left++;
                        right--;
                        while(left < right && nums[left] == nums[left - 1]) left++;
                        while(left < right && nums[right] == nums[right + 1]) right--;
                    }
                }
            }
        }
        return ans;
    }
};

/*
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> total;
        int n = nums.size();
        if(n<4)  return total;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-3;i++)
        {
            if(i>0&&nums[i]==nums[i-1]) continue;
            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target) break;
            if(nums[i]+nums[n-3]+nums[n-2]+nums[n-1]<target) continue;
            for(int j=i+1;j<n-2;j++)
            {
                if(j>i+1&&nums[j]==nums[j-1]) continue;
                if(nums[i]+nums[j]+nums[j+1]+nums[j+2]>target) break;
                if(nums[i]+nums[j]+nums[n-2]+nums[n-1]<target) continue;
                int left=j+1,right=n-1;
                while(left<right){
                    int sum=nums[left]+nums[right]+nums[i]+nums[j];
                    if(sum<target) left++;
                    else if(sum>target) right--;
                    else{
                        total.push_back(vector<int>{nums[i],nums[j],nums[left],nums[right]});
                        do{left++;}while(nums[left]==nums[left-1]&&left<right);
                        do{right--;}while(nums[right]==nums[right+1]&&left<right);
                    }
                }
            }
        }
        return total;
    }
};
*/
