class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        //brute force time o(n^2) space o(n)
        int n = nums.size();
        if(0 == n) return 0;
        if(k < 0) return 0;
        int ans = 0;
        sort(nums.begin(), nums.end());
        if(k == 0) {
            int i = 0;
            int last = 1e7 + 1;
            int next = 1e7 + 2;
            while(i < n) {
                next = nums[i];
                if(last != next) {
                    last = next;
                    i++;
                } else {
                    ans++;
                    while(i < n && nums[i] == last) {
                        i++;
                    }
                }
            }
        } else {
            vector<int> st;
            int last = 1e7 + 1;
            int next = 1e7 + 2;
            int i = 0;
            while(i < n) {
                next = nums[i];
                if(last != next) {
                    st.push_back(next);
                    last = next;
                    i++;
                } else {
                    while(i < n && last == nums[i]) {
                        i++;
                    }
                }
            }
            for(int i = 0; i < st.size(); i++) {
                for(int j = i + 1; j < st.size(); j++) {
                    if(st[j] - st[i] == k) {
                        ans++;
                    }
                }
            }
        }
        return ans;
    }
};

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        unordered_map<int, int> cmp;
        for(int d : nums) {
            cmp[d]++;
        }
        int ans = 0;
        if(k < 0) return 0;
        if(k == 0) {
            for(auto& it : cmp) {
                if(it.second >= 2) {
                    ans++;
                }
            }
        } else {
            for(auto& it : cmp) {
                if(cmp.find(it.first + k) != cmp.end()) {
                    ans++;
                }
            }
        }
        
        return ans;
    }
};

class Solution {
    public int findPairs(int[] nums, int k) {
        if(nums == null || nums.length == 0 || k < 0) return 0;
        HashMap<Integer, Integer> cmp = new HashMap<>();
        int cnt = 0;
        for(int d : nums) {
            cmp.put(d, cmp.getOrDefault(d, 0) + 1);
        }
        int ans = 0;
        if(k == 0) {
            for(Map.Entry<Integer, Integer> e : cmp.entrySet()) {
                if(e.getValue() >= 2) ans++;
            }
        } else {
            for(Map.Entry<Integer, Integer> e : cmp.entrySet()) {
                if(cmp.containsKey(e.getKey() + k)) ans++;
            }
        }
        return ans;
    }
}

class Solution {
   public int findPairs(int[] nums, int k) {
       if (k < 0) return 0;
        Map<Integer, Integer> dataMp = new HashMap<>();
        for (int d : nums) {
            dataMp.put(d, dataMp.getOrDefault(d, 0) +1);
        }
        
        int ans = 0;
        Set<Map.Entry<Integer, Integer>> entrySets = dataMp.entrySet();
        if (k == 0) {
            for (Map.Entry<Integer, Integer> entry : entrySets) {
                if (entry.getValue() >= 2) {
                    ans++;
                }
            }
        } else {
            for (Map.Entry<Integer, Integer> entry : entrySets) {
                int t = entry.getKey();
                if (dataMp.containsKey(t + k)) {
                    ans++;
                }
            }
        }
        
        return ans;
    }
}


class Solution {
    public int findPairs(int[] nums, int k) {
        //edge case
        if (null == nums || nums.length <= 1 || k < 0) return 0;
        
        //general case
        int ans = 0;
        Arrays.sort(nums);
        int end = 1;
        int start = 0;
        while (start < nums.length - 1) {
            while (end < nums.length && nums[end] < nums[start] + k) {
                end++;
            }
            
            if (end == nums.length) break;
            
            if (nums[end] == nums[start] + k) {
                //System.out.println(start + " " + end);
                ans++;
                while (start + 1 < nums.length && nums[start] == nums[start + 1]) {
                   start++;
                }
                if (start +1 == nums.length) break;
                start++;
            } else {
                start++;
            }
            
            end = start + 1;
        }
        
        return ans;
    }
}
