class Solution {
public:
    vector<vector<int>> ans;
    vector<int> path;
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        if(n == 0) return ans;
        //以第一个数开头 以第二个数开头 。。。 以第n个数开头
        ans.push_back(path);
        for(int i = 0; i < n; i++) {
            dfs(nums, i, n);
        }
        return ans;
    }
    
    void dfs(vector<int> &nums, int start, int end) {
        if(start == end) {
            ans.push_back(path);
            return;
        }
        
        path.push_back(nums[start]);
        //以第一个数开头 以第二个数开头 。。。 以第n个数开头
        for(int i = start + 1; i <= end; i++) {
            dfs(nums, i, end);
        }
        path.pop_back();
    }
};

class Solution {
    public List<List<Integer>> ans = new ArrayList<List<Integer>>();
    public List<Integer> path = new ArrayList<Integer>();
    public List<List<Integer>> subsets(int[] nums) {
        int n = nums.length;
        if(0 == n) {
            return ans;
        }
        ans.add(path);
        for(int i = 0; i < n; i++) {
            dfs(nums, i, n);
        }
        return ans;
    }
    
    void dfs(int[] nums, int start, int end) {
        if(start == end) {
            List<Integer> tmp = new ArrayList<>(path);
            ans.add(tmp);
            return;
        }
        
        path.add(nums[start]);
        for(int i = start + 1; i <= end; i++) {
            dfs(nums, i, end);
        }
        path.remove(path.size() - 1);
    }
}

class Solution {
    //另一种想法, 每个元素进来后，会导致原先的集合大小翻倍，划分为两个集合，包含该元素和不包含该元素两种
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        ans.add(new ArrayList<Integer>());
        for(int i = 0; i < nums.length; i++) {
            int k = ans.size();
            for(int j = 0; j < k; j++) {
                ArrayList<Integer> tmp = new ArrayList<>(ans.get(j));
                tmp.add(nums[i]);
                ans.add(tmp);
            }
        }
        return ans;
    }
}

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        ans.push_back(vector<int>());
        for(int i = 0; i < nums.size(); i++) {
            int k = ans.size();
            for(int j = 0; j < k; j++) {
                vector<int> tmp = ans[j];
                tmp.push_back(nums[i]);
                ans.push_back(tmp);
            }
        }
        return ans;
    }
};

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        int k = pow(2, n);
        vector<vector<int>> ans(k, vector<int>());
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < k; j++) {
                if(j >> i & 1) {
                    ans[j].push_back(nums[i]);
                }
            }
        }
        return ans;
    }
};
