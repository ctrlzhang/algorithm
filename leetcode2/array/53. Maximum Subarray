class Solution {
    //一维dp
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        if(n <= 0) return 0;
        
        int[] dp = new int[n];
        dp[0] = nums[0];
        for(int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]);
        }
        
        int ans = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++) {
            if(ans < dp[i]) {
                ans = dp[i];
            }
        }
        return ans;
    }
}

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        if(n <= 0) return 0;
        
        vector<int> dp(n, INT_MIN);
        dp[0] = nums[0];
        for(int i = 1; i < n; i++) {
            dp[i] = max(dp[i - 1] + nums[i], nums[i]);
        }
        
        int ans = INT_MIN;
        for(int i = 0; i < n; i++) {
            if(ans < dp[i]) {
                ans = dp[i];
            }
        }
        return ans;
    }
};
