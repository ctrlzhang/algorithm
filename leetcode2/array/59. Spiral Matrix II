class Solution {
    public int[][] generateMatrix(int n) {
        int[][] ans = new int[n][n];
        int top = 0, bottom = n - 1, left = 0, right = n - 1;
        int val = 1;
        while(top <= bottom && left <= right) {
            //top
            for(int i = left; i <= right; i++) {
                ans[top][i] = val++;
            }
            //right
            for(int i = top + 1; i < bottom; i++) {
                ans[i][right] = val++;
            }
            //bottom
            if(top < bottom) {
                for(int i = right; i >= left; i--) {
                    ans[bottom][i] = val++;
                }
            }
            //left
            if(left < right) {
                for(int i = bottom - 1; i > top; i--) {
                    ans[i][left] = val++;
                }
            }
            top++;
            bottom--;
            left++;
            right--;
        }
        return ans;
    }
}

class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> ans(n, vector<int>(n, 0));
        int top = 0, bottom = n - 1, left = 0, right = n - 1;
        int val = 1;
        while(top <= bottom && left <= right) {
            //top
            for(int i = left; i <= right; i++) {
                ans[top][i] = val++;
            }
            //right
            for(int i = top + 1; i < bottom; i++) {
                ans[i][right] = val++;
            }
            //bottom
            if(top < bottom) {
                for(int i = right; i >= left; i--) {
                    ans[bottom][i] = val++;
                }
            }
            //left
            if(left < right) {
                for(int i = bottom - 1; i > top; i--) {
                    ans[i][left] = val++;
                } 
            }
            
            top++;
            bottom--;
            left++;
            right--;
        }
        return ans;
    }
};
