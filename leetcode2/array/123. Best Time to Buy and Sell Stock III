//TLE
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if (n <= 1) return 0;
        
        //just trade one time
        int ans = getMaxProfit(prices, 0, n - 1);
        
        //just trade two times
        int left = 0, right = 0;
        for (int k = 1; k <= n - 2; k++) {
            for (int j = 0; j < k; j++) {
                if (prices[k] - prices[j] > left) {
                    left = prices[k] - prices[j];
                }
            }
            
            right = getMaxProfit(prices, k, n - 1);
            
            if (ans < left + right) {
                ans = left + right;
            }
        }
        return ans;
    }
    
    int getMaxProfit(int[] prices, int l, int r) {
        int ans = 0;
        int lowPrice = prices[l];
        for (int i = l; i <= r; i++) {
            if (prices[i] < lowPrice) {
                lowPrice = prices[i];
            } else {
                if (ans < prices[i] - lowPrice) {
                    ans = prices[i] - lowPrice;
                }
            }
        }
        return ans;
    }
}

class Solution {
    //需要理解清楚求从i到j的一次交易的最优解,表示i到j区间内的一次最优交易
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if (n <= 1) return 0;
        
        List<Integer> left = new ArrayList<>();
        int low = prices[0];
        int profit = 0;
        left.add(profit);
        for (int i = 1; i < n; i++) {
            if (prices[i] < low) {
                low = prices[i];
            } else {
                if (profit < prices[i] - low) {
                    profit = prices[i] - low;
                }
            }
            left.add(profit);
        }
        
        List<Integer> right = new ArrayList<>();
        int high = prices[n - 1];
        profit = 0;
        right.add(profit);
        for (int i = n - 2; i >= 0; i--) {
            if (prices[i] > high) {
                high = prices[i];
            } else {
                if (profit < high - prices[i]) {
                    profit = high - prices[i];
                }
            }
            right.add(profit);
        }
        
        int ans = 0;
        for (int i = 0; i < n; i++) {
            //System.out.println(left.get(i) + " " + right.get(i));
            if (ans < right.get(n - 1 -i) + left.get(i)) {
                ans = right.get(n - 1 -i) + left.get(i);
            }
        }
        return ans;
    }
}

class Solution {
    public int maxProfit(int[] prices) {
        int hold1 = Integer.MIN_VALUE;
        int hold2 = Integer.MIN_VALUE;
        int release1 = 0;
        int release2 = 0;
        for (int d : prices) {
            release2 = Math.max(release2, hold2 + d);
            hold2 = Math.max(hold2, release1 - d);
            release1 = Math.max(release1, hold1 + d);
            hold1 = Math.max(hold1, -d);
        }
        
        return Math.max(Math.max(hold1, hold2), Math.max(release1, release2));
    }
}
