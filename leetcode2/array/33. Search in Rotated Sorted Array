class Solution {
    public int search(int[] nums, int target) {
        HashMap<Integer, Integer> pos = new HashMap<>();
        int i = 0;
        for(int d : nums) {
            pos.put(d, i);
            i++;
        }
        return pos.getOrDefault(target, -1);
    }
}

class Solution {
public:
    int search(vector<int>& nums, int target) {
        unordered_map<int, int> pos;
        int i = 0;
        for(int d : nums) {
            pos[d] = i;
            i++;
        }
        if(pos.find(target) != pos.end()) {
            return pos[target];
        }
        return -1;
    }
};

//利用二分查找的思想
class Solution {
    public int search(int[] nums, int target) {
        //split into two parts
        return helper(nums, 0, nums.length - 1, target);
    }
    
    int helper(int[] nums, int l, int r, int target) {
        if(l > r) return -1;
        int mid = l + (r - l) / 2;
        if(nums[mid] == target) return mid;
        if(nums[mid] > nums[r]) {
            if(target > nums[r]) {
                if(nums[mid] > target) {
                    return helper(nums, l, mid - 1, target);
                } else {
                    return helper(nums, mid + 1, r, target);
                }
            } else {
                return helper(nums, mid + 1, r, target);
            }
        } else {
            if(target > nums[r]) {
                return helper(nums, l, mid - 1, target);
            } else {
                if(nums[mid] > target) {
                    return helper(nums, l, mid - 1, target);
                } else {
                    return helper(nums, mid + 1, r, target);
                }
            }
        }
    }
}

class Solution {
public:
    int search(vector<int>& nums, int target) {
        return helper(nums, 0, nums.size() - 1, target);
    }
    
    int helper(vector<int>& nums, int l, int r, int target) {
        if(l > r) return -1;
        int mid = l + (r - l) / 2;
        if(nums[mid] == target) return mid;
        if(nums[mid] > nums[r]) {
            if(target > nums[r]) {
                if(nums[mid] > target) {
                    return helper(nums, l, mid - 1, target);
                } else {
                    return helper(nums, mid + 1, r, target);
                }
            } else {
                return helper(nums, mid + 1, r, target);
            }
        } else {
            if(target > nums[r]) {
                return helper(nums, l, mid - 1, target);
            } else {
                if(nums[mid] > target) {
                    return helper(nums, l, mid - 1, target);
                } else {
                    return helper(nums, mid + 1, r, target);
                }
            }
        }
    }
};

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0, r = nums.size() - 1;
        if(r <= -1) return -1;
        while(l + 1 < r) {
            int mid = l + (r - l) / 2;
            if(nums[mid] == target) return mid;
            if(nums[mid] > nums[r]) {
                if(target > nums[r]) {
                    if(nums[mid] > target) {
                        r = mid - 1;
                    } else {
                        l = mid + 1;
                    }
                } else {
                    l = mid + 1;    
                }
            } else {
                if(target > nums[r]) {
                    r = mid - 1;
                } else {
                    if(nums[mid] > target) {
                        r = mid - 1;
                    } else {
                        l = mid + 1;
                    }
                }
            }
        }
        
        if(nums[l] == target) return l;
        if(nums[r] == target) return r;
        return -1;
    }
};

class Solution {
public:
    int search(vector<int>& nums, int target) {
        //find split point
        int n = nums.size();
        if(n <= 0) return -1;
        int l = 0, r = n - 1;
        while(l + 1 < r) {
            int mid = l + (r - l) / 2;
            if(nums[mid] == target) return mid;
            if(nums[mid] > nums[r]) {
                l = mid;
            } else {
                r = mid;
            }
        }
        
        int low = 0;
        if(nums[l] > nums[r]) {
            low = r;
        } else {
            low = l;
        }
        
        cout<<l<<" "<<r<<" "<<low<<endl;
        if(target == nums[low]) return low;
        if(target <= nums[n - 1]) {
            return binS(nums, low + 1, n - 1, target);
        } else {
            return binS(nums, 0, low - 1, target);
        }
    }
    
    int binS(vector<int>& nums, int l, int r, int target) {
        if(l > r) return -1;
        while(l + 1 < r) {
            int mid = l + (r - l) / 2;
            if(nums[mid] == target) return mid;
            if(nums[mid] > target) {
                r = mid;
            } else {
                l = mid;
            }
        }
        
        if(nums[l] == target) return l;
        if(nums[r] == target) return r;
        return -1;
    }
};
