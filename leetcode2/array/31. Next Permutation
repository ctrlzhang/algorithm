class Solution {
    public void nextPermutation(int[] nums) {
        //if it is bigest, than transform it to be lowest
        int n = nums.length;
        if(n < 2) return;
        int k = n - 1;
        for(; k >= 1; k--) {
            if(nums[k] > nums[k - 1]) break;
        }
        
        if(k == 0) {
            reverse(nums);
            return;
        } else {
            int p = n - 1;
            for(; p >= k; p--) {
                if(nums[p] > nums[k - 1]) break;
            }
            int tmp = nums[p];
            nums[p] = nums[k - 1];
            nums[k - 1] = tmp;
            int l = k, r = n - 1;
            while(l < r) {
                tmp = nums[l];
                nums[l] = nums[r];
                nums[r] = tmp;
                l++;
                r--;
            }
        }
    }
    
    void reverse(int[] nums) {
        int i = 0, j = nums.length - 1;
        while(i < j) {
            int tmp = nums[j];
            nums[j] = nums[i];
            nums[i] = tmp;
            i++;
            j--;
        }
    }
}

class Solution {
    public void nextPermutation(int[] nums) {
        //want to find next asc array, so we shoud find first down point,we will find this from end to start
        //1.find down point
        int n = nums.length;
        if(n <= 1) return;
        
        int i = n - 1;
        for(; i >= 1; i--) {
            if(nums[i] > nums[i - 1]) break;
        }
        if(i == 0) {
            int l = 0, r = n - 1;
            while(l < r) {
                int tmp = nums[l];
                nums[l] = nums[r];
                nums[r] = tmp;
                l++;
                r--;
            }
        } else {       
            //2.exchange
            int j = n - 1;
            for(; j >= i; j--) {
                if(nums[j] > nums[i - 1]) break;
            }
            
            int tmp = nums[i- 1];
            nums[i - 1] = nums[j];
            nums[j] = tmp;
            
            //3.sort
            Arrays.sort(nums, i, n);
        }
    }
}
