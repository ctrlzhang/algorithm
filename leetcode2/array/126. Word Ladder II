class Solution {
public:
    //dfs 时间复杂度为n！
    vector<vector<string>> ans;
    vector<string> path;
    int minLen = INT_MAX;
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        int n = wordList.size();
        vector<int> visited(n, 0);
        path.push_back(beginWord);
        dfs(beginWord, endWord, wordList, 0, visited);
        return ans;
    }
    
    void dfs(string beginWord, string endWord, vector<string> wordList, int level, vector<int>& visited) {
        //cout<<"bw="<<beginWord<<endl;
        int n = wordList.size();
        if (beginWord == endWord) {      
            if (path.size() < minLen) {
                ans.clear();
                ans.push_back(path);
                minLen = path.size();
            } else if (path.size() == minLen) {
                ans.push_back(path);
            }
            
            return;
        }
        
        if (level == n) {
            return;
        }
        
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0 && diffIsOne(beginWord, wordList[i])) {
                path.push_back(wordList[i]);
                visited[i] = 1;
                dfs(wordList[i], endWord, wordList, level + 1, visited);
                visited[i] = 0;
                path.pop_back();
            }
        }
    }
    
    bool diffIsOne(string l, string r) {
        //cout<<l<<" "<<r<<endl;
        int diff = 0;
        for (int i = 0; i < l.size(); i++) {
            diff += (l[i] == r[i] ? 0 : 1);
        }
        //cout<<"diff="<<diff<<endl;
        return diff == 1;
    }
};
