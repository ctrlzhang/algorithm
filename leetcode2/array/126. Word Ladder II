class Solution {
public:
    //dfs 时间复杂度为n！
    vector<vector<string>> ans;
    vector<string> path;
    int minLen = INT_MAX;
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        int n = wordList.size();
        vector<int> visited(n, 0);
        path.push_back(beginWord);
        dfs(beginWord, endWord, wordList, 0, visited);
        return ans;
    }
    
    void dfs(string beginWord, string endWord, vector<string> wordList, int level, vector<int>& visited) {
        //cout<<"bw="<<beginWord<<endl;
        int n = wordList.size();
        if (beginWord == endWord) {      
            if (path.size() < minLen) {
                ans.clear();
                ans.push_back(path);
                minLen = path.size();
            } else if (path.size() == minLen) {
                ans.push_back(path);
            }
            
            return;
        }
        
        if (level == n) {
            return;
        }
        
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0 && diffIsOne(beginWord, wordList[i])) {
                path.push_back(wordList[i]);
                visited[i] = 1;
                dfs(wordList[i], endWord, wordList, level + 1, visited);
                visited[i] = 0;
                path.pop_back();
            }
        }
    }
    
    bool diffIsOne(string l, string r) {
        //cout<<l<<" "<<r<<endl;
        int diff = 0;
        for (int i = 0; i < l.size(); i++) {
            diff += (l[i] == r[i] ? 0 : 1);
        }
        //cout<<"diff="<<diff<<endl;
        return diff == 1;
    }
};

class Solution {
public:
    vector<vector<string>> ans;
    vector<string> path;
    int minLen = INT_MAX;
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        //create a graph
        wordList.push_back(beginWord);
        map<string, set<string>> graph;
        int n = wordList.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (hasOneDiff(wordList[i], wordList[j])) {
                    //cout<<wordList[i]<<" "<<wordList[j]<<endl;
                    graph[wordList[i]].insert(wordList[j]);
                    graph[wordList[j]].insert(wordList[i]);
                }
            }
        }
        wordList.pop_back();
        
        map<string, int> visited;
        for (int i = 0; i < n; i++) {
            visited[wordList[i]] = 0;    
        }
        
        //dfs find the answer
        path.push_back(beginWord);
        dfs(beginWord, endWord, wordList, 0, visited, graph);
        return ans;
    }
    
    void dfs(string beginWord, string endWord, vector<string>& wordList, int level, map<string, int>& visited, map<string, set<string>>& graph) {
        //cout<<beginWord<<" "<<endWord<<endl;
        if (beginWord == endWord) {
            if (path.size() < minLen) {
                //cout<<"path.size()="<<path.size()<<endl;
                minLen = path.size();
                ans.clear();
                ans.push_back(path);
            } else if (path.size() == minLen) {
                ans.push_back(path);
            }
            
            return;
        }
        
        if (level == wordList.size()) return;
        
        for (string s : graph[beginWord]) {
            //cout<<"s="<<s<<endl;
            if (visited[s] == 0) {
                visited[s] = 1;
                path.push_back(s);
                dfs(s, endWord, wordList, level + 1, visited, graph);
                path.pop_back();
                visited[s] = 0;
            }
        }
    }
    
    bool hasOneDiff(string l, string r) {
        int diff = 0;
        for (int i = 0; i < l.size(); i++) {
            if (l[i] != r[i]) {
                diff++;
                if (diff > 1) break;
            }
        }
        return diff == 1;
    }
};

