class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int, int> data;
        for(int i = 0; i < nums.size(); i++) {
            if(data.find(target - nums[i]) != data.end()) {
                ans.push_back(i);
                ans.push_back(data[target - nums[i]]);
                break;
            } else {
                data[nums[i]] = i;
            }
        }
        return ans;
    }
};

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];
        HashMap<Integer, Integer> data = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++) {
            if(data.containsKey(target - nums[i])) {
                ans[0] = i;
                ans[1] = data.get(target - nums[i]);
                break;
            } else {
                data.put(nums[i], i);
            }
        }
        return ans;
    }
}

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp;
        for(int d : nums) {
            mp[d]++;
        }
        
        vector<int> ans(2, -1);
        int l = INT_MIN, r = INT_MIN;
        for(int d : nums) {
            cout<<"d="<<d<<" "<<mp[target - d]<<endl;
            mp[d]--;
            if(mp.find(target - d) != mp.end() && mp[target - d] > 0) {
                l = d;
                r = target - d;
                break;
            }
            mp[d]++;
        }
        
        if(l == INT_MIN && r == INT_MIN) return ans;
        cout<<l<<" "<<r<<endl;
        int cnt = 0;
        for(int i = 0; i < nums.size() && cnt < 2; i++) {
            if(nums[i] == l) {
                ans[cnt] = i;
                cnt++;
            }  else if(nums[i] == r) {
                ans[cnt] = i;
                cnt++;
            }
        }
        return ans;
    }
};

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];
        Map<Integer, Integer> mp = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++) {
            int d = nums[i];
            if(mp.containsKey(target - d)) {
                ans[1] = i;
                ans[0] = mp.get(target - d);
                return ans;
            } else {
                mp.put(d, i);
            }
        }
        return ans;
    }
}
