class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int, int> data;
        for(int i = 0; i < nums.size(); i++) {
            if(data.find(target - nums[i]) != data.end()) {
                ans.push_back(i);
                ans.push_back(data[target - nums[i]]);
                break;
            } else {
                data[nums[i]] = i;
            }
        }
        return ans;
    }
};

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];
        HashMap<Integer, Integer> data = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++) {
            if(data.containsKey(target - nums[i])) {
                ans[0] = i;
                ans[1] = data.get(target - nums[i]);
                break;
            } else {
                data.put(nums[i], i);
            }
        }
        return ans;
    }
}
