class Solution {
public:
    vector<vector<int>> ans;
    vector<int> path;
    vector<vector<int>> combinationSum3(int k, int n) {
        dfs(1, 0, k, n);
        return ans;
    }
    
    void dfs(int start, int level, int maxLevel, int target) {
        if (level > maxLevel) return;
        if (target < 0) {
            return;
        } else if (target == 0 && level == maxLevel) {
            ans.push_back(path);
            return;
        } else {
            if (level == maxLevel) return;
        }
        
        for (int i = start; i <= 9 && i <= target; i++) {
            path.push_back(i);
            dfs(i + 1, level + 1, maxLevel, target - i);
            path.pop_back();
        }
    }
};

class Solution {
    //dfs
    private List<List<Integer>> ans = new ArrayList<>();
    private List<Integer> path = new ArrayList<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
        int level = 0;
        dfs(1, level, k, n);
        return ans;
    }
    
    void dfs(int start, int level, int k, int nextFind) {
        if (level == k) {
            if (0 == nextFind) {
                List<Integer> tmp = new ArrayList<>(path);
                ans.add(tmp);
                return;
            }
            
            return;
        }
        
        for (int i = start; i <= 9; i++) {
            path.add(i);
            dfs(i + 1, level + 1, k, nextFind - i);
            path.remove(path.size() - 1);
        }
    }
}

import java.util.concurrent.CopyOnWriteArrayList;
class Solution {
    //brute forcre -- 2的9次种可能，把他们全部输出出来，取结果符合的
    private List<List<Integer>> ans = new ArrayList<>();
    private CopyOnWriteArrayList<List<Integer>> all = new CopyOnWriteArrayList<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
        all.add(new ArrayList<>());
        for (int i = 1; i <= 9; i++) {
            for (List<Integer> t : all) {
                List<Integer> tmp = new ArrayList<>(t);
                tmp.add(i);
                all.add(tmp);
            }
        }
        
        for (List<Integer> t : all) {
            //System.out.println(t.size());
            if (t.size() == k) {
                int sum = 0;
                for (int d : t) {
                    sum += d;
                }
                if (sum == n) {
                    ans.add(t);
                } 
            }
        }
        
        return ans;
    }
}
