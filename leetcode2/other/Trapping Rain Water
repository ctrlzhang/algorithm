class Solution {
public:
    //两个数组扫描
    int trap(vector<int>& height) {
        //edge case
        if (height.empty()) return 0;
        
        vector<int> left(height.size(), 0);
        vector<int> right(height.size(), 0);
        int leftMax = 0;
        for (int i = 0; i < height.size(); i++) {
            leftMax = max(leftMax, height[i]);
            left[i] = leftMax;
        }

        int rightMax = 0;
        for (int i = height.size() - 1; i >= 0; i--) {
            rightMax = max(height[i], rightMax);
            right[i] = rightMax;
        }
        
        int ans = 0;
        for (int i = 0; i < height.size(); i++) {
            ans += min(left[i], right[i]) - height[i];
        }
        
        return ans;
    }
};

class Solution {
    public int trap(int[] height) {
        //edge case
        if (height.length == 0) return 0;
        
        int n = height.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int leftMax = 0, rightMax = 0;
        for (int i = 0; i < n; i++) {
            leftMax = Math.max(leftMax, height[i]);
            left[i] = leftMax;
        }
        
        for (int i = n - 1; i >= 0; i--) {
            rightMax = Math.max(rightMax, height[i]);
            right[i] = rightMax;
        }
        
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += Math.min(left[i], right[i]) - height[i];
        }
        
        return ans;
    }
}
