class Solution {
    public int maxTurbulenceSize(int[] A) {
        //dp
        //dp[i] - the max length of an array that is end with A[i]
        int n = A.length;
        if (1 == n) return 1;
        
        int[] dp = new int[n];
        dp[0] = 1;
        if (A[1] == A[0]) {
            dp[1] = 1;
        } else {
            dp[1] = 2;
        }
        
        for (int i = 2; i < n; i++) {
            if ((A[i - 1] > A[i - 2] && A[i - 1] > A[i]) || 
                (A[i - 1] < A[i - 2] && A[i - 1] < A[i])) { 
                dp[i] = dp[i - 1] + 1;
                // System.out.println("index=" + i + " " + dp[i]);
            } else {
                if (A[i] == A[i - 1]) {
                    dp[i] = 1;
                } else {
                    dp[i] = 2;
                }
            }
        }
        
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, dp[i]);
        }
        return ans;
    }
}


class Solution {
    public int maxTurbulenceSize(int[] A) {
        int inc = 1, dec = 1;
        int ans = 1;
        for (int i = 1; i < A.length; i++) {
            int d = A[i] - A[i - 1];
            if (d > 0) {
                inc = dec + 1;
                dec = 1;
            } else if (d < 0) {
                dec = inc + 1;
                inc = 1;
            } else {
                dec = 1;
                inc = 1;
            }
            
            ans = Math.max(ans, Math.max(inc, dec));
        }
        
        return ans;
    }
}
