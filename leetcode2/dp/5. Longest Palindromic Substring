class Solution {
    public String longestPalindrome(String s) {
        if (s.isEmpty()) return s;
        
        int len = s.length();
        StringBuilder sb = new StringBuilder();
        String r = sb.append(s).reverse().toString();
        int[][] dp = new int[len + 1][len + 1];
        int ans = 0;
        int pos = 0;
        
        for (int i = 1; i <= len; i++) {
            for (int j = 1; j <= len; j++) {
                if (s.charAt(i - 1) == r.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                    if (dp[i][j] > ans) {
                        if (i + j - dp[i][j] + 1 == len + 1) {
                            ans = dp[i][j];
                            pos = i - 1;
                        }
                    }
                } else {
                    dp[i][j] = 0;
                }
            }
        }
        
        return s.substring(pos - ans + 1, pos + 1);
    }
}

class Solution {
    //dp[i][j] = true if (s[i] == s[j] && dp[i + 1][j - 1])
    //需要先求出dp[i + 1][j - 1]
    //故需要从右边先开始求
    public String longestPalindrome(String s) {
        int len = s.length();
        int[][] dp = new int[len][len];
        int ans = 0;
        int pos = 0;
        for (int i = len - 1; i >= 0; i--) {
            for (int j = i; j < len; j++) {
                if (s.charAt(i) == s.charAt(j) && (j - i < 3 || dp[i + 1][j - 1] == 1)) {
                    dp[i][j] = 1;
                    if (ans < (j - i + 1)) {
                        ans = j - i + 1;
                        pos = i;
                    }
                }
            }
        }
        
        return s.substring(pos, pos + ans);
    }
}
