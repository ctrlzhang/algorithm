class Solution {
    //dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])
    //dp[i] = min(dp[i], dp[i - 1])
    public int minPathSum(int[][] grid) {
        //edge case
        int row = grid.length;
        if (row == 0) return 0;
        
        int col = grid[0].length;
        if (col == 0) return 0;
        
        for (int j = 1; j < col; j++) {
            grid[0][j] += grid[0][j - 1];
        }
        
        for (int i = 1; i < row; i++) {
            grid[i][0] += grid[i - 1][0];
        }
        
        for (int i = 1; i < row; i++) {
            for (int j = 1; j < col; j++) {
                grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);
            }
        }
        
        return grid[row - 1][col - 1];
    }
}

class Solution {
    public int minPathSum(int[][] grid) {
        int row = grid.length;
        if (row == 0) return 0;
        
        int col = grid[0].length;
        if (col == 0) return 0;
        
        int[] dp = new int[col];
        dp[0] = grid[0][0];
        for (int j = 1; j < col; j++) {
            dp[j] = grid[0][j] + dp[j - 1];
        }
        
        for (int i = 1; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (j == 0) {
                    dp[0] =  grid[i][0] + dp[0];
                } else {
                    dp[j] = grid[i][j] + Math.min(dp[j], dp[j - 1]);
                }
            }
        }
        
        return dp[col - 1];
    }
}
