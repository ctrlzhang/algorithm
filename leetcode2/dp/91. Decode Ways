class Solution {
    Map<String, Integer> dp = new HashMap<>();
    public int numDecodings(String s) {
        if (dp.containsKey(s)) {
            return dp.get(s);    
        }
        
        if (s == null) return 0;
        if (s.isEmpty()) return 1;
        if (s.length() == 1) {
            if (s.equals("0")) return 0;
            return 1;
        }
            
        int ans = 0;
        String tmp = s.substring(0, 1);
        if (!tmp.equals("0")) {
            ans += numDecodings(s.substring(1));
        }
        
        tmp = s.substring(0, 2);
        if (Integer.valueOf(tmp) <= 26 && Integer.valueOf(tmp) >= 10) {
            ans += numDecodings(s.substring(2));
        }
        
        dp.put(s, ans);
        return ans;
    }
}

class Solution {
    //dp[i] - string starts at index i
    //dp[i] = dp[i + 1] if (s.charAt(i) != '0') + dp[i + 2] if (s.charAt(i) >= '1' || s.charAt(i) == '2'&& s.charAt(i + 1) <= '6'
    public int numDecodings(String s) {
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[n] = 1;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) != '0') {
                dp[i] += dp[i + 1];
                if (i + 2 <= n) {
                    int p = Integer.valueOf(s.substring(i, i + 2));
                    if (p >= 10 && p <= 26) {
                        dp[i] += dp[i + 2];
                    }
                }
            }
        }
        
        return dp[0];
    }
}
