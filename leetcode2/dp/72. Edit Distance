class Solution {
    //abc - sa
    //abd - sb
    //dp[i][j] = dp[i - 1][j - 1] (i > 0 && j > 0) if (sa[i] == sb[j])
    //dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 if (sa[i] != sb[j])
    public int minDistance(String word1, String word2) {
        int lenA = word1.length();
        int lenB = word2.length();
        int[][] dp = new int[lenA + 1][lenB + 1];
        for (int j = 0; j <= lenB; j++) {
            dp[0][j] = j;
        }
        
        for (int i = 0; i <= lenA; i++) {
            dp[i][0] = i;
        }
        
        for (int i = 1; i <= lenA; i++) {
            for (int j = 1; j <= lenB; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), 
                                        dp[i - 1][j - 1]) + 1;
                }
            }
        }
        
        return dp[lenA][lenB];
    }
}
