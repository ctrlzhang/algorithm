class Solution {
    //for example
    //n n - 1 n - 2
    //dp[n][num] = 1 + mim{dp[n][num - n], dp[n - 1][num - n], dp[n - 2][num - n], ..., dp[1][n]}
    //ans = min {dp[k][sum]} k = 1,2,3,...,n-1,n
    public int numSquares(int n) {
        int ans = Integer.MAX_VALUE;
        List<Integer> data = new ArrayList<>();
        int i = 0;
        for (; i * i <= n; i++) {
            data.add(i * i);
        }
        if (i * i == n) return 1;
        
        int cnt = data.size();
        int[][] dp = new int[cnt][1 + n];
        for (int l = 1; l < cnt; l++) {
            for (int p = 1; p <= n; p++) {
                dp[l][p] = Integer.MAX_VALUE;
            }
        }
        
        for (int k = 1; k < cnt; k++) {
            int val = data.get(k);
            for (int sum = val; sum <= n; sum++) {
                for (int j = k; j >= 1; j--) {
                    if (dp[j][sum - val] == Integer.MAX_VALUE) continue;
                    //System.out.println("k={}" + k + " sum=" + sum + " j={}" + j + " remain={}" + (sum - k));
                    dp[k][sum] = Math.min(dp[k][sum], 1 + dp[j][sum - val]);
                    //System.out.println("dp[k][sum]=" + dp[k][sum]);
                }
            }
            
            if (ans > dp[k][n]) {
                //System.out.println("dp[k][n]=" + dp[k][n]);
                ans = dp[k][n];
            }
        }
        
        return ans;
    }
    
    public boolean isSquare(int d) {
        int i = 1;
        for (; i * i < d; i++) {
        }
        
        if (i * i == d) return true;
        return false;
    }
}


class Solution {
public:
    //dp[i][j] = 1 + min{dp[i][j - i], dp[nextI][j - i], ..., dp[k][j]}
    //dp[i][i] = 1 + min{dp[0][0]} = 1
    //dp[i][j] = 1 + min{dp[i][j - i], dp[ni][j - i], ..., dp[nii][j - i]}
    //if i > j, dp[i][j] = INT_MAX;
    //if i == j, dp[i][j] = 1;
    //if i < j,
    //
    int numSquares(int n) {
        int i = 1;
        vector<int> data;
        while (i * i <= n) {
            data.push_back(i * i);
            ++i;
        }
        
        int len = data.size();
        int dp[1 + len][1 + n];
        memset(dp, 0, sizeof(dp));
        int ans = INT_MAX;
        //cout<<"len="<<len<<endl;
        
        for (int i = 1; i <= len; i++) {
            //cout<<"num="<<data[i - 1]<<endl;
            for (int j = data[i - 1] - 1; j >= 1; j--) {
                dp[i][j] = INT_MAX;
                //output(i, j, dp[i][j]);
            }
        }
        
        for (int j = 1; j <= n; j++) {
            for (int i = 1; i <= len && data[i - 1] <= j; i++) {
                int tmp = INT_MAX;
                for (int k = i; k <= len; k++) {
                    tmp = min(tmp, dp[k][j - data[i - 1]]);
                }
                
                //output(i, j, tmp);
                
                if (tmp != INT_MAX) {
                    dp[i][j] = 1 + tmp;
                } else {
                    dp[i][j] = tmp;
                }
                
                //output(i, j, dp[i][j]);
            }
        }
        
        for (int i = 1; i <= len; i++) {
            ans = min(ans, dp[i][n]);
            //cout<<"ans="<<ans<<endl;
        }
        
        return ans;
    }
    
    void output(int i, int j, int tmp) {
        cout<<"i="<<i<<" j="<<j<<" tmp="<<tmp<<endl;
    }
    
    void output2(int i, int j, int tmp) {
        cout<<"output2 i="<<i<<" j="<<j<<" tmp="<<tmp<<endl;
    }
};
