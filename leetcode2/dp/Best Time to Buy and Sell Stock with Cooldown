class Solution {
public:
    //dp[i][j] = max{dp[i][k - 1] + dp[k + 1][j]} cooldown=3,4,5,6,...,n-3
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if (0 == n) return 0;
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = prices[j] - prices[i];
            }
        }
        
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j < n; j++) {
                //cout<<"i="<<i<<" j="<<j<<" "<<dp[i][j]<<endl;
                for (int k = i; k < j; k++) {
                    int tmp = 0;
                    if (k - 1 >= i) {
                        tmp += dp[i][k - 1];
                    }
                    
                    if (k + 1 <= j) {
                        tmp += dp[k + 1][j];
                    }

                    dp[i][j] = max(dp[i][j], tmp);
                }
            }
        }
        
        return dp[0][n - 1];
    }
};
