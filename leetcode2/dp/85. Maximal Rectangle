class Solution {
    //递增栈解法
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null) return 0;
        int row = matrix.length;
        if (row == 0) return 0;
        int col = matrix[0].length;
        if (col == 0) return 0;
        
        int[] s = new int[col];
        int result = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (i == 0) {
                    s[j] = matrix[i][j] == '0' ? 0 : 1;
                } else {
                    s[j] = matrix[i][j] == '0' ? 0 : 1 + s[j];
                }
            }
            
            //try to calculate max area
            result = Math.max(result, getMaxArea(s));
            // System.out.println("result=" + result);
        }
        return result;
    }
    
    private int getMaxArea(int[] arr) {
        int n = arr.length;
        Stack<Integer> s = new Stack<>();
        int[] left = new int[n];
        for (int i = 0; i < n; i++) {
            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) {
                s.pop();
            }
            left[i] = !s.isEmpty() ? s.peek() : -1;
            s.push(i);
        }
        
        s.clear();
        int[] right = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) {
                s.pop();
            }
            right[i] = !s.isEmpty() ? s.peek() : n;
            s.push(i);
        }
        
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, arr[i] * (right[i] - left[i] - 1));
        }
        return ans;
    }
}
