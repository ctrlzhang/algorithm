class Trie {
public:
    /** Initialize your data structure here. */
    Trie() {
        this->isEnd = false;
        for (int i = 0; i < 26; i++) {
            this->children[i] = nullptr;
        }
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Trie* ptr = this;
        for (char c : word) {
            if (ptr->children[c - 'a'] == nullptr) {
                ptr->children[c - 'a'] = new Trie();
            }
            
            ptr = ptr->children[c - 'a'];
        }
        
        ptr->isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Trie* ptr = this;
        for (char c : word) {
            if (ptr->children[c - 'a'] == nullptr) return false;
            ptr = ptr->children[c - 'a'];
        }
        
        return ptr->isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Trie* ptr = this;
        for (char c : prefix) {
            if (ptr->children[c - 'a'] == nullptr) return false;
            ptr = ptr->children[c - 'a'];
        }
        
        return true;
    }
    
private:
    Trie* children[26];
    bool isEnd;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */
