//dfs
class Solution {
public:
    //recursive
    int findCircleNum(vector<vector<int>>& M) {
        //edge case
		int row = M.size();
		if (0 == row) return 0;
		int col = M[0].size();
		if (0 == col) return 0;
		
		vector<int> visited(row, 0);
		int ans = 0;
		for (int i = 0; i < row; i++) {
			if (visited[i]) continue;
			++ans;
			dfs(M, visited, i);
		}
		return ans;
    }
	
	void dfs(vector<vector<int>>& M, vector<int>& visited, int idx) {
		visited[idx] = 1;
		int row = M.size();
		for (int i = 0; i < row; i++) {
			if (visited[i]) continue;
			if (M[idx][i] == 1) {
				dfs(M, visited, i);
			}
		}
	}
};

//bfs
class Solution {
public:
    int findCircleNum(vector<vector<int>>& M) {
        //edge case
		int row = M.size();
		if (0 == row) return 0;
		int col = M[0].size();
		if (0 == col) return 0;
		
		vector<int> visited(row, 0);
		int ans = 0;
		for (int i = 0; i < row; i++) {
			if (visited[i]) continue;
			++ans;
			bfs(M, visited, i);
		}
		return ans;
    }
	
	void bfs(vector<vector<int>>& M, vector<int>& visited, int idx) {
		visited[idx] = 1;
		queue<int> q;
		q.push(idx);
		while (!q.empty()) {
			int n = q.size();
			for (int k = 0; k < n; k++) {
				int curId = q.front();
				q.pop();
				for (int i = 0; i < M.size(); i++) {
					if (visited[i] == 0 && M[curId][i] == 1) {
						visited[i] = 1;
						q.push(i);
					}
				}
			}
		}
	}
};

//并查集
class Solution {
public:
	//union find
    int findCircleNum(vector<vector<int>>& M) {
        //edge case
		int row = M.size();
		if (0 == row) return 0;
		int col = M[0].size();
		if (0 == col) return 0;
		
		vector<int> parent(row, 0);
		for (int i = 0; i < row; i++) {
			parent[i] = i;
		}
		
		for (int i = 0; i < row; i++) {
			for (int j = i + 1; j < row; j++) {
				if (1 == M[i][j]) {
					unionFind(parent, i, j);
				}
			}
		}
		
		int ans = 0;
		for (int i = 0; i < row; i++) {
			if (i == findParent(parent, i)) ++ans;
		}
		
		return ans;
    }
	
	void unionFind(vector<int>& parent, int p, int c) {
		int lp = findParent(parent, p);
		int rp = findParent(parent, c);
		parent[rp] = lp;
	}
	
	int findParent(vector<int>& parent, int idx) {
		int tmp = idx;
		while (tmp != parent[tmp]) {
			tmp = parent[tmp];
		}
		
		//path compress
		while (idx != parent[idx]) {
			int nextIdx = parent[idx];
			parent[idx] = tmp;
			idx = nextIdx;
		}
		
		return tmp;
	}
};
