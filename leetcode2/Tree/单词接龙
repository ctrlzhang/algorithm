class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        set<string> dict(wordList.begin(), wordList.end());
        dict.insert(beginWord);
        int ans = 0;
        int wordLen = beginWord.length();
        queue<string> q;
        q.push(beginWord);
        while (!q.empty()) {
            ++ans;
            queue<string> tmp = q;
            while (!tmp.empty()) {
                dict.erase(tmp.front());
                tmp.pop();
            }
            
            int n = q.size();
            for (int i = 0; i < n; i++) {
                string cur = q.front();
                q.pop();
                for (int l = 0; l < wordLen; l++) {
	                char old = cur[l];
                    for (char c = 'a'; c <= 'z'; c++) {
			            if (c == old) continue;
			            cur[l] = c;
                        if (dict.count(cur)) {
                            if (cur == endWord) {
                                return ++ans;
                            }
                            q.push(cur);	
                        }
                    }
		            cur[l] = old;
                }
            }
        }

	    return 0;
    }
};
