/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //find mid point
    //merge sort
    ListNode* sortList(ListNode* head) {
        if (nullptr == head || nullptr == head->next) return head;
        //output(head);
        ListNode* mid = find(head); 
        ListNode* rightHead = mid->next;
        mid->next = nullptr;
        ListNode* left = sortList(head);
        ListNode* right = sortList(rightHead);
        return merge(left, right);
    }
    
    void output(ListNode* head) {
        while (nullptr != head) {
            cout<<head->val<<" ";
            head = head->next;
        }
        cout<<endl;
    }
    
    ListNode* find(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head->next;
        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
    ListNode* merge(ListNode* left, ListNode* right) {
        if (left == nullptr) return right;
        if (right == nullptr) return left;
        if (left->val > right->val) {
            right->next = merge(left, right->next);
            //output(right);
            return right;
        }
        
        left->next = merge(left->next, right);
        //output(left);
        return left;
    }
};
