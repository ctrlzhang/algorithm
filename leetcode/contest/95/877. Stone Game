//bfs版本
class Solution {
public:
    unordered_map<string, bool> dp;
    bool stoneGame(vector<int>& piles) {
        return dfs(piles, 0, piles.size() - 1, 0, 0);
    }
    
    bool dfs(vector<int>& piles, int l, int r, int a, int b) {
        if (l > r) return a - b > 0;
        string key = to_string(a) + "_" + to_string(b) + "_" + to_string(l) + "_" + to_string(r);
        if (dp.find(key) != dp.end()) return dp[key];
        
        bool ret = dfs(piles, l + 1, r - 1, a + piles[l], b + piles[r]) 
            || dfs(piles, l + 2, r, a + piles[l], b + piles[l + 1])
            || dfs(piles, l + 1, r - 1, a + piles[r], b + piles[l])
            || dfs(piles, l, r - 2, a + piles[r], b + piles[r - 1]);
        dp[key] = ret;
        return ret;
    }
};

class Solution {
public:
    //dp[i][j] 表示先手时，最优的得分，如果大于0，表示可以取胜
    //本题时假设两个选手都采用了最优的策略
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = piles[i];
        }
        
        //dp[i][j] = 最优策略下 max(a[i] - dp[i + 1][j], a[j] - dp[i][j - 1])
        //这个递推公式是斜着分布的 dp[i][j]依赖dp[i + 1][j] 和 dp[i][j - 1]
        //所以for循环的写法跟常规的有区别，常规的是左上角或着右下角，这个是左下角
        for (int k = 1; k < n; k++) {
            for (int i = 0; i + k < n; i++) {
                int j = i + k;
                dp[i][j] = max(piles[i] - dp[i + 1][j],  piles[j] - dp[i][j - 1]);
            }
        }
        
        return dp[0][n - 1] > 0;
    }
};

//空间复杂度优化为o(N)
//因为这里的递推公式是斜着分布的，斜线恰好构成了一个一维数组，基于此数组，可以得到结果
class Solution {
public:
    //dp[i][j] 表示先手时，最优的得分，如果大于0，表示可以取胜
    //本题时假设两个选手都采用了最优的策略
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        
        /*
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = piles[i];
        }
        */
        
        vector<int> dp(n, 0);
        for (int i = 0; i < n; i++) {
            dp[i] = piles[i];
        }
        
        //dp[i][j] = 最优策略下 max(a[i] - dp[i + 1][j], a[j] - dp[i][j - 1])
        //这个递推公式是斜着分布的 dp[i][j]依赖dp[i + 1][j] 和 dp[i][j - 1]
        //所以for循环的写法跟常规的有区别，常规的是左上角或着右下角，这个是左下角
        for (int k = 1; k < n; k++) {
            for (int i = 0; i + k < n; i++) {
                int j = i + k;
                dp[i] = max(piles[i] - dp[i + 1], piles[j] - dp[i]);
            }
        }
        
        return dp[0] > 0;
    }
};
