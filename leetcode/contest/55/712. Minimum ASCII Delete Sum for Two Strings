class Solution {
public:
    //dp[i][j] = min(dp[i-1][j] + s1[i], dp[i][j-1] + s2[j], dp[i-1][j-1])
    int minimumDeleteSum(string s1, string s2) {
        int l1 = s1.length();
        int l2 = s2.length();
        int dp[l1 + 1][l2 + 1] = {0};
        //memset(dp, 0, sizeof((l1 + 1) * (l2 + 2));
        int sum1 = 0, sum2 = 0;
        for(int i = 0; i < l1; i++) {
            sum1 += s1[i];
            dp[i + 1][0] = sum1;    
        }
        
        for(int i = 0; i < l2; i++) {
            sum2 += s2[i];
            dp[0][i + 1] = sum2;
        }
        
        for(int i = 1; i <= l1; i++) {
            for(int j = 1; j <= l2; j++) {
                if(s1[i - 1] == s2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = min(dp[i - 1][j] + s1[i - 1], dp[i][j - 1] + s2[j - 1]);
                }
            }
        }
        
        return dp[l1][l2];
    }
};
