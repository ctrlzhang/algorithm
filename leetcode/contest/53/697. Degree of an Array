class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        int n = nums.size();
        if(0 == n) return 0;
        //number count start end
        unordered_map<int, vector<int>> mp;
        for(int i = 0; i < n; i++) {
            int c = nums[i];
            if(mp.find(c) != mp.end()) {
                mp[c][0]++;
                mp[c][2] = i;
            } else {
                vector<int> tmp(3, -1);
                mp[c] = tmp;
                mp[c][0] = 1;
                mp[c][1] = i;
                mp[c][2] = i;
            }
        }
        
        int ans = -1;
        int maxCnt = INT_MIN;
        int minLen = INT_MAX;
        for(auto& it : mp) {
            vector<int> cv = it.second;
            if(cv[0] > maxCnt) {
                maxCnt = cv[0];
                minLen = cv[2] - cv[1] + 1;
            } else if(cv[0] == maxCnt) {
                minLen = min(minLen, cv[2] - cv[1] + 1);
            }
        }
        
        return minLen;
    }
};
