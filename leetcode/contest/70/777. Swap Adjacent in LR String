class Solution {
public:
    //bfs
    bool canTransform(string start, string end) {
        queue<string> q;
        map<string, int> visit;
        q.push(start);
        visit[start] = 1;
        while(!q.empty()) {
            string s = q.front();
            q.pop();
            if(s == end) return true;
            vector<string> ret = trans(s);
            for(string t : ret) {
                if(visit[t] == 1) continue;
                q.push(t);
                visit[t] = 1;
            }
        }
        
        return false;
    }
    
    vector<string> trans(string s) {
        vector<string> ans;
        int i = 0;
        while(i + 1 < s.length()) {
            if((s[i] == 'X' && s[i + 1] == 'L') ||
              (s[i] == 'R' && s[i + 1] == 'X')) {
                swap(s[i], s[i + 1]);
                ans.push_back(s);
                swap(s[i], s[i + 1]);
            }
            i++;
        }
        return ans;
    }
};

class Solution {
public:
    bool canTransform(string start, string end) {
        int s = 0, e = 0, n = start.length();
        while(true) {
            while(s < n && start[s] == 'X') {
                s++;
            }
            
            while(e < n && end[e] == 'X') {
                e++;
            }
            
            if(s == n && e == n) return true;
            if(s < n && e < n && start[s] == end[e]) {
                if(start[s] == 'R') {
                    if(s > e) return false;
                } else {
                    if(s < e) return false;
                }
                s++;
                e++;
            } else {
                return false;
            }
        }
    }
};
