//TLE
class Solution {
public:
    int result = 0;
	int cherryPickup(vector<vector<int>>& grid) {
		int n = grid.size();
        if(1 == n) return grid[0][0];
		dfs(0, 0, 0, grid, n, 1);
		return result;
    }
	
	void dfs(int x, int y, int ans, vector<vector<int>>& grid, int n, int process) {
		if(!isValid(x, y, n)) return;//越界
		if(grid[x][y] == -1) return;//不通
		
		if(0 == x && 0 == y && 2 == process) {
			result = max(result, ans);
			return;
		}
		
		if(x == n - 1 && y == n - 1) {
			process = 2;
		}
		
		bool hasCherry = false;
		if(1 == grid[x][y]) {
			ans++;
			grid[x][y] = 0;
			hasCherry = true;
		}
		
		if(1 == process) {
			//right
			dfs(x, y + 1, ans, grid, n, 1);
			
			//bottom
			dfs(x + 1, y, ans, grid, n, 1);
		} else if(2 == process) {
			//left
			dfs(x, y - 1, ans, grid, n, 2);
			
			//up
			dfs(x - 1, y, ans, grid, n, 2);
		}
		
		if(hasCherry) {
			hasCherry = false;
			ans--;
			grid[x][y] = 1;
		}
	}
	
	bool isValid(int x, int y, int n) {
		if(x < 0 || y < 0 || x >= n || y >= n) return false;
		return true;
	}
};


