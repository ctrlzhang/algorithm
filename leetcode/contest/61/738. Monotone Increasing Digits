class Solution {
public:
    //不够就上一层-1
    int monotoneIncreasingDigits(int N) {
        if(N < 10) return N;
        vector<int> dp;
        while(N) {
            dp.push_back(N % 10);
            N /= 10;
        }
        int n = dp.size();
        int i = n - 1;
        bool notOrder = false;
        for(; i >= 1; i--) {
            if(dp[i] > dp[i - 1]) {
                notOrder = true;
                break;
            }
        }
        
        if(notOrder) {
            for(int k = 0; k <= i - 1; k++) {
                dp[k] = 9;
            }
            dp[i] -= 1;

            while(i + 1 < n && dp[i] < dp[i + 1]) {
                dp[i] = 9;
                dp[i + 1] -= 1;
                i++;
            }
        }
        
        int ans = 0;
        for(int i = n - 1; i >= 0; i--) {
            ans = ans * 10 + dp[i];
        }
        return ans;
    }
};

class Solution {
public:
    int monotoneIncreasingDigits(int n) {
        int ans = 0;
        vector<int> data;
        int t = n;
        while(t) {
            data.push_back(t % 10);
            t /= 10;
        }
    
        reverse(data.begin(), data.end());
        int m = data.size();
        int prev = 0, cur = 0;
        for(int i = 0; i < m; i++) {
            for(int k = 9; k >= prev; k--) {//使用上届去探测
                cur = ans;
                for(int j = i; j < m; j++) {
                    cur = cur * 10 + k;
                    //cout<<cur<<endl;
                }
                if(cur <= n) {
                    ans = ans * 10 + k;
                    prev = k;
                    break;
                }
            }
        }
        return ans;
    }
};
