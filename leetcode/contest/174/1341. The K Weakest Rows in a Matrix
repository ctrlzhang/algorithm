class Solution {
    private static class Pair implements Comparable<Pair> {
        private int val;
        private int idx;
        public Pair(int val, int idx) {
            this.val = val;
            this.idx = idx;
        }
        
        public int compareTo(Pair other) {
            if (this.val != other.val) {
                return this.val - other.val;
            }
            
            return this.idx - other.idx;
        }
    }
    
    public int[] kWeakestRows(int[][] mat, int k) {
        List<Pair> ps = new ArrayList<>();
        for (int i = 0; i < mat.length; i++) {
            int tmp = 0;
            for (int j = 0; j < mat[0].length; j++) {
                if (mat[i][j] == 1) {
                    ++tmp;
                } else {
                    break;
                }
            }
            Pair pair = new Pair(tmp, i);
            ps.add(pair);
        }
        
        Collections.sort(ps);
        int[] ans = new int[k];
        for (int i = 0; i < k; i++) {
            ans[i] = ps.get(i).idx;
        }
        return ans;
    }
}
