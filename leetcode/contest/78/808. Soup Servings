class Solution {
public:
    double soupServings(int N) {
        if (N > 5000) return 1.0;
        int k = (N + 24) / 25;
        vector<vector<double>> dp(k + 1, vector<double>(k + 1, 0));
        dp[0][0] = 0.5;
        for (int i = 1; i <= k; i++) {
            dp[0][i] = 1;
            dp[i][0] = 0;
        }
        
        for (int i = 1; i <= k; i++) {
            for (int j = 1; j <= k; j++) {
                dp[i][j] += 0.25 * dp[max(i - 4, 0)][max(j - 0, 0)];
                dp[i][j] += 0.25 * dp[max(i - 3, 0)][max(j - 1, 0)];
                dp[i][j] += 0.25 * dp[max(i - 2, 0)][max(j - 2, 0)];
                dp[i][j] += 0.25 * dp[max(i - 1, 0)][max(j - 3, 0)];
            }
        }
        
        return dp[k][k];
    }
};

class Solution {
public:
    map<pair<int, int>, double> mp;
    double soupServings(int N) {
        if (N > 5000) return 1;
        return dfs(N, N);
    }
    
    double dfs(int x, int y) {
        if (mp.find(pair<int, int>(x, y)) != mp.end()) return mp[pair<int, int>(x, y)];
        if (x <= 0 && y <= 0) return 0.5;
        if (x > 0 && y <= 0) return 0;
        if (x <= 0 && y > 0) return 1;
        double ret = 0.25 * (dfs(x - 100, y) 
               + dfs(x - 75, y - 25)
               + dfs(x - 50, y - 50)
               + dfs(x - 25, y - 75));
        mp[pair<int, int>(x, y)] = ret;
        return ret;
    }
};
