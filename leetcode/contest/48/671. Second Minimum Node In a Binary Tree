/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int findSecondMinimumValue(TreeNode* root) {
        int ans = -1;
        if(NULL == root) return -1;
        int l = INT_MAX;
        int r = INT_MAX;
        if(root->left != NULL) {
            if(root->left->val == root->val) {
                l = findSecondMinimumValue(root->left);
            } else {
                l = root->left->val;
            }
            
            if(root->right->val == root->val) {
                r = findSecondMinimumValue(root->right);
            } else {
                r = root->right->val;
            }
            
            ans = getMin(l, r);
        }
        
        return ans;
    } 
    
    int getMin(int a, int b) {
        if(a == -1) return b;
        if(b == -1) return a;
        return min(a, b);
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    set<int> s;
    int findSecondMinimumValue(TreeNode* root) {
        helper(root);
        if(s.size() < 2) return -1;
        auto it = s.begin();
        ++it;
        return *it;
    }
    
    void helper(TreeNode* root) {
        if(NULL == root) return;
        s.insert(root->val);
        helper(root->left);
        helper(root->right);
    }
};
