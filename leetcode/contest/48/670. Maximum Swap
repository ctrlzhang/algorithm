bool cmpi(int a, int b) {
    return a > b;
}

class Solution {
public:
    int maximumSwap(int num) {
        map<int, vector<int>> mp;
        vector<int> dv;
        int pos = 0;
        int tmp = num;
        while(num) {
            int d = num % 10;
            num /= 10;
            mp[d].push_back(pos);
            dv.push_back(d);
            pos++;
        }
        
        //pos 多少位
        int start = pos - 1;
        for(int i = 9; i > 0; i--) {
            if(mp.find(i) != mp.end()) {
                int len = mp[i].size();
                sort(mp[i].begin(), mp[i].end(), cmpi);
                for(int j = 0; j < len; j++) {
                    if(start - j != mp[i][j]) {
                        //swap
                        
                        exc(dv, start - j, mp[i][len - 1]);
                        return output(dv);
                    }
                }
                
                start -= len;
            }
        }
        
        return tmp;
    }
    
    int output(vector<int>& v) {
        reverse(v.begin(), v.end());
        int ans = 0;
        for(int i = 0; i < v.size(); i ++) {
            ans = ans * 10 + v[i];
        }
        
        return ans;
    }
    
    void exc(vector<int>& v, int l, int r) {
        int tmp = v[l];
        v[l] = v[r];
        v[r] = tmp;
    }
};
