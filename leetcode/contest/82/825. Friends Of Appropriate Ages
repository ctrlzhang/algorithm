class Solution {
public:
    int numFriendRequests(vector<int>& ages) {
        unordered_map<int, int> mp;
        for (int d : ages) {
            mp[d]++;
        }
        
        int ans = 0;
        vector<int> dp;
        for (auto& it : mp) {
            dp.push_back(it.first);
            if (it.first > it.first * 0.5 + 7) {
                ans += (it.second) * (it.second - 1);
            }
        }
        
        int n = dp.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (canFriend(dp[i], dp[j])) {
                    ans += mp[dp[i]] * mp[dp[j]];
                }
                
                if (canFriend(dp[j], dp[i])) {
                    ans += mp[dp[i]] * mp[dp[j]];
                }
            }
        }
        
        return ans;
    }
    
    bool canFriend(int a, int b) {
        return !(
            (b > a) || (b <= 0.5 * a + 7) || (b > 100 && a < 100)
        );
    }
};
