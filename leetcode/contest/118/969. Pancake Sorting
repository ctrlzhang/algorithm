class Solution {
public:
    vector<int> ans;
    vector<int> pancakeSort(vector<int>& A) {
        int n = A.size();
        if (0 == n) return ans;
        dfs(A, n - 1);
        return ans;
    }
    
    void dfs(vector<int>& A, int tailPos) {
        if (0 == tailPos) return;
        int maxPos = findMax(A, tailPos);
        if (maxPos != tailPos) {
            if (maxPos != 0) {
                reverse(A, 0, maxPos);
                ans.push_back(maxPos + 1);
            }
            
            reverse(A, 0, tailPos);
            ans.push_back(tailPos + 1);
        }
        
        
        dfs(A, tailPos - 1);
    }
    
    int findMax(vector<int>& A, int tailPos) {
        int n = A.size();
        int maxPos = 0;
        for (int i = 0; i <= tailPos; i++) {
            if (A[i] > A[maxPos]) {
                maxPos = i;
            }
        }
        
        return maxPos;
    }
    
    void reverse(vector<int>& A, int start, int end) {
        int i = start, j = end;
        while (i < j) {
            int tmp = A[i];
            A[i] = A[j];
            A[j] = tmp;
            ++i;
            --j;
        }
    }
};
