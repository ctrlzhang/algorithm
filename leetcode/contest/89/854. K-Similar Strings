//TLE
class Solution {
public:
    //dfs subproblem structure
    int kSimilarity(string A, string B) {
        //edge case
        if (A.length() != B.length()) return 0;
        if (A.length() == 0) return 0;
        
        return dfs(A, B, A.length());
    }
    
    int dfs(string A, string B, int len) {
        if (A == B) return 0;
        if (0 == len) return INT_MAX;
        
        int ans = INT_MAX;
        if (A[0] == B[0]) return dfs(A.substr(1), B.substr(1), len - 1);
        for (int j = 1; j < len; j++) {
            if (A[j] == B[0]) {
                swap(A[0], A[j]);
                int ret = dfs(A.substr(1), B.substr(1), len - 1);
                if (ret != INT_MAX) {
                    ans = min(ans, ret + 1);
                }
                swap(A[0], A[j]);
            }
        }
        return ans;
    }
};

//DFS
class Solution {
public:
    //dfs subproblem structure
    map<pair<string, string>, int> dp;
    int kSimilarity(string A, string B) {
        //edge case
        if (A.length() != B.length()) return 0;
        if (A.length() == 0) return 0;
        return dfs(A, B, A.length());
    }
    
    int dfs(string A, string B, int len) {
        if (A == B) return 0;
        if (0 == len) return INT_MAX;
        pair<string, string> tmp(A, B);
        if (dp.find(tmp) != dp.end()) return dp[tmp];
        
        int ans = INT_MAX;
        if (A[0] == B[0]) return dfs(A.substr(1), B.substr(1), len - 1);
        for (int j = 1; j < len; j++) {
            if (A[j] == B[0]) {
                swap(A[0], A[j]);
                int ret = dfs(A.substr(1), B.substr(1), len - 1);
                if (ret != INT_MAX) {
                    ans = min(ans, ret + 1);
                }
                swap(A[0], A[j]);
            }
        }
        
        dp[tmp] = ans;
        return ans;
    }
};
