class Solution {
    //dp[i] means a sloution ends with the ith number
    //dp[i] = nums[i] + max(0, dp[i - 1], dp[i - 2], dp[i - 3], ..., dp[i - k + 1], dp[i - k])
    //O(NK) - TLE
    public int constrainedSubsetSum(int[] nums, int k) {
        int n = nums.length;
        int ans = Integer.MIN_VALUE;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = nums[i];
            int sum = 0;
            for (int j = i - 1; j >= i - k && j >= 0; j--) {
                sum = Math.max(sum, dp[j]);
                //if (dp[j] > sum) {
                //  parent[i] = j;
                //}
            }
            dp[i] += sum;
            ans = Math.max(ans, dp[i]);
        }
        
        return ans;
    }
}

class Solution {
    //we just use a queue to maintain the top K answers
    //the time complexity can be O(N) and space can be O(k)
    //it is different from the monoStack
    //because monoStack means you can only find the first number bigger or smaller than the target
    //but you can't find the biggest or smallest number at the same time
    //event they are in the stack, but you can't retrieve them
    //while if you use monoQueue, since it is double end queue, so you can get the biggest or smallest at the same time
    //so that's why I prefer to use monoQueu to solve this problem
    public int constrainedSubsetSum(int[] nums, int k) {
        Deque<Integer> monoq = new LinkedList<>();
        //because the answer can be negative
        int ans = Integer.MIN_VALUE;
        int[] dp = new int[nums.length];
        for (int i = 0; i < dp.length; i++) {
            dp[i] = nums[i] + (monoq.isEmpty() ? 0 : monoq.peek());
            ans = Math.max(ans, dp[i]);
            while (!monoq.isEmpty() && monoq.peekLast() < dp[i]) {
                monoq.pollLast();
            }
            
            if (dp[i] > 0) {
                monoq.offer(dp[i]);
            }
            
            if (!monoq.isEmpty() && i >= k && monoq.peek() == dp[i - k]) {
                monoq.poll();
            }
        }
        return ans;
    }
}
