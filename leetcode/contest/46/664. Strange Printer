class Solution {
//dp[i][j] - 从i到j需要多少turn
//ans=dp[0][len-1]
//dp[i][j] = min(1 + dp[i+1][j], dp[i][k-1] + dp[k+1][j])
public:
    int strangePrinter(string s) {
        vector<vector<int>> dp(s.length(), vector<int>(s.length(), -1));
        return helper(s, 0, s.length() - 1, dp);
    }
    
    int helper(string s, int l, int r, vector<vector<int>>& dp) {
        if(l > r) return 0;
        if(dp[l][r] != -1) return dp[l][r];
        int n = s.length();
        int ans = 1 + helper(s, l + 1, r, dp);
        for(int j = l + 1; j <= r; j++) {
            if(s[j] == s[l]) {
                ans = min(ans, helper(s, l, j-1, dp) + helper(s, j+1, r, dp));
            }
        }

        dp[l][r] = ans;
        return ans;
    }
};
