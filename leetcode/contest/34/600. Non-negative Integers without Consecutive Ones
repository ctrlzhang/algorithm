class Solution {
/**
 * 思路: 使用DP
 * a[n]表示长度为n的二进制字符串, 以0开头的个数
 * b[n]表示长度为n的二进制字符串, 以1开头的个数
 * 
 * a[n+1] 可以在a[n]前添0, 可以在a[n]前添1, a[n+1] = a[n] + b[n];
 * b[n+1] 只有a[n]可以前面加1, b[n]不能加1.
 */ 
public:
    int findIntegers(int num) {
        vector<int> v;
        
        int n = 0;//计算长度
        while(num) {
            n++;
            v.push_back(num % 2);
            num /= 2;
        }
        
        if(0 == n) return 0;
        
        int a[n] = {0};
        int b[n] = {0};
        
        a[0] = 1;
        b[0] = 1;
        
        for(int i=1; i<n; i++) {
            a[i] = a[i-1] + b[i-1];
            b[i] = a[i-1];
        }
        
        int result = a[n-1] + b[n-1];
        //return result;
        //return v[1] == 0 && v[0] == 0;
        
        for(int i=n-1; i>=1; i--) {
            if(v[i] == 1 && v[i-1] == 0) continue;  //不需要减, 因为比它大的, 符合非连续1的个数为0
            if(v[i] == 1 && v[i-1] == 1) break;
            if(v[i] == 0 && v[i-1] == 1) continue;  //不需要减，因为比它大的，符合非连续1的个数为0
            if(v[i] == 0 && v[i-1] == 0) result -= b[i-1];
        }
        
        return result;
    }
};
