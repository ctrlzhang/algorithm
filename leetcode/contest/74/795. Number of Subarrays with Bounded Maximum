class Solution {
public:
    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {
        //找到左侧第一个大于当前值的下标
        //找到右侧第一个大于当前值的下标
        int n = A.size();
        vector<int> left(n, 0);
        vector<int> right(n, n - 1);
        
        for(int i = 0; i < n; i++) {
            if(A[i] >= L && A[i] <= R) {
                int j = i;
                while(j >= 0 && A[j] <= A[i]) {
                    j--;
                }
                left[i] = j + 1;
                //cout<<A[i]<<" "<<i<<" "<<left[i]<<endl;
            }
        }
        
        for(int i = n - 1; i >= 0; i--) {
            if(A[i] >= L && A[i] <= R) {
                int j = i + 1;
                while(j < n && A[j] < A[i]) {
                    j++;
                }
                right[i] = j - 1;
                //cout<<A[i]<<" "<<i<<" "<<right[i]<<endl;
            }
        }
        
        int ans = 0;
        for(int i = 0; i < n; i++) {
            if(A[i] >= L && A[i] <= R) {
                ans += (i - left[i] + 1) * (right[i] - i + 1);
            }
        }
        
        return ans;
    }
};
