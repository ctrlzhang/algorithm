class Solution {
public:
    //bfs
    vector<int> a[101];
    int visit[101];
    bool isInQ[101] = {0};
    map<pair<int, int>, int> wmap;
    int networkDelayTime(vector<vector<int>>& times, int N, int K) {
        for(int i = 1; i <= N; i++) visit[i] = 20000;
        cout<<endl;
        
        for(auto& it : times) {
            a[it[0]].push_back(it[1]);
            wmap[pair<int, int>(it[0], it[1])] = it[2];
            cout<<it[0]<<" "<<it[2]<<endl;;
        }
        
        queue<int> q;
        q.push(K);
        visit[K] = 0;
        while(!q.empty()) {
            int u = q.front();
            q.pop();
            isInQ[u] = false;
            for(auto it : a[u]) {
                //update
                //cout<<"child "<<u<<endl;
                if(visit[u] + wmap[pair<int, int>(u, it)] < visit[it]) {
                    visit[it] = visit[u] + wmap[pair<int, int>(u, it)];
                    if(!isInQ[it]) {
                        isInQ[it] = true;
                        q.push(it);
                    }
                }
            }
        }
        
        int ans = 0;
        for(int i = 1; i <= N; i++) {
            //cout<<visit[i]<<endl;
            if(visit[i] == 20000) return -1;
            ans = max(ans, visit[i]);
        }
        
        return ans;
        
    }
};
