class Solution {
public:
    int orderOfLargestPlusSign(int N, vector<vector<int>>& mines) {
        //edge case
        int m = mines.size();
        if(m >= N * N) return 0;
        
        map<pair<int, int>, int> mp;
        for(vector<int> v : mines) {
            pair<int, int> p(v[0], v[1]);
            mp[p] = 1;
        }
            
        //common case
        vector<vector<int>> cands;
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                pair<int, int> p(i, j);
                if(mp.find(p) != mp.end()) continue;
                vector<int> d;
                d.push_back(i);
                d.push_back(j);
                cands.push_back(d);
            }
        }
        
        int order = 2;
        while(true) {
            cands = findNextCands(cands, N, mp, order);
            if(cands.empty()) {
                break;
            }
            
            order++;
        }
        
        return --order;
    }
    
    vector<vector<int>> findNextCands(vector<vector<int>>& cands, int N, map<pair<int, int>, int>& mp, int order) {
        int dx[4] = {0, 0, -order + 1, order - 1};
        int dy[4] = {-order + 1, order - 1, 0, 0};
        vector<vector<int>> ans;
        for(vector<int> v : cands) {
            bool find = true;
            int i = v[0], j = v[1];
            pair<int, int> p(i, j);
            for(int k = 0; k < 4; k++) {
                int nx = i + dx[k];
                int ny = j + dy[k];
                pair<int, int> np(nx, ny);
                if(!isInGrid(nx, ny, N) || mp.find(np) != mp.end()) {
                    find = false;
                    break;
                }
            }

            if(find) {
                vector<int> d;
                d.push_back(i);
                d.push_back(j);
                ans.push_back(d);
            }
        }
        
        return ans;
    }
    
    bool isInGrid(int x, int y, int N) {
        if(x >= 0 && y >= 0 && x < N && y < N) return true;
        return false;
    }
};


class Solution {
public:
    int orderOfLargestPlusSign(int N, vector<vector<int>>& mines) {
        vector<vector<int>> data(N, vector<int>(N, 1));
        for(vector<int> v: mines) {
            data[v[0]][v[1]] = 0;
        }
        
        vector<vector<int>> left(N, vector<int>(N, 0));
        vector<vector<int>> right(N, vector<int>(N, 0));
        vector<vector<int>> up(N, vector<int>(N, 0));
        vector<vector<int>> bottom(N, vector<int>(N, 0));
        
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                if(1 == data[i][j]) {
                    if(j == 0) {
                        left[i][j] = 1;
                    } else {
                        left[i][j] = 1 + left[i][j - 1];
                    }
                    
                    if(i == 0) {
                        up[i][j] = 1;
                    } else {
                        up[i][j] = 1 + up[i - 1][j];
                    }
                }
            }
        }
        
        int ans = 0;
        for(int i = N - 1; i >= 0; i--) {
            for(int j = N - 1; j >= 0; j--) {
                if(1 == data[i][j]) {
                    if(j == N - 1) {
                        right[i][j] = 1;
                    } else {
                        right[i][j] = 1 + right[i][j + 1];
                    }
                    
                    if(i == N - 1) {
                        bottom[i][j] = 1;
                    } else {
                        bottom[i][j] = 1 + bottom[i + 1][j];
                    }
                    
                    ans = max(ans, min(min(left[i][j], up[i][j]), min(bottom[i][j], right[i][j])));
                }
            }
        }
        
        return ans;
    }
};

class Solution {
    public int orderOfLargestPlusSign(int N, int[][] mines) {
        int[][] data = new int[N][N];
        int[][] left = new int[N][N];
        int[][] right = new int[N][N];
        int[][] up = new int[N][N];
        int[][] bottom = new int[N][N];
        
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                data[i][j] = 1;
                left[i][j] = right[i][j] = up[i][j] = bottom[i][j] = 0;
            }
        }
        
        for(int i = 0; i < mines.length; i++) {
            data[mines[i][0]][mines[i][1]] = 0;
        }
        
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                if(1 == data[i][j]) {
                    if(j == 0) {
                        left[i][j] = 1;
                    } else {
                        left[i][j] = 1 + left[i][j - 1];
                    }
                    
                    if(i == 0) {
                        up[i][j] = 1;
                    } else {
                        up[i][j] = 1 + up[i - 1][j];
                    }
                }
            }
        }
        
        int ans = 0;
        for(int i = N - 1; i >= 0; i--) {
            for(int j = N - 1; j >= 0; j--) {
                if(1 == data[i][j]) {
                    if(j == N - 1) {
                        right[i][j] = 1;
                    } else {
                        right[i][j] = 1 + right[i][j + 1];
                    }
                    
                    if(i == N - 1) {
                        bottom[i][j] = 1;
                    } else {
                        bottom[i][j] = 1 + bottom[i + 1][j];
                    }
                    
                    ans = Math.max(ans, Math.min(
                        Math.min(bottom[i][j], up[i][j]), Math.min(left[i][j], right[i][j])
                    ));
                }
            }
        }
        
        return ans;
    }
}
