struct Node {
    int a;
    int b;
};

class Solution {
public:
    string fractionAddition(string e) {
        vector<Node> v;
        vector<char> op;
        
        int len = e.length();
        if(len == 0) return "";
        
        int i = 0;
        bool minus = false;
        int num = 0;
        while(i<len) {
            if(i != 0 && (e[i] == '-' || e[i] == '+')) {
                op.push_back(e[i]);
                i++;
            }
            
            Node tmp;
            
            if(e[i] == '-') {
                minus = true;
                i++;
            } else {
                minus = false;
            }
            
            //分子
            num = 0;
            while(isdigit(e[i])) {
                num = num*10 + e[i] - '0';
                i++;
            }
            
            if(minus) num = -num;
            tmp.a = num;
            
            //符号
            if(e[i] == '/') i++;
            
            if(e[i] == '-') {
                minus = true;
                i++;
            } else {
                minus = false;
            }
            
            //分母
            num = 0;
            while(isdigit(e[i])) {
                num = num*10 + e[i] - '0';
                i++;
            }
            
            if(minus) num = -num;
            tmp.b = num;
            
            v.push_back(tmp);
        }
        
        string test;
        for(int i=0; i<v.size(); i++) {
            test.append(to_string(v[i].a));
            test.append(" ");
            test.append(to_string(v[i].b));
            test.append("||");
        }
        test.append("===");
        
        Node result;
        result.a = v[0].a;
        result.b = v[0].b;
        for(int k=0; k<op.size(); k++) {
            if(op[k] == '-') {
                result.a = result.a*v[k+1].b - v[k+1].a*result.b;
            } else {
                result.a = result.a*v[k+1].b + v[k+1].a*result.b;
            }
            
            result.b = result.b * v[k+1].b;
        }
    
        test.append(to_string(result.a));
        test.append("  ");
        test.append(to_string(result.b));
        //return test;
    
        int cand = 1;
        if(result.a % result.b == 0) {
            result.a = result.a / result.b;
            result.b = 1;
        } else if(result.b % result.a == 0) {
           result.b = result.b / result.a;
           result.a = 1;
        } else {
            for(int i=2; i<=abs(result.a)/2&&i<=abs(result.b)/2; i++) {
                if(result.a % i == 0 && result.b % i == 0) {
                    cand = i; 
                }
            }
            
            result.a = result.a / cand;
            result.b = result.b / cand;
        }
        
        string ret;
        if(result.a * result.b < 0) ret.append("-");
        ret.append(to_string(abs(result.a))).append("/").append(to_string(abs(result.b)));
        return ret;   
    }
};


class Solution {
public:
    string fractionAddition(string str) {
        long a = 0;
        long b = 1;
        string s = "";
        
        while(!str.empty()) {
            int pos = str.find_first_of("-+", 1);
            if(pos != string::npos) {
                s = str.substr(0, pos);
                str = str.substr(pos);
            } else {
                s = str;
                str = "";
            } 
            
            //按/分割字符串s
            int split = s.find_first_of('/');
            long c = stol(s.substr(0, split));
            long d = stol(s.substr(split+1));
            add(a, b, c, d);
        }
        
        //abs 防止符号变位
        int g = gcd(abs(a), abs(b));
        a = a / g;
        b = b / g;
        
        return to_string(a) + "/" + to_string(b);
    }
    
    void add(long& a, long& b, long c, long d) {
        int up = a * d + c * b;
        int bo = b * d;
        a = up;
        b = bo;
    }
    
    long gcd(long a, long b) {
        if(a % b == 0) return b;
        return gcd(b, a % b);
    }
};
