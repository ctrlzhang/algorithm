class Solution {
public:
    /**
    * 枚举所有可能
    * 不使用offer/使用offer
    * 使用offer有很多种组合方式, 递归计算
    */
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        int result = INT_MAX;
        bool isValid = true;
        for(int i=0; i<special.size(); i++) {
            isValid = true;
            for(int j=0; j<needs.size(); j++) {
                needs[j] -= special[i][j];
                if(isValid && needs[j] < 0) {
                    isValid = false;  
                }
            }
            
            if(isValid) {
                result = getMin(result, shoppingOffers(price, special, needs) + special[i][price.size()]);
            }
            
            for(int j=0; j<needs.size(); j++) {
                needs[j] += special[i][j];
            }
        }
        
        int noSpecial = 0;
        for(int i=0; i<needs.size(); i++) {
            noSpecial += price[i] * needs[i];
        }
        
        return getMin(result, noSpecial);
    }
    
    int getMin(int a, int b) {
        return a < b ? a : b;
    }
};

class Solution {
public:
    /**
    * DFS
    * 枚举所有可能
    * 不使用offer/使用offer
    * 使用offer有很多种组合方式, 递归计算
    * DFS + MEMORY
    */
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        unordered_map<int, int> mp;
        int k = getKey(needs);
        int n = needs.size();
        vector<int> pows(n, 1);
        for(int i=n-2; i>=0; i--) {
            pows[i] = pows[i+1] * 10;
        }
        return helper(price, special, mp, pows, k);
    }
    
    int helper(vector<int>& price, vector<vector<int>>& special, unordered_map<int, int>& mp, vector<int>& pows, int k) {
        //mem
        if(mp.count(k)) return mp[k];
        
        int ans = 0;
        int n = price.size();
        for(int i=0; i<n; i++) {
            ans += price[i] * ((k / pows[i]) % 10);
        }
        
        for(auto& sp : special) {
            int key = 0;
            int t = 0;
            int i = 0;
            for(i=0; i<n; i++) {
                t = (k/pows[i]) % 10;
                if(t < sp[i]) break;
                key = key * 10 + t - sp[i];
            }
            
            if(i == n) {
                ans = min(ans, helper(price, special, mp, pows, key) + sp[n]);
            }
        }
        
        return ans;
    }
    
    int getKey(vector<int>& needs) {
        int n = needs.size();
        int k = 0;
        for(int i=0; i<n; i++) {
            k = k * 10 + needs[i];
        }
        
        return k;
    }
};
