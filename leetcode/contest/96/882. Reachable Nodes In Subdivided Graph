class Node {
    public:
        int start;
        int move;
        int weight;
    
    Node(int start, int move, int weight) {
        this->start = start;
        this->move = move;
        this->weight = weight;
    }
};

class MyCmp {
    public:
        bool operator() (const Node& l, const Node& r) {
            return l.move > r.move;
        }
};

class Solution {
public:
    //要对问题预处理，比如图的问题，要先建图
    //要对问题进行再编码，让你求经过m步 how many nodes can be reachable.it is the same as
    //from src to dst, how many paths's length little than m
    //so we can use djstra to get the shortest path from src to dst
    //当前位置的元素可以再编码，所以再编码的能力很重要
    int reachableNodes(vector<vector<int>>& edges, int M, int N) {
        //build graph
        unordered_map<int, unordered_map<int, int>> graph;
        
        //visited flag
        unordered_map<int, bool> visited;
        
        //build graph
        for (vector<int> v : edges) {
            graph[v[0]][v[1]] = v[2];
            graph[v[1]][v[0]] = v[2];
        }
        
        int result = 0;
        priority_queue<Node, vector<Node>, MyCmp> pq;
        Node head(0, 0, 0);
        pq.push(head);
        while (!pq.empty()) {
            Node cur = pq.top();
            pq.pop();
            int src = cur.start;
            int curMove = cur.move;
            if (curMove > M) break;
            
            //already visited
            if (visited[src]) continue;
            visited[src] = true;
            result++;
            
            for (auto& it : graph[src]) {
                int dst = it.first;
                int weight = it.second;
                int nextMove = curMove + weight + 1;
                if (!visited[dst]) {
                    if (nextMove > M) {
                        result += M - curMove;
                        graph[dst][src] -= (M - curMove);
                    } else {
                        result += weight;
                        graph[dst][src] = 0;
                        Node next(dst, nextMove, weight);
                        pq.push(next);
                    }
                } else {
                    result += min(M - curMove, graph[src][dst]);
                }
            }
        }
        return result;
    }
};


class Node {
    public:
        int src;
        int move;
        Node(int a, int b) {
            this->src = a;
            this->move = b;
        }
};

class MyCmp {
    public:
        bool operator() (const Node& l, const Node& r) {
            return l.move > r.move;
        }
};

class Solution {
public:
    int reachableNodes(vector<vector<int>>& edges, int M, int N) {    
        unordered_map<int, unordered_map<int, int>> graph;
        unordered_map<int, bool> visited;
        priority_queue<Node, vector<Node>, MyCmp> pq;
        
        //build graph
        for (vector<int> v : edges) {
            graph[v[0]][v[1]] = v[2];
            graph[v[1]][v[0]] = v[2];
        }
        
        int result = 0;
        Node head(0, 0);
        pq.push(head);
        
        while (!pq.empty()) {
            Node cur = pq.top();
            pq.pop();
            int src = cur.src;
            int move = cur.move;
            if (move > M) break;
            
            //may be duplicated
            if (visited[src]) continue;
            visited[src] = true;
            result++;
            
            //travel array
            for (auto& it : graph[src]) {
                int dst = it.first;
                int weight = it.second;
                int nextMove = move + weight + 1;
                if (visited[dst]) {
                    result += min(M - move, graph[src][dst]);
                } else {
                    if (nextMove > M) {
                        result += M - move;
                        graph[dst][src] -= M - move;
                    } else {
                        result += weight;
                        graph[dst][src] = 0;
                        Node next(dst, nextMove);
                        pq.push(next);
                    }
                }
            }
        }
        
        return result;
    }
};

class Node {
    public int src;
    public int move;
    public Node(int src, int move) {
        this.src = src;
        this.move = move;
    }
}

public class Solution {
    public int reachableNodes(int[][] edges, int M, int N) {
        Map<Integer, Map<Integer, Integer>> graph = new HashMap<>();
        for (int i = 0; i < N; i++) {
            graph.put(i, new HashMap<>());
        }
        Map<Integer, Boolean> visited = new HashMap<>();
        Queue<Node> pq = new PriorityQueue<>((a, b) -> (a.move - b.move));
        
        //build graph
        for (int[] v : edges) {
            graph.get(v[0]).put(v[1], v[2]);
            graph.get(v[1]).put(v[0], v[2]);
        }
        
        int result = 0;
        Node head = new Node(0, 0);
        pq.offer(head);
        while (!pq.isEmpty()) {
            Node cur = pq.peek();
            pq.poll();
            int src = cur.src;
            int move = cur.move;
            if (null != visited.get(src)) continue;
            visited.put(src, true);
            ++result;
            
            for (int id : graph.get(src).keySet()) {
                int dst = id;
                int weight = graph.get(src).get(dst);
                int nextMove = move + weight + 1;
                if (null != visited.get(dst)) {
                    result += Math.min(M - move, graph.get(src).get(dst));
                } else {
                    if (nextMove > M) {
                        result += M - move;
                        graph.get(dst).put(src, graph.get(dst).get(src) - (M - move));
                    } else {
                        result += weight;
                        graph.get(dst).put(src, 0);
                        Node next = new Node(dst, nextMove);
                        pq.offer(next);
                    }
                }
            }
        }
        
        return result;
    }
}


class Solution(object):
    def reachableNodes(self, edges, M, N):
        """
        :type edges: List[List[int]]
        :type M: int
        :type N: int
        :rtype: int
        """
        # hashmap
        graph = {}
        visited = {}
        pq = []
        result = 0
        for i in range(N):
            graph[i] = {}
        
        for i, j, l in edges:
            graph[i][j] = graph[j][i] = l
        
        # print graph
        
        heapq.heappush(pq, (0, 0))
        while pq:
            move, src = heapq.heappop(pq)
            # print move, "==", src
            if move > M:
                break
            
            if src in visited:
                continue
                
            visited[src] = 1
            result = result + 1
            
            for dst in graph[src]:
                weight = graph[src][dst]
                next_move = move + weight + 1
                if dst in visited:
                    result += min(M - move, graph[src][dst])
                else:
                    if next_move > M:
                        result += M - move
                        graph[dst][src] -= M - move
                    else:
                        result += weight
                        graph[dst][src] = 0
                        heapq.heappush(pq, (next_move, dst))
                        
        return result
        
        
