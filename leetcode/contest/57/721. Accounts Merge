//dfs
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
		vector<int> flag(accounts.size(), 0);
		map<string, vector<int>> mp;
		for(int i = 0; i < accounts.size(); i++) {
			for(int j = 1; j < accounts[i].size(); j++) {
				mp[accounts[i][j]].push_back(i);
			}
		}
		
		vector<vector<string>> ans;
		for(int i = 0; i < accounts.size(); i++) {
			set<string> strSet;
			dfs(i, strSet, flag, accounts, mp);
			if(!strSet.empty()) {
				vector<string> tmp(strSet.begin(), strSet.end());
				tmp.insert(tmp.begin(), accounts[i][0]);
				ans.push_back(tmp);
			}
		}
		
		return ans;
	}
	
	void dfs(int idx, set<string>& strSet, vector<int>& flag, vector<vector<string>>& accounts, map<string, vector<int>>& mp) {
		if(flag[idx] == 1) return;
		flag[idx] = 1;
		for(int i = 1; i < accounts[idx].size(); i++) {
			strSet.insert(accounts[idx][i]);
			vector<int> ids = mp[accounts[idx][i]];
			if(ids.size() > 1) {
				for(int d : ids) {
					dfs(d, strSet, flag, accounts, mp);
				}
			}
		}
	}
};

//并查集思想, 覆盖
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
		map<int, string> keyMap;
		for(int i = 0; i < accounts.size(); i++) {
			string key = accounts[i][0];
			keyMap[i] = key;
		}
		
        vector<vector<string>> ans;
        
		map<string, int> parent;
		for(int i = 0; i < accounts.size(); i++) {
			int curParent = i;
			for(int j = 1; j < accounts[i].size(); j++) {
				string s = accounts[i][j];
                
				if(parent.find(s) != parent.end()) {
					if(parent[s] < curParent) {
						int newParent = parent[s];
						update(parent, curParent, newParent);
						curParent = newParent;
					} else if(parent[s] > curParent) {
						update(parent, parent[s], curParent);
					}
				} else {
					parent[s] = curParent;
				}
			}
		}
		
		map<int, set<string>> tmp;
		for(auto& it : parent) {
			tmp[it.second].insert(it.first);
		}
		
		for(auto& it : tmp) {
			vector<string> v(it.second.begin(), it.second.end());
			v.insert(v.begin(), keyMap[it.first]);
			ans.push_back(v);
		}
		
		return ans;
    }
	
	void update(map<string, int>& parent, int curParent, int newParent) {
		for(auto& it : parent) {
			if(it.second == curParent) {
				it.second = newParent;
			}
		}
	}
};

