//TLE
class Solution {
public:
    bool splitArraySameAverage(vector<int>& A) {
        //find kth sum
        double diff = 1e-6;
        int n = A.size();
        int total = 0;
        int curMax = 0;
        int curMin = INT_MAX;
        for(int d : A) {
            total += d;
            if(d > curMax) {
                curMax = d;
            }
            
            if(d < curMin) {
                curMin = d;;
            }
        }
        
        vector<vector<vector<bool>>> dp(31, vector<vector<bool>>(31, vector<bool>(300001, false)));
        for(int i = 1; i <= n; i++) {
            dp[0][i][0] = true;
            for(int j = n; j >= i; j--) {
                dp[j][1][A[i - 1]] = true;
            }
        }
        
        double avg = (double)total / n;
        for(int j = 2; j < n; j++) {
            for(int i = j; i <= n; i++) {
                for(int s = curMin * j; s <= 300000 && s <= total && s <= curMax * j; s++) {
                    dp[i][j][s] = dp[i - 1][j][s];
                    if(s >= A[i - 1]) {
                        dp[i][j][s] = dp[i][j][s] || dp[i - 1][j - 1][s - A[i - 1]];
                    }

                    if(isInt(j * avg) && s == (int)(j * avg)) {
                        int target = (int)(j * avg);
                        if(dp[i][j][target]) return true;
                    }
                }
            }
        }
        
        return false;
    }
    
    bool isInt(double d) {
        if(abs(d - (int)d) <= 1e-6) return true;
        return false;
    }
};


class Solution {
public:
    //使用了k sum，但是由于使用的是dp的方式，只是把dp的求个数转变为了bool值
    //结果tle了，发现是最内层sum的循环太耗时间了，尽管对循环范围做了优化，还是没有减小数量级
    //所以需要采用其他方式来做
    //total/n = Asum/k + Bsum/n-k
    //假设Asum是数组长度小的一方,则1<=k<=n/2
    //有因为Asum和Bsum为整数，所以有 total*k % n == 0 total*(n - k) % n == 0
    //得到符合条件的k之后，再进行计算
    bool splitArraySameAverage(vector<int>& A) {
        int n = A.size();
        int total = 0;
        for(int d : A) {
            total += d;
        }
        
        for(int k = 1; k <= n / 2; k++) {
            if((total * k) % n != 0 || (total * (n - k)) % n != 0) continue;
            bool ret = find(A, 0, k, (total * k) / n);
            if(ret) return true;
        }
        
        return false;
    }
    
    bool find(vector<int>& A, int idx, int level, int target) {
        if(0 == level) return 0 == target;
        for(int i = idx; i < A.size(); i++) {
            bool ret = find(A, i + 1, level - 1, target - A[i]);
            if(ret) return true;
        }
        return false;
    }
};
