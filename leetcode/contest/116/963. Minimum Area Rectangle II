class Node {
    public:
        double x;
        double y;
        Node(double a, double b) : x(a), y(b) {
            
        }
};

class Solution {
public:
    //矩形的特点
    //两条对角线长度相同, 中心点相同
    //所以根据对角线长度和中心点位置，可以将边进行归类,
    //归类的时间复杂度为O(n^2)
    //归完类之后, 一共有n^2/2条边, 其中每一类最多有(n/2)条边，因为我们只有n个点
    //所以单个归类的时间复杂度是o(n^2)
    double minAreaFreeRect(vector<vector<int>>& points) {
        //build map
        unordered_map<string, vector<vector<Node>>> data;
        int n = points.size();
        for (int i = 0; i < n; i++) {
            Node left(points[i][0], points[i][1]);
            for (int j = i + 1; j < n; j++) {
                Node right(points[j][0], points[j][1]);
                double len = getLen(left, right); 
                Node center = getCenter(left, right);
                string key = double2str(len) + " " + double2str(center.x) + " " + double2str(center.y);
                vector<Node> tmp = {left, right};
                data[key].push_back(tmp);
            }
        }
        
        //{key: [[node1, node2], [node1, node2], [node1, node2]]}
        //get min area
        double ans = 1e9;
        for (auto& it : data) {
            string key = it.first;
            vector<vector<Node>> nodeList = it.second;
            int sz = nodeList.size();
            for (int i = 0; i < sz; i++) {
                Node x = nodeList[i][0];
                Node y = nodeList[i][1];
                for (int j = i + 1; j < sz; j++) {
                    Node z = nodeList[j][0];
                    double area = getArea(x, y, z);
                    ans = min(ans, area);
                }
            }
        }
        
        if (1e9 == ans) ans = 0;
        return ans;
    }
    
    double getLen(const Node& a, const Node& b) {
        return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
    }
    
    Node getCenter(const Node& a, const Node& b) {
        return Node((a.x + b.x) / 2, (a.y + b.y) / 2);
    }
    
    string double2str(double input) {
        stringstream ss;
        ss << input;
        string ans;
        ss >> ans;
        return ans;
    }
    
    double getArea(const Node& x, const Node& y, const Node& z) {
        //width
        double width = getLen(x, z);
        
        //height
        double height = getLen(y, z);
        
        return abs(width * height);
    }
};

class Node {
    public:
        int x;
        int y;
        Node(int a, int b) : x(a), y(b) {
            
        }
    
        bool operator < (const Node& other) const {
            return x < other.x || ( x == other.x && y < other.y);
        }
};

class Solution {
public:
    //about my thinking process
    double minAreaFreeRect(vector<vector<int>>& points) {
        map<Node, bool> data;
        for (auto& v : points) {
            Node node(v[0], v[1]);
            data[node] = true;
        }
        
        //p1 p2 p3 p4
        double ans = 1e9;
        int n = points.size();
        for (int i = 0; i < n; i++) {
            int px1 = points[i][0];
            int py1 = points[i][1];
            Node nx1(px1, py1);
            data[nx1] = false;
            output(px1, py1, 1);
            for (int j = 0; j < n; j++) {
                if (j == i) continue;
                int px2 = points[j][0];
                int py2 = points[j][1];
                Node nx2(px2, py2);
                data[nx2] = false;
                output(px2, py2, 2);
                for (int k = 0; k < n; k++) {
                    if (k == i || k == j) continue;
                    int px3 = points[k][0];
                    int py3 = points[k][1];
                    Node nx3(px3, py3);
                    data[nx3] = false;
                    int px4 = px2 + px3 - px1;
                    int py4 = py2 + py3 - py1;
                    output(px3, py3, 3);
                    Node target(px4, py4);
                    if (data.find(target) != data.end() && data[target] == true && check(nx1, nx2, nx3, target)) {
                        //cout<<"x4====y4 begin"<<endl;
                        //cout<<data[target]<<endl;
                        output(px4, py4, 4);
                        //cout<<"x4====y4 end"<<endl;
                        double area = sqrt(pow(px1 - px2, 2) + pow(py1 - py2, 2)) * 
                            sqrt(pow(px1 - px3, 2) + pow(py1 - py3, 2));
                        ans = min(ans, area);
                    }
                    
                    data[nx3] = true;
                }
                data[nx2] = true;
            }
            data[nx1] = true;
        }
        
        if (1e9 == ans) ans = 0;
        
        return ans;
    }
    
    void output(int x, int y, int id) {
        //cout<<"px"<<id<<" x="<<x<<" y="<<y<<endl;
    }
    
    bool check(Node& n1, Node& n2, Node& n3, Node& n4) {
        return pow(n1.x - n4.x, 2) + pow(n1.y - n4.y, 2) == pow(n2.x - n3.x, 2) + pow(n2.y - n3.y, 2);
    }
};
