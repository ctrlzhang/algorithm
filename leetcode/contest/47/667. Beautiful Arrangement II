//暴力搜索（dfs） TLE 
class Solution {
public:
    vector<int> ans;
    vector<int> constructArray(int n, int k) {
        vector<int> v(n, 0);
        for(int i = 0; i < n; i++) v[i] = i + 1;
        helper(v, 0, n, k);
        return ans;
    }

    bool helper(vector<int>& v, int s, int n, int k) {
        if(s == n - 1) {
            if(check(v, k)) {
                ans = v;
                return true;
            }

            return false;
        }
        
        for(int i = s; i < n; i++) {
            exc(v, s, i);
            bool done = helper(v, s + 1, n, k);
            if(done) return true;
            exc(v, s, i);
        }
        
        return false;
    }

    void exc(vector<int>& v, int l, int r) {
        int tmp = v[l];
        v[l] = v[r];
        v[r] = tmp;
    }

    bool check(vector<int>& v, int k) {
        set<int> ds;
        int dis = 0;
        int prev = 0;
        for(int d : v) {
            dis = abs(d - prev);
            prev = d;
            ds.insert(dis);
        }

        if(k == ds.size()) return true;
        return false;
    }
};

//优化方案 - 考虑重复的方案
class Solution {
public:
    vector<int> constructArray(int n, int k) {
        vector<int> ans;
        for(int i = 1, j = n; i <= j;) {
            if(k > 1) {
                ans.push_back(k-- % 2 ? i++ : j--);
            } else {
                ans.push_back(k % 2 ? i++ : j--);
            }
        }
        
        return ans;
    }
};

class Solution {
public:
    //k 故需要 k + 1个数, 交错构成k - 1 个不同的差值
    //前 1 .. n - k - 1
    vector<int> constructArray(int n, int k) {
        vector<int> ans;
        for(int i = 1; i <= n - k; i++) {
            ans.push_back(i);
        }
        
        for(int i = 1; i <= k; i++) {
            if(i % 2 == 1) {
                ans.push_back(n - i / 2);
            } else {
                ans.push_back(n - k + i / 2);
            } 
        }
        
        return ans;
    }
};
