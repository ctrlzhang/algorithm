class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        int n = nums.size();
        if(n <= 2) return true;
        
        int cnt = 0;
        if(nums[0] > nums[1]) {
            cnt = 1;
            nums[0] = nums[1];
        }
        
        for(int i = 1; i < n - 1; i++) {
            if(nums[i] > nums[i + 1]) {
                cnt++;
                if(cnt >= 2) return false;
                if(nums[i + 1] <= nums[i - 1]) {
                    nums[i + 1] = nums[i];
                } else {
                    nums[i] = nums[i - 1];
                }
            }
        }
        
        return true;
    }
};

class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        int n = nums.size();
        if(n <= 2) return true;
        
        vector<bool> l(n, false);
        vector<bool> r(n, false);
        
        //以i结尾的串
        l[0] = true;
        for(int i = 1; i <= n - 1; i++) {
            l[i] = l[i - 1] && (nums[i - 1] <= nums[i]);   
        }
        
        //以i开头的串
        r[n - 1] = true;
        for(int i = n - 2; i >= 0; i--) {
            r[i] = r[i + 1] && (nums[i] <= nums[i + 1]);
        }
        
        //输出
        for(int i = 0; i <= n - 1; i++) {
            if(i == 0)  {
                if(r[1]) return true;
            } else if(i == n - 1) {
                if(l[n-2]) return true;
            } else {
                if(l[i - 1] && r [i + 1] && nums[i-1] <= nums[i+1]) return true;
            }
        }
        
        return false;
    }
};
