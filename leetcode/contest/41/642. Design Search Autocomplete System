struct Node {
    bool flag;
    char c;
    int hot;
    Node* son[27];
    
    Node() {
        hot = 0;
        flag = false;
        c = 0;
        memset(son, NULL, sizeof(son));
    }
    
    ~Node() {
    }
};

struct Elem {
    string s;
    int hot;
    
    Elem(string s, int hot) {
        this->s = s;
        this->hot = hot;
    }
    
    bool operator < (const Elem& node) {
        return hot > node.hot || (hot == node.hot && s < node.s);
    }
};

class AutocompleteSystem {
public:
    Node *root;
    string record;
    //vector<string> ret;
    
    AutocompleteSystem(vector<string> sentences, vector<int> times) {
        root = new Node();
        initTree(root, sentences, times);
        record = "";
    }
    
    vector<string> input(char c) {
        if(c == '#') {
            insert(root, record, 1);
            record = "";
            return vector<string>();
        } else {
            record += c;
            return search(root, record);
        }
    }
    
    void initTree(Node* root, vector<string> vs, vector<int> vt) {
        for(int k=0; k<vs.size(); k++) {
            insert(root, vs[k], vt[k]);
        }
    }
    
    void insert(Node* root, string s, int hot) {
        Node* tmp = root;
        int idx = 0;
        for(int i=0; i<s.length(); i++) {
            if(s[i] == ' ') {
                idx = 26;
            } else {
                idx = s[i] - 'a';
            }
            
            if(NULL == (tmp->son)[idx]) {
                (tmp->son)[idx] = new Node();                
            }

            tmp = (tmp->son)[idx];
            tmp->c = s[i];
        }
        
        tmp->flag = true;
        tmp->hot += hot;
        //ret.push_back(s);
    }
    
    vector<string> search(Node* root, string s) {
        vector<Elem> result;
        vector<string> ret;
        Node* tmp = root;
        int idx = 0;
        for(int i=0; i<s.length(); i++) {
            if(s[i] == ' ') {
                idx = 26;
            } else {
                idx = s[i] - 'a';
            }
          
            tmp = (tmp->son)[idx];
            if(tmp == NULL) {     
                return vector<string>();
            }
        }
        
        //ret.push_back("search");
        //ret.push_back(s);
        dfs(tmp, result, s);
        sort(result.begin(), result.end());
        int l = 0;
        for(Elem e : result) {
            l++;
            if(l<=3) {
                ret.push_back(e.s);
            } else {
                break;
            }
        }
        
        //ret.push_back("test");
        return ret;
    }
    
    void dfs(Node* tmp, vector<Elem>& result, string s) {
        if(tmp->flag == true) {
            //ret.push_back(s);
            Elem e(s, tmp->hot);
            result.push_back(e);
            //ret.push_back("==>");
            //ret.push_back(e.s);
        }
        
        for(int i=0; i<27; i++) {
            Node* next = (tmp->son)[i];
            if(next != NULL) {
                string str = s + next->c;
                dfs(next, result, str);
            }
        }
    } 
};

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * vector<string> param_1 = obj.input(c);
 */
