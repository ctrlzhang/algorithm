class Solution {
public:
    //2 3 4
    //54321
    //3^5 - 5 大于时 + 4321的问题
    //4321
    //4位 2^4 + 321
    //4^3
    //4^2
    //4^1
    
    //54321 --> 5位的 + 4321(4位)
    //5位的 小于5开头的所有数 3^5 + 5开头的 4321
    
    //54321 - 5
    //3^5 + 4321 - 4
    
    //4321 - 4
    //2^4 + 321 - 3
    
    //321 - 3
    //1*3*3 21 - 2
    
    //1 - 1
    //0
    int atMostNGivenDigitSet(vector<string>& D, int N) {
        int len = 0;
        int tmp = N;
        while (tmp) {
            tmp /= 10;
            ++len;
        }
        
        //cout<<len<<endl;
        vector<int> src;
        for (string s : D) {
            src.push_back(stoi(s));
        }
        
        int digitNum = src.size();
        int i = 1;
        int result = 0;
        while (i <= len - 1) {
            result += pow(digitNum, i);
            ++i;
        }
        
        cout<<result<<endl;
        return result + dfs(src, N, len);
    }
    
    //54321 - 5
    int dfs(vector<int>& src, int val, int len) {
        int ans = 0;
        if (len == 1) {
            for (int d : src) {
                if (val >= d) ++ans;
            }
            
            return ans;
        }
        
        //get less than len digit
        int base = pow(10, len - 1);
        int remain = val % base;
        int pos = find(src, 0, src.size() - 1, val / base);
        cout<<"pos="<<pos<<endl;
        if (pos == src.size()) {
            ans += pow(src.size(), len);
        } else if (pos == -1) {
            // nothing
        } else {
            if (val / base != src[pos]) {
                pos += 1;
                ans += pos * pow(src.size(), len - 1);
            } else {
                ans += pos * pow(src.size(), len - 1);
                //cout<<"ans1="<<ans<<endl;
                ans += dfs(src, remain, len - 1);
                //cout<<"ans2="<<ans<<endl;
            }
        }
        return ans;
    }
    
    //find position
    int find(vector<int>& data, int l, int r, int target) {
        while (l + 1 < r) {
            int mid = l + (r - l) / 2;
            if (data[mid] >= target) {
                r = mid;
            } else {
                l = mid;
            }
        }
        
        if (data[l] > target) return -1;
        if (data[r] < target) return data.size();
        if (data[r] == target) return r;
        return l;
    }
};
