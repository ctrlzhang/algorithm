/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* root, int k) {
        vector<ListNode*> ans;
        int n = getLen(root);
        if(0 == n) {
            for(int i = 0; i < k; i++) {
                ans.push_back(NULL);
            }
            return ans;
        }
        
        int avg = n / k;
        int mod = n % k;
        for(int i = 0; i < k; i++) {
            int step = 0;
            ListNode* curNode = root;
            ListNode* curTail = root;
            while(step < avg && root != NULL) {
                step++;
                curTail = root;
                root = root->next;
            }
            
            if(mod > 0) {
                curTail = root;
                root = root->next;
                mod--;
            }
            
            if(curTail != NULL) {
                curTail->next = NULL;
            }
            ans.push_back(curNode);
        }
        
        return ans;
    }
    
    int getLen(ListNode* root) {
        int ans = 0;
        while(root) {
            ans++;
            root = root->next;
        }
        return ans;
    }
};
