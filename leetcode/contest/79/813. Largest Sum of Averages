class Solution {
public:
    //dp[i][k] - means from i to n - 1, split this subarray into k groups
    //find the max score
    //dp[1][1], dp[1][2] ..., dp[1][k-1], dp[1][k]
    double largestSumOfAverages(vector<int>& A, int K) {
        int n = A.size();
        vector<double> sum(n + 1, 0);
        vector<vector<double>> dp(n + 1, vector<double>(n + 1, 0));
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + A[i - 1];
        }
        
        for (int i = 1; i <= n; i++) {
            dp[i][1] = (sum[n] - sum[i - 1]) / (n - i + 1);
            //cout<<dp[i][1]<<endl;
        }
        
        for (int k = 2; k <= K; k++) {
            for (int i = 1; i + k - 1 <= n; i++) {
                for (int p = i; p + k - 1 <= n; p++) {
                    double tmp = (sum[p] - sum[i - 1]) / (p - i + 1) + dp[p + 1][k - 1]; 
                    dp[i][k] = max(dp[i][k], tmp);
                    //cout<<"i="<<i<<" k="<<k<<" p="<<p<<" tmp="<<tmp<<endl;
                }
            }
        }
        
        double ans = 0;
        for (int i = 1; i <= K; i++) {
            ans = max(ans, dp[1][i]);
        }
        return ans;
    }
};
