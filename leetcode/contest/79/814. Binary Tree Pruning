/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*, bool> dp;
    TreeNode* pruneTree(TreeNode* root) {
        if (nullptr == root) return nullptr;
        dfs(root);
        travel(root);
        return root;
    }
    
    bool dfs(TreeNode* root) {
        if (nullptr == root) return true;
        if (root->val == 1) {
            dp[root] = false;
            dfs(root->left);
            dfs(root->right);
            return false;
        }
        
        bool la = dfs(root->left);
        bool lb = dfs(root->right);
        dp[root] = la && lb;
        return dp[root];
    }
    
    TreeNode* travel(TreeNode* root) {
        if (nullptr == root) return nullptr;
        if (dp[root]) return nullptr;
        if (root->left != nullptr) {
            root->left = travel(root->left);
        }
        if (root->right != nullptr) {
            root->right = travel(root->right);
        }
        return root;
    }
};


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //dfs通过带回返回值,帮助上层判断，所以利用dfs返回值，也是一个好的技巧
class Solution {
    public TreeNode pruneTree(TreeNode root) {
        int res = dfs(root);
        if (0 == res) return null;
        return root;
    }
    
    int dfs(TreeNode root) {
        if (null == root) return 0;
        int l = dfs(root.left);
        int r = dfs(root.right);
        int res = root.val | l | r;
        if (l == 0) root.left = null;
        if (r == 0) root.right = null;
        return res;
    }
}
