class Node {
    public:
        int id;
        int val;
    
        Node(int id, int val) : id(id), val(val) {
            
        }
    
        bool operator < (const Node& other) {
            return val < other.val;
        }
};

class Solution {
public:
    //slide window
    //left, right, map<int, int>
    //sort
    int smallestRangeII(vector<int>& A, int K) {
        if (A.empty()) return 0;
        
        vector<Node> data;
        int i = 0;
        for (int d : A) {
            Node one(i, d + K);
            Node two(i, d - K);
            data.push_back(one);
            data.push_back(two);
            ++i;
        }
        
        sort(data.begin(), data.end());
        
        /*
        for (Node d : data) {
            cout<<"("<< d.id<<" "<<d.val<<")";
        }
        cout<<endl;
        */
        
        int left = 0, right = 0;
        unordered_map<int, int> mp;
        int end = data.size();
        int ans = INT_MAX;
        while (right < end) {
            //right往前走
            while (right < end && mp.size() < A.size()) {
                Node cur = data[right];
                if (mp.find(cur.id) == mp.end()) {
                    mp[cur.id] = 0;
                }
                
                mp[cur.id]++;
                ++right;
            }
            
            //left往前走
            int prevRight = right - 1;
            while (left <= prevRight && mp.size() == A.size()) {
                int tmpRst = data[prevRight].val - data[left].val;
                //cout<<"tmpRst="<<tmpRst<<endl;
                ans = min(ans, tmpRst);
                Node cur = data[left];
                mp[cur.id]--;
                if (0 == mp[cur.id]) {
                    mp.erase(cur.id);
                }
                ++left;
            }
        }
        
        return ans;
    }
};


//one pass
class Node {
    public:
        int id;
        int val;
        Node(int id, int val) : id(id), val(val) {
            
        }
    
        bool operator < (const Node& other) const {
            return val < other.val;
        }
};

class Solution {
public:
    //slide window
    int smallestRangeII(vector<int>& A, int K) {
        //edge case
        int n = A.size();
        if (0 == n) return 0;
        
        //
        vector<Node> data;
        int left = 0, right = 0, ans = INT_MAX, idx = 0;
        for (int d : A) {
            Node one(idx, d + K);
            Node two(idx, d - K);
            data.push_back(one);
            data.push_back(two);
            ++idx;
        }
        
        sort(data.begin(), data.end());
        unordered_map<int, int> mp;
        
        while (right < data.size()) {
            //go right
            while (right < data.size() && mp.size() < n) {
                Node cur = data[right];
                if (mp.find(cur.id) == mp.end()) {
                    mp[cur.id] = 0;
                }
                
                mp[cur.id]++;
                ++right;
            }
            
            int prev = right - 1;
            
            //go left
            while (left <= prev && mp.size() == n) {
                int tmp = data[prev].val - data[left].val;
                ans = min(ans, tmp);
                int curId = data[left].id;
                mp[curId]--;
                if (0 == mp[curId]) {
                    mp.erase(curId);
                }
                ++left;
            }
        }
        
        return ans;
    }
};


class Solution {
public:
    //排序后，处理过程会更清晰
    //假设第i个位置为最后一个+k的位置, 即i + 1后都是-k的
    //则我们可以把i之前的位置，全部+k, 因为这不影响最后的结果，原因是 0 - i-1 全部+k后，不影响当前可取到的最大值，也不影响这部分，可取到的最大的最小值
    //我们的思路是
    //用左半部的最小值和右半部的最小值比较，取小的.
    //用右半部的最大值和左半部的最大值比较，取大的.
    //共n种可能，全部计算出，求差值最小的
    int smallestRangeII(vector<int>& A, int K) {
        int n = A.size();
        sort(A.begin(), A.end());
        int maxV = 0, minV = 0, ans = A[n - 1] - A[0];
        int left = A[0] + K;
        int right = A[n - 1] - K;
        
        //下标注意范围
        //注意变量声明顺序
        //a & b 必须要搞清楚你是要 0 或 1, 还是说需要结果
        for (int i = 0; i < n - 1; i++) {
            maxV = max(A[i] + K, right);
            minV = min(left, A[i + 1] - K);
            ans = min(ans, maxV - minV);
        }
        
        return ans;
    }
};
