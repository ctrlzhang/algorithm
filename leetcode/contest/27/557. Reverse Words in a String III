class Solution {
public:
    string reverseWords(string s) {
        int i = 0;
        int start = 0, end = 0;
        while(i < s.size()) {
            while(i < s.size() && s[i] == ' ') {
                i++;
            }
            
            start = i;
            if(i == s.size()) {
                return s;
            }
            
            while(i < s.size() && s[i] != ' ') {
                i++;
            }
            end = i;
            
            int k=start, j=end-1;
            while(k<j) {
                char tmp = s[k];
                s[k] = s[j];
                s[j] = tmp;
                k++;
                j--;
            }
        }
        
        return s;
    }
};

/*
* 思路: 利用翻转rbegin, rend
*/
class Solution {
public:
    string reverseWords(string s) {
        stringstream ss(s);
        string ret = "";
        while(ss >> s) {
            if(ret.size()) ret += " ";
            ret += string(s.rbegin(), s.rend());
        }
        
        return ret;
    }
};

/**
* 思路： 常规的string操作
*/
class Solution {
public:
    string reverseWords(string s) {
        string ret = "", s1="";
        s += " ";
        while(s.size()) {
            int pos = s.find_first_of(' ');
            s1 = s.substr(0, pos);
            reverse(s1.begin(), s1.end());
            if(ret.size()) ret += " ";
            ret += s1;
            s.erase(0, pos + 1);
        }
        
        return ret;
    }
};

class Solution {
public:
    string reverseWords(string s) {
        string ret = "", t = "";
        for(int i=0; i<s.size(); i++) {
            if(s[i] == ' ') {
                reverse(t.begin(), t.end());
                ret += t + " ";
                t = "";
            } else {
                t += s[i];
            }
        }
        
        reverse(t.begin(), t.end());
        ret += t;
        return ret;
    }
};
