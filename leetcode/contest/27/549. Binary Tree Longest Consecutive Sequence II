/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int max = 0;
    
    int longestConsecutive(TreeNode* root) {
        helper(root);
        return max;
    }
    
    pair<int, int> helper(TreeNode* root) {
        pair<int, int> ret(0, 0);
        if(root == NULL) return ret;
        
        //默认初始为1,1
        int inc = 1, dec = 1;
        
        //左子树
        if(root->left) {
            ret = helper(root->left);
            if(root->val == root->left->val + 1) {
                inc = ret.first + 1;
            } else if(root->val == root->left->val - 1) {
                dec = ret.second + 1;
            }
        }
        
        //右子树
        if(root->right) {
            ret = helper(root->right);
            if(root->val == root->right->val + 1) {
                //inc = max(inc, ret.first + 1);
                if(ret.first + 1 > inc) inc = ret.first + 1;
            } else if(root->val == root->right->val - 1) {
                //dec = max(dec, ret.second + 1);
                if(ret.second + 1 > dec) dec = ret.second + 1;
            }
        }
        
        //更新max值
        if(max < dec + inc - 1) max = dec + inc - 1;
        
        //返回当前节点对应的递增序列和递减序列
        return pair<int,int>(inc, dec);
    }
};
