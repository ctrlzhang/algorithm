class Solution {
public:
/**
 * 思路: 数无非两种情况, 结尾升序, 结尾降序
 * 如果是找下一个较大的, 则
 * 如果已知的数, 末尾两位为升序, 则替换即可
 * 如果已知的数, 末尾两位为降序, 则需要找到第一个不降序的点
 * 因为降序是最大数的特性, 找到第一个升序点, 进行升序排列
 * 
 */ 
    int nextGreaterElement(int n) {
        //1.整数转换为字符数组
        char dig[32] = {0};
        int k = 0;
        while(n) {
            dig[k++] = n % 10 + '0';
            n /= 10;
        }
        
        //2.找到第一个可升序点
        int i = 0;
        while(dig[i] <= dig[i+1]) {
            i++;
        }
        
        //所有位降序, 已经是最大值
        if(i == k-1) return -1;
        
        //3. 数i+1准备和后面的第一个大于它的数值交换
        k = 0;
        while(dig[k] <= dig[i+1]) k++;
        
        //4. 交换k 和 i+1
        int tmp = dig[i+1];
        dig[i+1] = dig[k];
        dig[k] = tmp;
        
        //5.交换0-i的数
        k=0;
        while(k < i) {
            tmp = dig[k];
            dig[k] = dig[i];
            dig[i] = tmp;
            k++;
            i--;
        }
        
        //6.还原为数值
        long result = 0;
        i = 31;
        while (i >= 0) {
            if(dig[i] > 0) {
                result = result * 10 + dig[i] - '0';
            }
            
            i--;
        }
        
        return result > INT_MAX ? -1 : result;
    }
};


class Solution {
public:
/**
 * 思路: 数无非两种情况, 结尾升序, 结尾降序
 * 如果是找下一个较大的, 则
 * 如果已知的数, 末尾两位为升序, 则替换即可
 * 如果已知的数, 末尾两位为降序, 则需要找到第一个不降序的点
 * 因为降序是最大数的特性, 找到第一个升序点, 进行升序排列
 * 
 */ 
    int nextGreaterElement(int n) {
        string s = to_string(n);
        if(!next_permutation(s.begin(), s.end())) return -1;
        long ans;
        sscanf(s.c_str(), "%ld", &ans);
        
        if(ans >= INT_MAX) return -1;
        return ans;
    }
};
