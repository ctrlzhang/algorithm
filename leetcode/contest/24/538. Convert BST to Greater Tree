/*
思路: 利用递归，计算出某个节点的和sum()
然后， 
当前层的左子节点, 更新后的值包括四部分  左子节点当前的值 + 当前层节点的值 + 上层传递给他的递增值 + 右子树节点和.
当前层右节点， 更新后的值 包括三部分  右子节点的当前值 + 上层传递给他的递增值 + 右子树节点和

所以，递归时，会保存 递增值, 并将其作为参数，传递给下一层节点， 用于计算最终值. 初始即为0
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        helper(root, 0);
        return root;
    }
    
    void helper(TreeNode* root, int icr) {
        if(root == NULL) return;
        root->val += icr;
        if(root->right != NULL) {
            root->val += sum(root->right);
            helper(root->right, icr);
        }
        
        if(root->left != NULL) {
            helper(root->left, root->val);
        }
    }
    
    int sum(TreeNode* root) {
        if(NULL == root) return 0;
        if(root->left == NULL && root->right == NULL) return root->val;
        
        return sum(root->left) + sum(root->right) + root->val; 
    }
};
