/*

思路: 距离分三种情况 1.左子树 2.右子树 3.根节点 + 左子树树高 + 右子树树高

求diameter时, 遇到叶子节点, 返回0
树边长 等于 树高度 - 1


*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(NULL == root) return 0;
        if(root->left == NULL && root->right == NULL) return 0;
        
        int maxLeft = diameterOfBinaryTree(root->left);
        int maxRight = diameterOfBinaryTree(root->right);
        
        int left = helper(root->left, 0);
        int right = helper(root->right, 0);
        int curMax = left + right;
        if(root->left !=NULL) curMax += 1;
        if(root->right != NULL) curMax += 1;
        
        int max = maxLeft > maxRight ? maxLeft : maxRight;
        max = max > curMax ? max : curMax;
        return max;
    }
    
    int helper(TreeNode* root, int level) {
        if(root == NULL) return level;
        if(root->left == NULL && root->right == NULL) {
            return level;
        }
        
        int left = helper(root->left, level + 1);
        int right = helper(root->right, level + 1);
        return left > right ? left : right;
    }
};

/**
 * 简洁的写法 
 *
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*
    * 思路: 左边的子树树高 + 右边的子树树高 与 当前最大的diameter比较
    *       同时返回左右子树的最大值, 给上层使用
    */
    int ans;
    int diameterOfBinaryTree(TreeNode* root) {
        ans = 0;
        dfs(root);
        return ans;
    }
    
    int dfs(TreeNode* root) {
        if(NULL == root) return -1;
        int lh = dfs(root->left) + 1;
        int rh = dfs(root->right) + 1;
        
        ans = max(ans, lh + rh);
        return max(lh, rh);
    }
};
