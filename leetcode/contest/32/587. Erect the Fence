/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
 
bool operator < (const Point& p, const Point& q) {
    return p.x < q.x || (p.x == q.x && p.y < q.y);
}
 
class Solution {
public:
/**
 * 凸包算法
 * 方法一: o(mH) 扫描法, 找每一个点对应的最小弧度边
 * 思路: 
 * 1.找到一个凸包点, 比如,从最靠左的点里取最靠下的, 肯定是凸包点 
 * 2.若凸包点是s, 则next点可以是 !s
 * 3.从当前凸包点到next 引申出一条线, 遇到位于先右侧的点, 则表示需要更新next. 这里使用叉积计算. x1y2 - x2y1 > 0   x1,y1是右侧点.
 * 4.因为需要处理共线, 我们知道共线上的点，中间的点相比共线点的最后一个点符合两个性质 a.距离更近 b.已经被访问过
 * 
 * a.距离更近好理解
 * b.已经被访问过, 这个是为了处理, 当处理到共线中间点的时候, 在其两侧都有共线点, 此时叉积是0, 而距离更近的点可能是已经访问过的点.
 * 
 * 所以, 共线的下一个点的选取条件是  flag[i] == 0 && distance(s, i, next) <=0, 即 未访问过的点里, 最近的那个.
 * 而如果不想处理共线点, 只需要取最远的点即可, 也不需要保存 是否已访问过, 因为最远的点就一个.  
 * 注意共线的处理 dist <= 0, 一定要有=0
 */ 
    vector<Point> outerTrees(vector<Point>& points) {
        vector<Point> result;
        if(points.size() <= 3) return points;
        
        //标记数组
        int flag[points.size()] = {0};
        
        int start = findStart(points);
        int s = start;
        int next = !s;
        result.push_back(points[s]);
        flag[s] = 1;
        int cnt = 0;
        
        while(true) {
            for(int i=0; i<points.size(); i++) {
                if(i == s) continue;
                int ret = cross(points[s], points[i], points[next]);
                if(ret > 0) {
                    next = i;
                } else if(ret == 0) {
                    int dis = distance(points[s], points[i], points[next]);
                    //处理共线问题, 选距离最近且未被访问过的点
                    if(0 == flag[i] && dis <= 0) next = i;
                    
                    //不处理共线
                    //if(dis > 0) next = i;
                }
            }
            
            if(next == start) break;
            s = next;
            next = !s;
            result.push_back(points[s]);
            flag[s] = 1; 
            cnt++;
        }
        
        return result;
    }
    
    //>0 表示在右边, 逆时针
    //<0 表示在左边
    int cross(Point o, Point p, Point q) {
        int x1 = p.x - o.x;
        int y1 = p.y - o.y;
        int x2 = q.x - o.x;
        int y2 = q.y - o.y;
        return x1*y2 - x2*y1;
    }
    
    //选择最左的点
    int findStart(vector<Point>& points) {
        int s=0, x1, y1, x2, y2;
        for(int i=1; i<points.size(); i++) {
            x1 = points[s].x;
            y1 = points[s].y;
            x2 = points[i].x;
            y2 = points[i].y;
            
            if(x1 > x2 || (x1 == x2 && y1 > y2)) s = i;
        }
        
        return s;
    }
    
    int distance(Point o, Point p, Point q) {
        return (p.x - o.x)*(p.x - o.x) + (p.y - o.y)*(p.y - o.y) - ((q.x-o.x)*(q.x - o.x) + (q.y-o.y)*(q.y - o.y));
    }
};


/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
/**
 * 思路: 注意处理好共线的问题
 * 1.next-- 每次next需要取未确认为凸包的点
 * 2.如果找不到next, 表示全部都为凸包点, 返回
 * 3.共线时, 取未确认为凸包，并且较近的点
 */
public:
    vector<Point> outerTrees(vector<Point>& points) {
        int n = points.size();
        if(n <=3) return points;
        
        int flag[n] = {0};
        int start = findStart(points);
        vector<Point> result;
        int s = start;
        result.push_back(points[s]);
        flag[s] = 1;
        
        //找到第一个可用的点
        int next = 0;
        for(int i=0; i<n; i++) {
            if(flag[i] == 0) {
                next = i;
                break;
            }
        }
        
        int cnt = 0;
        while(cnt < n) {
            bool find = false;
            for(int i=0; i<n; i++) {
                if(i == s) continue;//防止陷入死循环
                int ret = cross(points[s], points[i], points[next]);
                if(ret > 0 || (ret == 0 && flag[i] == 0 && near(points[s], points[i], points[next]))) {
                    next = i;
                }         
            }
            
            if(next == start) break;
            s = next;
            result.push_back(points[s]);
            flag[s] = 1;
            for(int i=0; i<n; i++) {
                if(flag[i] == 0) {
                    next = i;
                    find = true;
                    break;
                }
            }
            
            if(!find) break;
            cnt++;
        }
        
        return result;
    }
    
    //从op --> oq, >0表示在外侧
    int cross(Point o, Point p, Point q) {
        return (p.x - o.x)*(q.y - o.y) - (q.x - o.x)*(p.y - o.y);
    }
    
    //true 表示 距离p比q更近或相等
    bool near(Point o, Point p, Point q) {
        return (pow((p.x - o.x),2) + pow((p.y-o.y), 2)) <= (pow((q.x-o.x), 2) + pow((q.y-o.y), 2));
    }
    
    int findStart(vector<Point>& points) {
        int idx = 0;
        for(int i=1; i<points.size(); i++) {
            if(cmp(points[i], points[idx])) idx = i;
        }
        
        return idx;
    }
    
    bool cmp(Point a, Point b) {
        return a.x < b.x || (a.x == b.x && a.y < b.y);
    }
};

