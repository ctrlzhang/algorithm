class Solution {
public:
    typedef pair<int, int> pii;
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int r = image.size();
        if(r == 0) return image;
        
        int c = image[0].size();
        if(c == 0) return image;
        
        if(sr < 0 || sr >= r || sc < 0 || sc >= c) return image;
        
        queue<pii> que;
        int oldColor = image[sr][sc];
        if(oldColor == newColor) return image;
        que.push(pii(sr, sc));
        int dx[4] = {0, 0, -1, 1};
        int dy[4] = {-1, 1, 0, 0};
        while(!que.empty()) {
            pii head = que.front();
            que.pop();
            int x = head.first;
            int y = head.second;
            image[x][y] = newColor;
            for(int k = 0; k < 4; k++) {
                int nx = dx[k] + x;
                int ny = dy[k] + y;
                if(nx >= 0 && nx < r && ny >= 0 && ny < c) {
                    if(image[nx][ny] == oldColor) {
                        que.push(pii(nx, ny));
                    }
                }
            }
        }
        return image;
    }
};
