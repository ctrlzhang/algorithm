class Solution {
    //step
    //dp[n] -> 左右两边是多少 -> 个数减1, 新的要加1, 所有这些符号位更新为新串大小, 更新两头即可
    //如果已经超过了目标串,就不用更新了
    public int findLatestStep(int[] arr, int m) {
        int n = arr.length;
        int[] dp = new int[n + 1];
        int[] cnt = new int[n + 1];
        int step = 0;
        int i = 1;
        while (i <= n) {
            int l = 0, r = 0;
            //左边
            int pos = arr[i - 1];
            if (pos == 1 || dp[pos - 1] == 0) {
                l = 0;
            } else {
                l = dp[pos - 1];
            }
            
            //右边
            if (pos == n || dp[pos + 1] == 0) {
                r = 0;
            } else {
                r = dp[pos + 1];
            }
            
            if (l + r == 0) {
                dp[pos] = 1;
                cnt[1] += 1;
            } else if (l == 0) {
                cnt[r] -= 1;
                cnt[r + 1] += 1;
                dp[pos] = r + 1;
                dp[pos + r] = r + 1;
            } else if (r == 0) {
                cnt[l] -= 1;
                cnt[l + 1] += 1;
                dp[pos] = l + 1;
                dp[pos - l] = l + 1;
            } else {
                cnt[l] -= 1;
                cnt[r] -= 1;
                cnt[l + r + 1] += 1;
                dp[pos - l] = l + r + 1;
                dp[pos + r] = l + r + 1;
            }
            
            if (cnt[m] > 0) {
                step = i;
            }
            
            ++i;
        }
        
        return step == 0 ? -1 : step;
    }
}
