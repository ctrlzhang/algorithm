"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def preorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        ans = list()
        if root is None:
            return ans
        
        self.helper(ans, root)
        return ans
    
    def helper(self, ans, root):
        ans.append(root.val)
        for child in root.children:
            self.helper(ans, child)
            
            
 """
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def preorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        if root is None:
            return []
        
        stack, ans = [root,], []
        while stack:
            root = stack.pop()
            ans.append(root.val)
            stack.extend(root.children[::-1])
        return ans;
