"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def postorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        if root is None:
            return []
        
        ans = []
        self.dfs(root, ans)
        return ans
    
    def dfs(self, root, ans):
        for child in root.children:
            self.dfs(child, ans)
        
        ans.append(root.val)
        
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, children):
        self.val = val
        self.children = children
"""
class Solution(object):
    def postorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        if root is None:
            return []
        
        stack, ans = [root, ], []
        while stack:
            curRoot = stack.pop()
            ans.append(curRoot.val)
            stack.extend(curRoot.children)
        
        return ans[::-1]
