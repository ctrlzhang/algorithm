class Logger {
public:
    //queue
    queue<pair<string, int>> msgQueue;
    
    //map
    unordered_map<string, int> msgIndex;
    
    /** Initialize your data structure here. */
    Logger() {
        
    }
    
    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.
        If this method returns false, the message will not be printed.
        The timestamp is in seconds granularity. */
    bool shouldPrintMessage(int timestamp, string message) {
        while (!msgQueue.empty() && timestamp - msgQueue.front().second >= 10) {
            string msg = msgQueue.front().first;
            msgQueue.pop();
            msgIndex.erase(msg);
        }
    
        if (msgIndex.find(message) != msgIndex.end()) return false;
        msgIndex[message] = timestamp;
        msgQueue.push(make_pair(message, timestamp));
        return true;
    }
};

/**
 * Your Logger object will be instantiated and called as such:
 * Logger obj = new Logger();
 * bool param_1 = obj.shouldPrintMessage(timestamp,message);
 */
 
 
 
 class Logger {
public:
    //map, 更新最近的时间戳
    unordered_map<string, int> msgIndex;
    
    /** Initialize your data structure here. */
    Logger() {
        
    }
    
    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.
        If this method returns false, the message will not be printed.
        The timestamp is in seconds granularity. */
    bool shouldPrintMessage(int timestamp, string message) {
        if (msgIndex.find(message) == msgIndex.end()) {
            msgIndex[message] = timestamp;
            return true;
        }
        
        int lastTime = msgIndex[message];
        if (timestamp - lastTime < 10) return false;
        msgIndex[message] = timestamp;
        return true;
    }
};

/**
 * Your Logger object will be instantiated and called as such:
 * Logger obj = new Logger();
 * bool param_1 = obj.shouldPrintMessage(timestamp,message);
 */
 
 
 class Logger(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.msg_index = {}

    def shouldPrintMessage(self, timestamp, message):
        """
        Returns true if the message should be printed in the given timestamp, otherwise returns false.
        If this method returns false, the message will not be printed.
        The timestamp is in seconds granularity.
        :type timestamp: int
        :type message: str
        :rtype: bool
        """
        if message in self.msg_index and timestamp - self.msg_index[message] < 10:
                return False
        
        self.msg_index[message] = timestamp
        return True


# Your Logger object will be instantiated and called as such:
# obj = Logger()
# param_1 = obj.shouldPrintMessage(timestamp,message)
