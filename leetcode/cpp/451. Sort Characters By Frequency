class Solution {
public:
/**
 * 思路: 
 * 1. 利用map, 统计每个char对应的出现次数
 * 2. 利用另一个map, 统计出现次数, 对应的字符, map默认有序, 从小到大, 我们这里对次数乘以-1, 让出现次数最多的排在前面
 * 
 */ 
    string frequencySort(string s) {
        map<char, int> cm;
        map<int, vector<char>> om;
        
        for(int i=0; i<s.length(); i++) {
            cm[s[i]]++;
        }
        
        map<char, int>::iterator cit = cm.begin();
        while(cit != cm.end()) {
            om[-cit->second].push_back(cit->first);
            cit++;
        }
        
        string result = "";
        
        map<int, vector<char>>::iterator mit = om.begin();
        while(mit != om.end()) {
            int count = -mit->first;
            vector<char> vc = mit->second;
            for(int i=0; i<vc.size(); i++) {
                string tmp(count, vc[i]);
                result += tmp;
            }
            
            mit++;
        }
        
        return result;
    }
};
