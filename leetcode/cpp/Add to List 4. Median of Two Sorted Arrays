`L1`  |  `R1`
`L2`  |  `R2`

0)`L1` should less than `R2` and `L2` should less than `R1`
1)`l1` is the max number in the left part of `nums1`, `l2` is the max number in the left part of `nums2`
2)`r1` is the min number in the right part of `nums1`, `r2` is the min number in the right part of `nums2`
3)`c1` is the cut point of `nums1`,  `c2` is the cut point of `nums2`
when `c1 = k`, it means we'll choose top k numbers from `nums1`.
when `c1=0`, the left part of `nums1` will be empty, so we set  `l1` to INT_MIN in order to keep it less than `r2`. 
when `c1=m`, the right part of `nums1` will be empty, so we set `r1` to INT_MAX in order to keep it bigger than `l2`. 
when `c2=0`, the left part of `nums2` will be empty, so we set  `l2` to INT_MIN in order to keep it less than `r1`. 
when `c2=m`, the right part of `nums2` will be empty, so we set `r2` to INT_MAX in order to keep it bigger than `l1`. 
4)when `m + n` is odd, we choose `(m + n + 1) / 2` numbers and get ans by using `max(l1, l2)`
5)when `m + n` is even, we choose `(m + n + 1) / 2` numbers and get ans by using `(max(l1, l2) + min(r1, r2)) / 2.0`
```
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        if(m > n) {
            return findMedianSortedArrays(nums2, nums1);
        }

        int l1, l2, r1, r2, c1, c2, lo = 0, hi = m;
        while(lo <= hi) {
            int c1 = (lo + hi) / 2;
            c2 = (m + n + 1) / 2 - c1;
            
            l1 = (c1 == 0) ? INT_MIN : nums1[c1 - 1];
            r1 = (c1 == m) ? INT_MAX : nums1[c1];
            l2 = (c2 == 0) ? INT_MIN : nums2[c2 - 1];
            r2 = (c2 == n) ? INT_MAX : nums2[c2];
            
            if(l1 > r2) {
                hi = c1 - 1;
            } else if(l2 > r1) {
                lo = c1 + 1;
            } else {
                break;
            }
        }
        
        if((m + n) % 2 == 0) {
            return (max(l1, l2) + min(r1, r2)) / 2.0;
        }
        
        return max(l1, l2);
    }
};
```
