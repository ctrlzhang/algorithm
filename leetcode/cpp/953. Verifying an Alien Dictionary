class Solution {
public:
    unordered_map<char, int> index;
    bool isAlienSorted(vector<string>& words, string order) {
        //edge case
        if(words.empty() || order.length() == 0) return true;
        
        //normal
        for (int i = 0; i < order.length(); i++) {
            index[order[i]] = i;
        }
        
        int n = words.size();
        for (int i = 0; i < n - 1; i++) {
            bool ret = check(words[i], words[i + 1]);
            if (!ret) return false;
        }
        
        return true;
    }
    
    bool check(const string& ls, const string& rs) {
        int lenA = ls.length();
        int lenB = rs.length();
        int i = 0;
        char chA, chB;
        while (i < lenA && i < lenB) {
            chA = ls[i];
            chB = rs[i];
            if (index[chA] < index[chB]) return true;
            if (index[chA] > index[chB]) return false;
            i++;
        }
        
        return lenA <= lenB;
    }
};
