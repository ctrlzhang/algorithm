class Solution {
public:
    //注意,该正则表达式要求 字符*不能放在第一位.
    bool isMatch(string s, string p) {
        if(p.empty()) return s == p;
        if(p.length() == 1) return (s.length() == 1) && (s[0] == p[0] || p[0] == '.');
        if(p[1] != '*') return !s.empty() && (s[0] == p[0] || p[0] == '.') && isMatch(s.substr(1), p.substr(1));
        return isMatch(s, p.substr(2)) || ((!s.empty() && (p[0] == s[0] || p[0] == '.') && isMatch(s.substr(1), p)));
    }
};


class Solution {
public:
    //注意,该正则表达式要求 字符*不能放在第一位.
    bool isMatch(string s, string p) {
        int l = s.length();
        int r = p.length();
        vector<vector<int>> f(l + 1, vector<int>(r + 1, 0));
        f[0][0] = 1;

        for(int i = 1; i <= r; i++) {
            f[0][i] = (p[i - 1] == '*') && f[0][i - 2];
        }

        //F[i][j] s(0..i) p(0..j)
        for(int i = 1; i <= l; i++) {
            for(int j = 1; j <= r; j++) {
                if(p[j - 1] == '*') {
                    if(i >= 1 && j >= 2) f[i][j] = f[i][j - 2] || ((s[i - 1] == p[j - 2] || p[j - 2] == '.') && f[i-1][j]);
                } else {
                    if(i >= 1 && j >= 1) f[i][j] = (s[i - 1] == p[j - 1] || p[j - 1] == '.') && f[i-1][j-1];
                }
            }
        }

        return f[l][r];
    }
};
