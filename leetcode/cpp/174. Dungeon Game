class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int r = dungeon.size();
        int c = dungeon[0].size();
        vector<vector<int>> dp(r, vector<int>(c, 0));
        //dp[i][j] means from i,j to r -1, c - 1 ,we need dp[i][j] blood, so dp[i][j] need to meet 2 conditions
        //first, at least 1
        //second, dp[i][j] can reach the r - 1, c - 1
        for(int i = r - 1; i >= 0; i--) {
            for(int j = c - 1; j >= 0; j--) {
                if(i == r - 1 && j == c - 1) { 
                    dp[i][j] = max(1, 1 - dungeon[i][j]);
                } else if(i == r - 1) {
                    dp[i][j] = max(1, dp[i][j + 1] - dungeon[i][j]);
                } else if(j == c - 1) {
                    dp[i][j] = max(1, dp[i + 1][j] - dungeon[i][j]);
                } else {
                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j]);
                }
            }
        }
        
        return dp[0][0];
    }
};
