class Solution {
/**
 * 思路: 递归枚举所有可能的组合, 暴力搜索
 * 分为以1,2,3,...,8,9开头的
 * 以1开头的组, 在剩余的数里找所有和为N-1的组合
 * 以2开头的组，在剩余的数里找所有和为N-2的组合
 * ...
 * 然后从所有组合中, 挑出个数为K的, 输出
 * 注意边界条件必须判断 0 == n
 */ 
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> gVec;
        if(0 >= k || n > 45) return gVec;
        
        vector<int> tVec;
        helper(1, k, n, tVec, gVec);
        return gVec;
    }

    void helper(int start, int k, int n, vector<int>& tv, vector<vector<int>>& gv) {
        if(tv.size() > k) return;
        if(tv.size() == k && 0 == n) {
            vector<int> tmp(tv);
            gv.push_back(tmp);
            return;
        }
        
        for(int i=start; i<=9; i++) {
            tv.push_back(i);
            helper(i+1, k, n-i, tv, gv);
            tv.pop_back();
        }
    }
};
