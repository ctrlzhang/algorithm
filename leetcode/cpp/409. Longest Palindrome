class Solution {
public:
    int longestPalindrome(string s) {
        map<char, int> m;
        int count = 0;
        for(int i=0; i<s.length(); i++) {
            if(m.find(s[i]) != m.end()) {
                m.erase(s[i]);
                count++;
            } else {
                m[s[i]]++;
            }
        }
        
        if(m.empty()) return 2*count;
        return 2*count + 1;
    }
};

class Solution {
public:
    int longestPalindrome(string s) {
        map<char, int> m;
        int count = 0;
        for(int i=0; i<s.length(); i++) {
            m[s[i]]++;
            if(m[s[i]] == 2) {
                m[s[i]] = 0;
                count += 2;
            }
        }
        
        for(int i=0; i<s.length(); i++) {
            if(m[s[i]] == 1) {
                count++;
                break;
            }
        }
        
        return count;
    }
};

class Solution {
public:
/**
 * 优化: single , 如果有不匹配的, single最终个数必然大于0, 如果都是匹配的, single必为0
 * 
 */ 
    int longestPalindrome(string s) {
        map<char, int> m;
        int count = 0;
        int single = 0;
        for(int i=0; i<s.length(); i++) {
            m[s[i]]++;
            single++;
            if(m[s[i]] == 2) {
                m[s[i]] = 0;
                count += 2;
                single -= 2;
            }
        }
        
        return count + (single > 0 ? 1 : 0);
    }
};
