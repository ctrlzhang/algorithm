/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
/**
 * 思路:
 * 源列表和目的列表的next指针复制比较简单, 复杂的是random指针
 * 源列表和目的列表的random指针不同, 但是相对位置是相同的, 故
 * 1.使用vector保存, 新列表中每个节点的指针
 * 2.使用map建立起, 源列表, 每个节点对应的random指针, 对应列表中第几个指针的地址
 *
 * 当复制链表时, 新列表利用下标, 把对应下标的指针赋给当前节点的random成员
 */ 
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(NULL == head) return head;
        
        map<RandomListNode*, int> p2i; //源串指针和下标的映射
        vector<RandomListNode*> pv;//新串的指针列表, 用于根据下标, 填充对应的random指针值
        RandomListNode * newHead = createNewList(head, p2i, pv); //创建新链表
        return newHead;
    }
    
    RandomListNode *createNewList(RandomListNode *oldHead, map<RandomListNode*, int>& p2i, vector<RandomListNode*>& pv) {
        RandomListNode* node = NULL;
        RandomListNode* prev = NULL;
        RandomListNode* newHead = NULL;
        int pos = 0;
        RandomListNode* head = oldHead;
        while(head != NULL) {
            node = new RandomListNode(head->label);
            if(prev != NULL) {
                prev->next = node;//尾结点
            } else {
                newHead = node;//新头结点
            }
            
            prev = node;
            pv.push_back(node);
            p2i[head] = pos;
            head = head->next;
            pos++;
        }
        
        head = newHead;
        while(oldHead != NULL) {
            if(oldHead->random == NULL) {
                head->random = NULL;    
            } else {
                pos = p2i[oldHead->random];
                head->random = pv[pos];
            }
            
            oldHead = oldHead->next;
            head = head->next;
        }
        
        return newHead;
    }
};
