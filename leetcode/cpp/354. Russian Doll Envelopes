typedef pair<int, int> pii;

bool myLess(const pii& l, const pii& r) {
    if(l.first == r.first) return l.second < r.second;
    return l.first < r.first;
}

class Solution {
public:
    int maxEnvelopes(vector<pair<int, int>>& envelopes) {
        if(envelopes.size() <= 1) return envelopes.size();
        
        int ans = INT_MIN;
        int n = envelopes.size();
        vector<int> dp(n, 1);
        sort(envelopes.begin(), envelopes.end(), myLess);
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                if(canContain(envelopes[i], envelopes[j])) {
                    dp[i] = max(dp[i], 1 + dp[j]);
                }
            }
            
            ans = max(ans, dp[i]);
        }
        
        return ans;
    }
    
    bool canContain(pii left, pii right) {
        if(left.first > right.first && left.second > right.second) return true;
        return false;
    }
};
