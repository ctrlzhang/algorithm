class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        map<char, char> mc;
        mc['('] = ')';
        mc['['] = ']';
        mc['{'] = '}';
        
        for(int i=0; i<s.size(); i++) {
            switch(s[i]) {
                case '(':
                case '[':
                case '{':
                    {
                        st.push(s[i]);
                        break;
                    }
                case ')':
                case ']':
                case '}':
                    {
                        if(st.empty()) return false;
                        char top = st.top();
                        if(mc[top] == s[i]) {
                            st.pop();
                        } else {
                            return false;
                        }
                        break;
                    }
                default:
                    return false;
            }
        }
        
        if(st.empty()) return true;
        return false;
    }
};


class Solution {
public:
    bool isValid(string s) {
        unordered_map<char, char> p = {{'(', ')'}, {'[', ']'}, {'{', '}'}};
        stack<char> st;
        for (char c : s) {
            if (c == '(' || c == '[' || c == '{') {
                st.push(c);
            } else {
                if (st.empty()) return false;
                char cur = st.top();
                if (p[cur] == c) {
                    st.pop();
                } else {
                    return false;
                }
            }
        }
        
        if (!st.empty()) return false;
        return true;
    }
};
