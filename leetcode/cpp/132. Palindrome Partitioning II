//TLE
class Solution {
public:
    unordered_map<string, int> mp;
    unordered_map<string, bool> pp;
    int minCut(string s) {
        if(mp.find(s) != mp.end()) return mp[s];
        
        //edge case
        if(s.empty() || isPalind(s)) {
            mp[s] = 0;
            return 0;
        }
        
        int ans = INT_MAX;
        int len = s.length();
        string left, right;
        for(int i = 1; i <= len - 1; i++) {
            left = s.substr(0, i);
            right = s.substr(i);
            ans = min(ans, 1 + minCut(left) + minCut(right));
        }
        
        mp[s] = ans;
        return ans;
    }
    
    bool isPalind(string s) {
        if(pp.find(s) != pp.end()) return pp[s];
        int i = 0, j = s.length() - 1;
        while(i < j) {
            if(s[i] == s[j]) {
                i++;
                j--;
            } else {
                pp[s] = false;
                return false;
            }
        }
        
        pp[s] = true;
        return true;
    }
};

class Solution {
public:
    int minCut(string s) {
        if(s.empty()) return 0;
        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        vector<int> ans(n, INT_MAX);
        for(int i = 0; i < n; i++) {
            ans[i] = i;
            for(int j = 0; j <= i; j++) {
                if(s[i] == s[j] && (i - j <= 1 || dp[i - 1][j + 1])) {
                    dp[i][j] = 1;
                    if(0 == j) {
                        ans[i] = 0;
                    } else {
                        ans[i] = min(ans[i], 1 + ans[j - 1]);
                    }
                }
            }
        }

        return ans[n - 1];
    }
};
