/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
/**
 * 思路: 利用中序和后序, 确定好root节点, 找到左子树的段, 找到右子树的段, 递归左右子树, 左右子树返回root节点.
 * 作为上一层root的左右子节点.
 */ 
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n = inorder.size();
        if(n == 0) return NULL;
        
        TreeNode* root = new TreeNode(postorder[n-1]);
        if(n == 1) {
            return root;
        }
        
        int i;
        for(i=0; i<n; i++) {
            if(inorder[i] == postorder[n-1]) break;
        }
        
        vector<int>::iterator vit = inorder.begin();
        vector<int> inorderLeft, postorderLeft, inorderRight, postorderRight;
        if(i == 0) {
            inorderRight = vector<int>(inorder.begin()+1, inorder.end());
            postorderRight= vector<int>(postorder.begin(), postorder.end()-1);
        } else if(i == n-1) {
            inorderLeft = vector<int>(inorder.begin(), inorder.end()-1);
            postorderLeft = vector<int>(postorder.begin(), postorder.end()-1);
        } else {
            inorderLeft = vector<int>(inorder.begin(), inorder.begin() + i);
            inorderRight = vector<int>(inorder.begin()+i+1, inorder.end());
            postorderLeft = vector<int>(postorder.begin(), postorder.begin() + i);
            postorderRight = vector<int>(postorder.begin()+i, postorder.end()-1);
        }
        
        root->left = buildTree(inorderLeft, postorderLeft);
        root->right = buildTree(inorderRight, postorderRight);
        return root;
    }
};
