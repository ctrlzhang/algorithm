class Solution {
public:
    //思路：穷举复杂度太高，使用mem + dfs，同样是模拟所有可能
    //递推公式：dp[l][r][k] = max(dp[l][r][k], dp[l][i][k+1] + dp[i+1][r-1][0])
    //求出dp[0][n-1][0]即可
    int removeBoxes(vector<int>& boxes) {
        int n = boxes.size();
        int dp[100][100][100] = {-1};
        memset(dp, -1, sizeof(dp));
        return dfs(boxes, dp, 0, n - 1, 0); 
    }
    
    int dfs(vector<int>& boxes, int dp[100][100][100], int l, int r, int k) {
        if(l > r) return 0;
        if(dp[l][r][k] != -1) return dp[l][r][k];
        
        while(r > l && boxes[r] == boxes[r - 1]) {
            k++;
            r--;
        }
        
        dp[l][r][k] = dfs(boxes, dp, l, r - 1, 0) + (1 + k) * (1 + k);
        for(int i = l; i < r; i++) {
            if(boxes[i] == boxes[r]) {
                dp[l][r][k] = max(dp[l][r][k], dfs(boxes, dp, l, i, k + 1) + dfs(boxes, dp, i + 1, r - 1, 0));
            }
        }
                                  
        return dp[l][r][k];
    }
};
