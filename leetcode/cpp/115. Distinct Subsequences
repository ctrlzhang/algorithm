class Solution {
public:
    unordered_map<string, int> mp;
    int numDistinct(string s, string t) {
        string key = s + "_" + t;
        if(mp.find(key) != mp.end()) return mp[key];
        
        //edge case
        if(s == t) return 1;
        if(t.empty()) return 1;
        if(s.empty()) return 0;
        
        int ans = 0;
        for(int i = 0; i < s.length(); i++) {
            if(t[0] == s[i]) {
                ans += numDistinct(s.substr(i + 1), t.substr(1));
            }
        }
        
        mp[key] = ans;
        return ans;
    }
};


class Solution {
public:

    int numDistinct(string s, string t) {
        int r = s.length();//row
        int c = t.length();//col
        int dp[r + 1][c + 1] = {0};
        memset(dp, 0, sizeof(dp));

        for(int i = 0; i <= r; i++) {
            dp[i][0] = 1;
        }

        for(int i = 1; i <= r; i++) {
            for(int j = 1; j <= c; j++) {
                if(s[i - 1] == t[j - 1]) {
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[r][c];
    }
};
