class Solution {
public:
    double ratios[25][25][100];
    double knightProbability(int N, int K, int r, int c) {
        //edge case
        if(!isOnBoard(r, c, N)) return 0;
        memset(ratios, -1, sizeof(ratios) / sizeof(double));
        return helper(N, K, r, c, 1, 0);
    }
    
    bool isOnBoard(int x, int y, int N) {
        if(x < 0 || y < 0 || x >= N || y >= N) return false;
        return true;
    }
    
    double helper(int N, int K, int r, int c, double ratio, int step) {
        if(!isOnBoard(r, c, N)) return 0;
        if(ratios[r][c][step] + 1 <= 0.0000001 || ratios[r][c][step] + 1 >= -0.0000001 ) return ratios[r][c][step];
        if(step == K) return ratio;
        int dx[8] = {-2, -2, -1, -1, 1, 1, 2, 2};
        int dy[8] = {-1, 1, -2, 2, -2, 2, -1, 1};
        double ans = 0;
        for(int i = 0; i < 8; i++) {
            int nx = r + dx[i];
            int ny = c + dy[i];
            ans += helper(N, K, nx, ny, ratio / 8, step + 1);
        }
        
        ratios[r][c][step] = ans;
        return ans;
    }
};
