class Solution {
public:
    double ratios[26][26][101];
    double knightProbability(int N, int K, int r, int c) {
        if(!isOnBoard(N, r, c)) return 0;
        for(int i = 0; i < 26; i++) {
            for(int j = 0; j < 26; j++) {
                for(int k = 0; k < 101; k++) {
                    ratios[i][j][k] = 2;
                }
            }
        }
        return helper(N, K, r, c, 1, 0);
    }

    bool isOnBoard(int N, int r, int c) {
        if(r < 0 || r >= N || c < 0 || c >= N) {
            return false;
        }

        return true;
    }

    double helper(int N, int K, int r, int c, double ratio, int step) {
        if(!isOnBoard(N, r, c)) return 0;
        if(step == K) return ratio;
        if(!isEqual(2, ratios[r][c][step])) {
            return ratios[r][c][step];
        }
        double ans = 0;
        int dx[8] = {-2, -2, -1, -1, 1, 1, 2, 2};
        int dy[8] = {-1, 1, -2, 2, -2, 2, -1, 1};
        for(int i = 0; i < 8; i++) {
            int nx = r + dx[i];
            int ny = c + dy[i];
            ans += helper(N, K, nx, ny, ratio / 8, step + 1);
        }

        //cout<<"r="<<r<<" c="<<c<<" ans="<<ans<<endl;
        ratios[r][c][step] = ans;
        return ans;
    }

    bool isEqual(double a, double b) {
        if(a - b <= 0.0000001 && a - b >= -0.0000001) return true;
        return false;
    }
};

class Solution {
public:
    double knightProbability(int N, int K, int r, int c) {
        if(!isOnBoard(N, r, c)) return 0;
        if(K == 0) return 1;
        double ratios[K][N][N];
        for(int i = 0; i < K; i++) {
            for(int j = 0; j < N; j++) {
                for(int p = 0; p < N; p++) {
                    ratios[i][j][p] = 0;
                }
            }
        }
        
        int dx[8] = {-2, -2, -1, -1, 1, 1, 2, 2};
        int dy[8] = {-1, 1, -2, 2, -2, 2, -1, 1};

        for(int i = 0; i < K; i++) {
            //cout<<"i="<<i<<endl;
            for(int p = 0; p < N; p++) {
                //cout<<"p="<<p<<endl;
                for(int q = 0; q < N; q++) {
                    if(i == 0) ratios[i][p][q] = 0;
                    //cout<<"q="<<q<<endl;
                    for(int m = 0; m < 8; m++) {
                        int nx = p + dx[m];
                        int ny = q + dy[m];
                        if(isOnBoard(N, nx, ny)) {
                            if(i == 0) {
                                //cout<<"1 ratio="<<ratios[i][p][q]<<endl;
                                ratios[i][p][q] += 0.125;
                                //cout<<"2 ratio="<<ratios[i][p][q]<<endl;
                            } else {
                                ratios[i][p][q] += ratios[i - 1][nx][ny] / 8;
                            }
                            
                            //cout<<"ratio="<<ratios[i][p][q]<<endl;
                        }
                    }
                }
            }
        }

        return ratios[K - 1][r][c];
    }

    bool isOnBoard(int N, int r, int c) {
        if(r < 0 || r >= N || c < 0 || c >= N) {
            return false;
        }

        return true;
    }
};
