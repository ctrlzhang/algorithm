class Solution {
public:
    typedef vector<map<char, int>> vmc;
    typedef map<char, int> mc;
    typedef pair<char, int> pci;
    typedef vector<vector<map<char, int>>> vvmc;
    
    bool isValidSudoku(vector<vector<char>>& board) {
        vmc row;
        vmc col;
        vvmc grid;
        
        int rn = board.size();
        int cn = board[0].size();
        
        row.resize(rn, mc());
        col.resize(cn, mc());
        grid.resize(rn/3, vector<map<char, int>>(cn/3, mc()));
        
        //横扫
        for(int i=0; i<rn; i++) {
            for(int j=0; j<cn; j++) {
                char c = board[i][j];
                if(c != '.') {
                    if(row[i].count(c)) return false;
                    row[i][c] = 1;
                }
            }
        }
        
        //竖扫
        for(int i=0; i<cn; i++) {
            for(int j=0; j<rn; j++) {
                char c = board[j][i];
                if(c != '.') {
                    if(col[i].count(c)) return false;
                    col[i][c] = 1;
                }
            }
        }
        
        //9宫格
        for(int i=0; i<=rn-3; i=i+3) {
            for(int j=0; j<=cn-3; j=j+3) {
                for(int m=0; m<3; m++) {
                    for(int n=0; n<3; n++) {
                        char c = board[i+m][j+n];
                        if(c != '.') {
                            if(grid[i/3][j/3].count(c)) return false;
                            grid[i/3][j/3][c] = 1; 
                        }
                    }
                }     
            }
        }
        
        return true;
    }
};
