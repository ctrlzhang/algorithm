class Solution {
public:
    vector<int> plusOne(vector<int>& digits) { 
        int flag = 1;
        
        //先取反
        reverse(digits.begin(), digits.end());
        
        int i = 0;
        while(i < digits.size()) {
            int val = digits[i] + flag;
        
            if(val >= 10) {
                flag = 1;
                digits[i] = val - 10;
            } else {
                flag = 0;
                digits[i] = val;
            }
            
            i++;
        }
        
        if(1 == flag) digits.push_back(1);
        
        //再取反
        reverse(digits.begin(), digits.end());
        
        return digits;
    }
};

class Solution {
public:
/**
 * 思路: 
 * 遇到9需要继续, 当前位置0, 下一轮时下一位要进1
 * 遇到非9加1, 返回
 */ 
    vector<int> plusOne(vector<int>& digits) {
        for(int i=digits.size()-1; i>=0; i--) {
            if(digits[i] == 9) {
                digits[i] = 0;
            } else {
                digits[i] += 1;
                return digits;
            }
        }
        
        digits[0] = 1;
        digits.push_back(0);
        return digits;
    }
};
class Solution {
public:
/**
 * 思路: 
 * 遇到9需要继续, 当前位置0, 下一轮时下一位要进1
 * 遇到非9加1, 返回
 */ 
    vector<int> plusOne(vector<int>& digits) {
        for(int i=digits.size()-1; i>=0; i--) {
            if(digits[i] == 9) {
                digits[i] = 0;
            } else {
                digits[i] += 1;
                return digits;
            }
        }
        
        digits[0] = 1;
        digits.push_back(0);
        return digits;
    }
};
