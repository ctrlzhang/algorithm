class Solution {
public:
/**
 * 思路: 每个点我们可以做四个动作
 * 第一次买
 * 第一次卖
 * 第二次买
 * 第二次卖
 * 如果当前点可以得到本次操作的最优价，则当前操作可以作为备选点
 */ 
    int maxProfit(vector<int>& prices) {
        int firstBuy = INT_MIN, firstSell = 0;
        int secBuy = INT_MIN, secSell = 0;
        for(int i=0; i<prices.size(); i++) {
            firstBuy = max(firstBuy, -prices[i]);
            firstSell = max(firstSell, prices[i] + firstBuy);
            secBuy = max(secBuy, firstSell - prices[i]);
            secSell = max(secSell, secBuy + prices[i]);
        }
        
        return secSell;
    }
        
    int Max(int a, int b) {
        return a > b ? a : b;
    }
};


class Solution {
public:
    //dp[i][2][0] = max(dp[i-1][2][1] + price[i], dp[i - 1][2][0])
    //dp[i][2][1] = max(dp[i-1][1][0] - price[i], dp[i - 1][2][1])
    //dp[i][1][0] = max(dp[i-1][1][1] + price[i], dp[i - 1][1][0])
    //dp[i][1][1] = max(dp[i-1][0][0] - price[i], dp[i - 1][1][1])
    
    //a=max(b + price[i], a);
    //b=max(c - price[i], b);
    //c=max(d + price[i], c);
    //d=max(-price[i], d);
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n == 0) return 0;
        int ans = 0;
        int a = 0 , b = -prices[0], c = 0, d = -prices[0];
        for(int i = 1; i < n; i++) {
            a = max(b + prices[i], a);
            b = max(c - prices[i], b);
            c = max(d + prices[i], c);
            d = max(-prices[i], d);
        }
        
        int l = a > b ? a : b;
        int r = c > d ? c : d;
        return l > r ? l : r;
    }
};
