class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
            //requirements: nums[i] == i + 1
            int n = nums.size();
            for(int i = 0; i < n; i++) {
                while(needLoop(i, nums)) {
                    int tmp = nums[i];
                    nums[i] = nums[tmp - 1];
                    nums[tmp - 1] = tmp;
                }
            }

            for(int i = 0; i < nums.size(); i++) {
                if(nums[i] != i + 1) return i + 1;
            }

            return n + 1;
        }

        bool needLoop(int p, vector<int>& nums) {
            if(nums[p] < 1 || nums[p] > nums.size()) return false;
            if(nums[p] == nums[nums[p] - 1]) return false;
            return true;
        }
};

class Solution {
public:
        //partition first and then set positive number to negative
        int firstMissingPositive(vector<int>& nums) {
            int n = nums.size();
            int k = partition(nums);
            for(int i = 0; i <= k; i++) {
                int pos = abs(nums[i]) - 1;
                if(pos >= 0 && pos <= k) {
                    if(nums[pos] > 0) {
                        nums[pos] = -nums[pos];
                    }
                }
            }

            for(int i = 0; i <= k; i++) {
                if(nums[i] > 0) return i + 1;
            }

            return k + 2;
        }

        //i永远是最先到达右半部分的起点.
        //所以,swap pivoit和i时. 所以每次需要swap的是pivot 和 i - 1
        int partition(vector<int>& nums) {
            int pivot = 0;
            int n = nums.size();
            int i = 0, j = n - 1;
            while(i <= j) {
                while(i <= j && nums[i] > pivot) {
                    i++;
                }

                while(i <= j && nums[j] <= pivot) {
                    j--;
                }

                if(i < j) {
                    swap(nums[i], nums[j]);
                }
            }

            return i - 1;
        }
};
