/**
思路:
使用了三个下标来完成遍历
i 和 j表示 遍历的开头和结尾
k 用于表示下一个i 或 j
因为x坐标轴为底, 而最开始的长度是最大的, 
所以要想求得更大的面积, 则需要找到更高的高度, 而较低的高度就可以直接忽略.

复杂度:
时间复杂度o(n)
空间复杂度o(1)
**/

class Solution {
public:
    int maxArea(vector<int>& height) {
        int n = height.size();
        if(n <= 1) return 0;
        
        int i = 0, j = n-1, maxArea = 0, area = 0;;
        while(i < j) {
            if(height[i] <= height[j]) {
                area = height[i]*(j - i);
                maxArea = (maxArea >= area) ? maxArea : area;
                int k = i + 1;
                while(k < j && height[k] <= height[i]) {
                    ++k;
                }
                i = k;
            } else {
                area = height[j] * (j - i);
                maxArea = (maxArea >= area) ? maxArea : area;
                int k = j - 1;
                while(k > i && height[k] <= height[j]) {
                    --k;
                }
                j = k;
            }
        }
        
        return maxArea;
    }
    
};
