class Solution {
public:
    //thinking process
    //we need to count or statics the candidate numbers in each empty cells
    //we know there must be a empty cell that has just one candidate number
    //ans then we set the empty to the candidate number and we 
    //update the empty cells in the same line, and update the empty cells in the same row, and same grid
    void solveSudoku(vector<vector<char>>& board) {
        int r = board.size();
        int c = board[0].size();
        vector<vector<int>> rc(r, vector<int>(10, 0));
        vector<vector<int>> cc(c, vector<int>(10, 0));
        vector<vector<int>> gc(r * c / 9, vector<int>(10, 0));
        for(int i = 0; i < r; i++) {
            for(int j = 0; j < c; j++) {
                char c = board[i][j];
                if(c == '.') continue;
                rc[i][c - '0'] = 1;
                cc[j][c - '0'] = 1;
                int g = getGrid(i, j);
                gc[g][c - '0'] = 1;
            }
        }
        
        //pre deal
        bool hasEmpty = true;
        bool hasChanged = true;
        while(hasEmpty && hasChanged) {
            cout<<"hello"<<endl;
            hasEmpty = false;
            hasChanged = false;
            for(int i = 0; i < r; i++) {
                for(int j = 0; j < c; j++) {
                    if(board[i][j] == '.') {
                        hasEmpty = true;
                        bool ret = solve(board, i, j, rc, cc, gc);
                        if(ret) hasChanged = true;
                    }
                }
            }
        }
        
        if(!hasEmpty) return;

        //do
        backTrace(board, rc, cc, gc);
    }
    
    bool backTrace(vector<vector<char>>& board, vector<vector<int>>& rc, 
               vector<vector<int>>& cc, vector<vector<int>>& gc) {
        int r = board.size();
        int c = board[0].size();
        //recursive
        bool hasEmpty = false;
        for(int i = 0; i < r; i++) {
            for(int j = 0; j < c; j++) {
                if(board[i][j] == '.') {
                    hasEmpty = true;
                    int g = getGrid(i, j);
                    bool ret = false;
                    for(int p = 1; p <= 9; p++) {
                        if(rc[i][p] || cc[j][p] || gc[g][p]) continue;
                        board[i][j] = p + '0';
                        rc[i][p] = 1;
                        cc[j][p] = 1;
                        gc[g][p] = 1;
                        ret = backTrace(board, rc, cc, gc);
                        if(ret) return true;
                        board[i][j] = '.';
                        rc[i][p] = 0;
                        cc[j][p] = 0;
                        gc[g][p] = 0;
                    }
                    
                    if(!ret) return false;
                }
            }
        }
        
        cout<<"work2"<<endl;
        if(!hasEmpty) return true;
        return false;
    }
    
    
    int getGrid(int i, int j) {
        return (i / 3) * 3 + j / 3;
    }
    
    bool solve(vector<vector<char>>& board, int x, int y, vector<vector<int>>& rc, 
               vector<vector<int>>& cc, vector<vector<int>>& gc) {
        //cout<<"solve"<<endl;
        int g = getGrid(x, y);
        int cand[10] = {0};
        for(int i = 1; i <= 9; i++) {
            if(rc[x][i] || cc[y][i] || gc[g][i]) cand[i] = 1;
        }
        
        int cnt = 0;
        int val = 0;
        for(int i = 1; i <= 9; i++) {
            if(cand[i] == 0) {
                cnt++;
                val = i;
            }
        }
        
        if(cnt == 1) {
            board[x][y] = val + '0';
            rc[x][val] = 1;
            cc[y][val] = 1;
            gc[g][val] = 1;
            return true;
        }
        return false;
    }
    
    void show(vector<int>& v) {
        for(int d : v) {
            cout<<d<<" ";
        }
        cout<<endl;
    }
};
