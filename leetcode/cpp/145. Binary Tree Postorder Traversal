/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

struct Node {
    public:
        /*
        * 0-visit; 1-print
        */
        int opt;
        TreeNode* root;
        Node(int opt, TreeNode* root) {
            this->opt = opt;
            this->root = root;
        }
};
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        stack<Node> st;
        vector<int> ans;
        if(nullptr == root) return ans;
        Node node(0, root);
        st.push(node);
        while(!st.empty()) {
            Node node = st.top();
            st.pop();
            if(nullptr == node.root) continue;
            if(node.opt == 1) {
                ans.push_back(node.root->val);
            } else {
                st.push(Node(1, node.root));
                st.push(Node(0, node.root->right));
                st.push(Node(0, node.root->left));
            }
        }
        return ans;
    }
};

//java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if(null == root) return ans;
        Node node = new Node(0, root);
        Stack<Node> st = new Stack<>();
        st.push(node);
        while(!st.empty()) {
            node = st.peek();
            st.pop();
            if(null == node.root) continue;
            if(1 == node.opt) {
                ans.add(node.root.val);
            } else {
                st.push(new Node(1, node.root));
                st.push(new Node(0, node.root.right));
                st.push(new Node(0, node.root.left));
            }
        }
        return ans;
    }
    
    private class Node {
        public int opt;
        public TreeNode root;
        public Node(int opt, TreeNode root) {
            this.opt = opt;
            this.root = root;
        }
    }
}
