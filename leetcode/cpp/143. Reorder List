/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        if (NULL == head || NULL == head->next || NULL == head->next->next) return;
        
        //find mid pos
        ListNode *tmp = head;
        int count = 0;
        while (NULL != tmp) {
            ++count;
            tmp = tmp->next;
        }
        
        int pos = (count + 1) / 2;
        
        tmp = head;
        int idx = 0;
        ListNode *rh = NULL;
        while (NULL != tmp) {
            ++idx;
            if(idx == pos) {
                rh = tmp->next;
                tmp->next = NULL;
                break;
            }
            
            tmp = tmp->next;
        }
        
        //reverse rh
        ListNode *prev = NULL;
        ListNode *cur = NULL;
        while(NULL != rh) {
            cur = rh;
            rh = rh->next;
            cur->next = prev;
            prev = cur;
        }
        
        //merge list
        tmp = head;
        while(NULL != cur) {
           ListNode *nextTmp = tmp->next;
           ListNode *nextCur = cur->next;
           cur->next = nextTmp;
           tmp->next = cur;
           cur = nextCur;
           tmp = nextTmp;
        }
    }
};


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        if(NULL == head || NULL == head->next || NULL == head->next->next) return;
    	
    	//find mid
    	ListNode *l1 = head;
    	ListNode *l2 = head;
    	while(NULL != l2->next && NULL != l2->next->next) {
    		l1 = l1->next;
    		l2 = l2->next->next;
    	}
    	
    	//reverse
    	ListNode *prev = l1;
    	ListNode *cur = l1->next;
    	ListNode *next = cur->next;
    	while(NULL != next) {
    		cur->next = next->next;
    		next->next = prev->next;
    		prev->next = next;
    		next = cur->next;
    	}
    	
    	//merge
    	ListNode *lh = head;
    	ListNode *rh = NULL;
    	while(lh != prev) {
    		rh = prev->next;
    		prev->next = rh->next;
    		rh->next = lh->next;
    		lh->next = rh;
    		lh = rh->next;
    	}
    }
};
