思路:最优解中可能包括第一个数，也可能不包括第一个数
故答案只有两种dp[1..n]
1）包括第一个数，则问题变为枚举 max(p[2] - p[1] + dp[4..n], p[3]-p[1]+dp[5..n], ..., p[n-1] - p[n-2])
2）不包括第一个数，则问题变为求 dp[2..n]
取1和2的最大值

dp[n-1] = 0, 因为没法盈利
依次求dp[n-2],dp[n-3],....,dp[3],dp[2],dp[1] 取最大值

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(0 == n) return 0;
        
		vector<int> dp(n, 0);
		int ans = 0;
		for(int i=n-2; i>=0; i--) {
			for(int j=1; i+j < n; j++) {
        if(prices[i+j] - prices[i] <= 0) continue;
				if(i+j+2 < n) {
					dp[i] = max(dp[i], prices[i+j] - prices[i] + dp[i+j+2]);
				} else {
					dp[i] = max(dp[i], prices[i+j] - prices[i]);
				}        
			}
            
      dp[i] = max(dp[i], dp[i+1]);
      if(dp[i] > ans) ans = dp[i];
		}
		
		return ans;
    }
};
