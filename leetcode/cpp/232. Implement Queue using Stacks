class MyQueue {
public:
    stack<int> st;
    stack<int> bkSt;
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        while(!st.empty()) {
            bkSt.push(st.top());
            st.pop();
        }
        
        st.push(x);
        
        while(!bkSt.empty()) {
            st.push(bkSt.top());
            bkSt.pop();
        }
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int val = st.top();
        st.pop();
        return val;
    }
    
    /** Get the front element. */
    int peek() {
        return st.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return st.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */
 
 
 class MyQueue {
public:
    //stack 1 2 3
    stack<int> in;
    stack<int> out;
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        in.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        if (!out.empty()) {
            int ans = out.top();
            out.pop();
            return ans;
        }
        
        if (in.empty()) {
            return -1;
        }
        
        while (!in.empty()) {
            int val = in.top();
            in.pop();
            out.push(val);
        }
        
        int ans = out.top();
        out.pop();
        return ans;
    }
    
    /** Get the front element. */
    int peek() {
        if (!out.empty()) {
            return out.top();
        }
        
        if (in.empty()) return -1;
        
        while (!in.empty()) {
            int val = in.top();
            in.pop();
            out.push(val);
        }
        
        return out.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return in.empty() && out.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */
