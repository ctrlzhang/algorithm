class Solution {
public:
/**
 * 思路: 
 * o(nlogN)
 * 1.按索引大小排序
 * 2.逆序，从索引1开始, 判断
 * 2-1 如果当前索引数<可能的索引, 则继续判断下一个可能的索引
 * 2-1 如果当前索引数>=可能的索引, 则判断前一个索引数是否和当前索引数相同, 若不同，则保存为备选值，否则跳出判断， 继续判断下一个可能的索引
 */ 
    int hIndex(vector<int>& citations) {
        int n = citations.size();
        int hx = -1;
        sort(citations.begin(), citations.end()); //o(nlogN)
        
        for(int i=n; i>=1; i--) {
            if(citations[n-i] < i) continue;
            if(i == n) return n;
            if(citations[n-i-1] > i) continue;
            hx = i;
        }
        
        if(-1 == hx) hx = 0;
        return hx;
    }
};


class Solution {
public:
/**
 * 思路: 优化, 减枝
 * o(nlogN)
 * 1.按索引大小排序
 * 2.逆序，从索引1开始, 判断
 * 2-1 如果当前索引数<可能的索引, 则继续判断下一个可能的索引
 * 2-1 如果当前索引数>=可能的索引, 则判断前一个索引数是否和当前索引数相同, 若不同，则保存为备选值，否则跳出判断， 继续判断下一个可能的索引
 */ 
    int hIndex(vector<int>& citations) {
        int n = citations.size();
        int hx = 0;
        sort(citations.begin(), citations.end()); //o(nlogN)
        
        for(int i=n; i>=1; i--) {
            if(citations[n-i] < i) continue;
            if(i == n) return n;
            if(citations[n-i-1] > i) continue;
            return i;
        }
        
        return hx;
    }
};

class Solution {
public:
/**
 * 思路: 
 * o(nlogN)
 * 1.按索引大小排序
 * 2.逆序，从索引1开始, 判断
 * 2-1 如果当前索引数<可能的索引, 则继续判断下一个可能的索引
 * 2-1 如果当前索引数>=可能的索引, 则判断前一个索引数是否和当前索引数相同, 若不同，则保存为备选值，否则跳出判断， 继续判断下一个可能的索引
 */ 
    int hIndex(vector<int>& citations) {
        int n = citations.size();
        sort(citations.begin(), citations.end()); //o(nlogN)
        
        for(int i=0; i<n; i++) {
            if(citations[i] >= n - i) return n - i;
        }
        
        return 0;
    }
};


//o(n) 利用了快速排序的划分divide partion方法
public int hIndex(int[] citations) 
{
    int length = citations.length;
    int start = 0;
    int end = length - 1;
    int hIndex = 0;
    
    while (start <= end)
    {
        int current = divideByPartition(citations, start, end);
        if (length - current <= citations[current])
        {
            hIndex = length - current;
            end = current - 1;
        }
        else
            start = current + 1;
    }
    
    return hIndex;
}

private int divideByPartition(int[] a, int start, int end)
{
    if (start == end) return end;
    
    int p = a[end];
    int head = start;
    for (int current = start; current < end; current++)
    {
        if (a[current] < p)
        {
            int temp = a[head];
            a[head] = a[current];
            a[current] = temp;
            head++;
        }
    }
    a[end] = a[head];
    a[head] = p;
    return head;
}
