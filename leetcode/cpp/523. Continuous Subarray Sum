class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        if(n <= 1) return false;
        
        vector<int> dp(n+1, 0);
        
        for(int i=1; i<=n; i++) {
            dp[i] = nums[i-1] + dp[i-1];
        }
        
        if(0 == k) {
            if(dp[n] == 0) return true;
            return false;
        }
        
        for(int i = 2; i<=n; i++) {
            if(dp[i] % k == 0) return true;
        }
        
        for(int i=1; i<=n-1; i++) {
            for(int j=i+1; j<=n; j++) {
                if((dp[j] - dp[i] + nums[i-1]) % k == 0) return true;
            }
        }
        
        
        return false;
    }
};

class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        if(n <= 1) return false;
        
        unordered_set<int> st;
        int sum = 0;
        int pre = 0;
        for(int i=0; i<n; i++) {
            sum += nums[i];
            int mod = k == 0 ? sum : sum % k;
            if(st.find(mod) != st.end()) {
                return true;
            }
            
            st.insert(pre);
            pre = mod;
        }
        
        return false;
    }
};
