/*
正常的推理
dp[i][j] = dp[i-1][j+nums[i-1]] + dp[i-1][j-nums[i-1]];
*/
class Solution {
public:
    //前i个数,结果为j的个数
    //dp[i][j] = dp[i-1][j-nums[i-1]] + dp[i-1][j+nums[i-1]]
    int findTargetSumWays(vector<int>& nums, int S) {
        int sum = 0;
        for(int k : nums) {
            sum += k;
        }
        
        if(sum < S) return 0;
        int n = nums.size();
        int dp[n+1][2*sum + 1];
        memset(dp, 0, sizeof(int)*(n+1)*(2*sum+1));
        dp[0][sum] = 1;
        for(int i=1; i<=n; i++) {
            for(int j=0; j<=2*sum; j++) {
                if(j - nums[i-1] >= 0) {
                    dp[i][j] += dp[i-1][j-nums[i-1]];
                }
                
                if(j + nums[i-1] <= 2*sum) {
                    dp[i][j] += dp[i-1][j+nums[i-1]];
                }
            }
        }
        
        return dp[n][sum + S];
    }
};

/*根据dp[i-1][j] 可知道
dp[i-1][j] 对下一个数可以做加, 做减
故 对应的结果数累加 dp[i-1][j]
dp[i-1][j+nums[i-1]] += dp[i-1][j];
dp[i-1][j-nums[i-1]] += dp[i-1][j];
*/
class Solution {
public:
    //前i个数,结果为j的个数
    //dp[i][j] = dp[i-1][j-nums[i-1]] + dp[i-1][j+nums[i-1]]
    int findTargetSumWays(vector<int>& nums, int S) {
        int sum = 0;
        for(int k : nums) {
            sum += k;
        }
        
        if(sum < S) return 0;
        int n = nums.size();
        int dp[n+1][2*sum + 1];
        memset(dp, 0, sizeof(int)*(n+1)*(2*sum+1));
        dp[0][sum] = 1;
        for(int i=1; i<=n; i++) {
            for(int j=0; j<=2*sum; j++) {
				if(j-nums[i-1] >= 0) {
					dp[i][j-nums[i-1]] += dp[i-1][j];
				}
				
				if(j+nums[i-1]<=2*sum) {
					dp[i][j+nums[i-1]] += dp[i-1][j];
				}
            }
        }
        
        return dp[n][sum + S];
    }
};

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int sum = 0;
		for(int k : nums) {
			sum += k;
		}
		
        if(sum < S) return 0;
		int n = nums.size();
		int dp[2][2*sum + 1];
		memset(dp, 0, sizeof(dp));
		
		dp[0][sum] = 1;
		for(int i = 1; i<=n; i++) {
			for(int j=0; j<=2*sum; j++) {
                if(j+nums[i-1] <= 2*sum) {
				    dp[i%2][j+nums[i-1]] += dp[(i-1)%2][j];
                }
                
                if(j-nums[i-1] >= 0) {
				    dp[i%2][j-nums[i-1]] += dp[(i-1)%2][j];
                }
			}
            
            for(int k=0; k<=2*sum; k++) {
                dp[(i-1)%2][k] = 0;
            }
		}
		
		return dp[n%2][sum + S];
    }
};
