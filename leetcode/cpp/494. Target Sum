class Solution {
public:
    //P - S = target
    //P + SUM - S = target + SUM
    //2 * P = target + SUM
    //P = (target + SUM) / 2
    //dp[i][j] = dp[i-1][j-nums[i-1]] + dp[i-1][j+nums[i-1]]
    int findTargetSumWays(vector<int>& nums, int S) {
        int sum = 0;
        for(int k : nums) {
            sum += k;
        }
        
        if(sum < S) return 0;
        int n = nums.size();
        int dp[n+1][2*sum + 1] = {0};
        dp[0][sum] = 1;
        for(int i=1; i<=n; i++) {
            for(int j=0; j<=2*sum; j++) {
                if(j - nums[i-1] >= 0) {
                    dp[i][j] += dp[i-1][j-nums[i-1]];   
                }
                
                if(j + nums[i-1] <= 2*sum) {
                    dp[i][j] += dp[i-1][j+nums[i-1]];
                }
            }
        }
        
        return dp[n][sum + S];
    }
};
