/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    //s, l, r
    //2(s + l) = s + l + nr
    //s + l = nr
    //s = (n - 1)r + r - l
    ListNode *detectCycle(ListNode *head) {
        ListNode* pos = hasCycle(head);
        if (nullptr == pos) return pos;
        
        ListNode* slow = head;
        ListNode* fast = pos;
        while (slow != fast) {
            slow = slow->next;
            fast = fast->next;
        }
        
        return slow;
    }
    
    ListNode* hasCycle(ListNode* head) {
        if (head == nullptr || head->next == nullptr) return nullptr;
        
        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
            
            if (slow == fast) return slow;
        }
        
        return nullptr;
    }
};
