class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        int i = findMax(height, 0, n - 1);
        int l = findMax(height, 0, i - 1);
        int r = findMax(height, i + 1, n - 1);
        int sum = 0;
        if(l != -1) {
            sum += height[l] * (i - l - 1);
            for(int k = l + 1; k < i; k++) {
                sum -= height[k];
            }
            
            sum += trapLeft(height, 0, l);
        }

        if(r != -1) {
            sum += height[r] * (r - i - 1);
            for(int k = i + 1; k < r; k++) {
                sum -= height[k];
            }
            
            sum += trapRight(height, r, n - 1);
        }
        return sum;
    }

    int findMax(vector<int>& height, int s, int e) {
        if(s > e) return -1;
        int ans = s;
        for(int i = s; i <= e; i++) {
            if(height[i] > height[ans]) ans = i;
        }
        return ans;
    }

    int trapLeft(vector<int>& height, int s, int e) {
        if(s >= e) return 0;
        int ans = 0;
        int i = findMax(height, s, e - 1);
        ans += height[i] * (e - i - 1);
        for(int k = i + 1; k < e; k++) {
            ans -= height[k];
        }

        ans += trapLeft(height, s, i);
        return ans;
    }

    int trapRight(vector<int>& height, int s, int e) {
        if(s >= e) return 0;
        int ans = 0;
        int i = findMax(height, s + 1, e);
        ans += height[i] * (i - s - 1);
        for(int k = s + 1; k < i; k++) {
            ans -= height[k];
        }
        
        ans += trapRight(height, i, e);
        return ans;
    }
};

class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0;
        int n = height.size();
        int l = 0, r = n - 1;
        while(l < r) {
            int minH = min(height[l], height[r]);
            if(height[l] == minH) {
                while(++l < r && height[l] < minH) {
                    ans += minH - height[l];
                }
            } else {
                while(--r > l && height[r] < minH) {
                    ans += minH - height[r];
                }
            }
        }
        return ans;
    }
};

class Solution {
public:
    int trap(vector<int>& height) {
        if(height.empty()) return 0;
        //两个方向dp
        int n = height.size();
        int left[n] = {0};
        int right[n] = {0};
        int ans[n] = {0};
        
        for(int i = 0; i < n; i++) {
            if(i == 0) {
                left[i] = height[i];
            } else {
                left[i] = max(left[i - 1], height[i]);
            }
        }
        
        for(int i = n - 1; i >= 0; i--) {
            if(i == n - 1) {
                right[i] = height[i];
            } else {
                right[i] = max(right[i + 1], height[i]);
            }
        }
        
        int ret = 0;
        for(int i = 0; i < n; i++) {
            ret += min(right[i], left[i]) - height[i];
        }
        
        return ret;
    }
};
