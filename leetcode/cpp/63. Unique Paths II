class Solution {
public:
/**
 * 思路: 遇到阻碍，跳过
 * 
 * d[i][j] = d[i-1][j] if(!=1) + d[i][j-1](if != 1)
 */ 
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        if(0 == m) return 0;
        
        int n = obstacleGrid[0].size();
        if(0 == n) return 0;
    
        if(obstacleGrid[0][0] == 1) return 0;
        vector<vector<int>> d(m, vector<int>(n, 0));
        d[0][0] = 1;
        
        for(int i=1; i<m; i++) {
            if(d[i-1][0] == 0 || obstacleGrid[i][0] == 1) { 
                d[i][0] = 0;
            } else {
                d[i][0] = 1;
            }
        }
        
        for(int i=1; i<n; i++) {
            if(d[0][i-1] == 0 || obstacleGrid[0][i] == 1) {
                d[0][i] = 0;
            } else {
                d[0][i] = 1;
            }
        }
        
        for(int i=1; i<m; i++) {
            for(int j=1; j<n; j++) {
                if(obstacleGrid[i][j] != 1) {
                    if(obstacleGrid[i-1][j] != 1) d[i][j] += d[i-1][j];
                    if(obstacleGrid[i][j-1] != 1) d[i][j] += d[i][j-1];
                }
            }
        }
        
        return d[m-1][n-1];
    }
};
