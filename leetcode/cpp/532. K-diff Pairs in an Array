class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        //1.k为负数
        //2.nums为空
        //利用map的有序性, 以及题目要求唯一,则计算单向的差值即可
        if(k<0) return 0;
        int size = nums.size();
        if(size<=0) return 0;
        
        map<int, int> m;
        for(int i=0; i<size; i++) {
            m[nums[i]]++;
        }
        
        int count = 0;
        map<int, int>::iterator mit = m.begin();
        if(0 == k) {
            while(mit != m.end()) {
                if(mit->second > 1) {
                    count += 1;
                }
                ++mit;
            }
        } else {
            while(mit != m.end()) {
                if(m.end() != m.find(mit->first + k)) {
                    ++count;
                }
                ++mit;
            }
        }
        
        return count;
        
    }
};

/**
k-diff 表示 x和y距离为 |x-y|=k, 所以 k必须大于等于0
0.解题思路
a.题目要求唯一, x->y和y->x是一样的，故可以采用计数排序，然后从小到大，找距离满足K的， 但是数值范围为1000w，故考虑
使用map，降低空间，然后利用map key的有序性
b.同时，
当k=0时，需要判断元素个数是否>1，大于1表示有重复元素出现， 则结果计数+1
当k!=0时, 从当前元素值开始，查找 当前值+k 的key是否存在, 若存在则 结果计数+1, 

1.边界条件
a. 判断k>=0
b.输入的vector中需要有元素
c.k=0 和 k>0 的处理逻辑需要分开

2.复杂度 
时间复杂度o(n)  
空间复杂度o(n)

3.优化方案
a)时间复杂度已经是最优
b)空间复杂度，考虑是否可以将降为o(1)
**/
