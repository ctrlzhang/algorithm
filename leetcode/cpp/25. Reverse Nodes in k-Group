/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
/**
 * 思路: 快慢指针,原地逆序
 */ 
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(k <= 1 || NULL == head) return head;
        ListNode *slow = head;
        ListNode *fast = head;
        ListNode *newHead = NULL;
        ListNode *lastTail = NULL;
        ListNode *tail = NULL;
        while(NULL != slow) {
            int cnt = 0;
            while(fast) {
                cnt++;
                fast = fast->next;
                if(k == cnt) break;
            }
            
            if(cnt < k) {
                if(NULL == newHead) return head;
                return newHead;
            }
            
            ListNode *tail = slow;
            ListNode *prev = fast;
            while(slow != fast) {
                ListNode* tmp = slow;
                slow = slow->next;
                tmp->next = prev;
                prev = tmp;
            }
         
            if(NULL == newHead) {
                newHead = prev;
            } else {
                lastTail->next = prev;
            }
            
            lastTail = tail;
        }
        
        return newHead;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
/**
 * 思路: 快慢指针,原地逆序
 */ 
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head==NULL||k==1) return head;
        int num=1;
        ListNode *preheader = new ListNode(-1);
        preheader->next = head;
        ListNode *cur = head, *nex, *pre = preheader;
        while(cur = cur->next) 
            num++;
        while(num>=k) {
            cur = pre->next;
            nex = cur->next;
            for(int i=1;i<k;++i) {
                cur->next=nex->next;
                nex->next=pre->next;
                pre->next=nex;
                nex=cur->next;
            }
            pre = cur;
            num-=k;
        }
        return preheader->next;
    }
};
