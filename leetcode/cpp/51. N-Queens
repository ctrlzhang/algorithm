//此处判断条件有问题，准确的应该是判断斜线上是否已存在.
class Solution {
public:
    vector<vector<string>> ans;
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<int>> nums(n, vector<int>(n, 0));
        vector<int> flag(n, 0);
        vector<int> pos(n, -1);
        dfs(nums, flag, pos, 0, n);
        return ans;
    }
    
    bool isInBoard(int x, int y, int n) {
        if(x < 0 || x >= n || y < 0 || y >= n) return false;
        return true;
    }
    
    bool canChoose(vector<vector<int>>& nums, vector<int>& flag, int x, int y, int n) {
        bool left = (!isInBoard(x - 1, y - 1, n) || nums[x - 1][y - 1] == 0);
        bool right = (!isInBoard(x - 1, y + 1, n) || nums[x - 1][y + 1] == 0);
        return flag[y] == 0 && left && right;
    }
    
    void dfs(vector<vector<int>>& nums, vector<int>& flag, vector<int>& pos, int level, int n) {
        if(level == n) {
            vector<string> vt;
            for(int i = 0; i < n; i++) {
                string tmp = "";
                for(int j = 0; j < n; j++) {
                    tmp += (j == pos[i] ? 'Q' : '.');
                }
                vt.push_back(tmp);
            }
            ans.push_back(vt);
            return;    
        }
        
        for(int i = 0; i < n; i++) {
            if(canChoose(nums,flag, level, i, n)) {
                nums[level][i] = 1;
                flag[i] = 1;
                pos[level] = i;
                dfs(nums, flag, pos, level + 1, n);
                pos[level] = -1;
                flag[i] = 0;
                nums[level][i] = 0;
            }
        }
    }
};
