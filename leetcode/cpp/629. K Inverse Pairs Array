class Solution {
//dp[n][k]=dp[n-1][k] + dp[n-1][k-1] + ...+ dp[n-1][k+1-n+1] + dp[n-1][k-n+1]
//dp[n][k+1]=dp[n-1][k+1] + dp[n-1][k] + ... + dp[n-1][k+1-n+1]
//dp[n][k+1]=dp[n-1][k+1] + dp[n][k] - dp[n-1][k+1-n]
//这个式子, 如果把n 看做i, 把k+1看做j则, 变为
//dp[i][j]=dp[i-1][j] + dp[i][j-1] - dp[i-1][j-i]
//dp[i][j+1]=dp[i-1][j+1] + dp[i][j] - dp[i-1][j+1-i]
//从上面的式子可以看出, 存在递进的关系, 即ij 从i-1 逐渐累积上来的递推式, 符合动态规划里最优子问题
//然后我们需要找到边界, 我们知道j的个数不会超过i*(i-1)/2, k+1有可能小于n, k-n+1即为负数, 这种我们认为它是0即可
//最后我们编码实现状态方程, 如何实现递推式?
public:
    int kInversePairs(int n, int k) {
        int m = 1e9 + 7;
        if(n <= 0 || k < 0 || k > (n-1)*n/2) return 0;
        if(0 == k || k == (n-1)*n/2) return 1;
        vector<vector<long>> data(n+1, vector<long>(k+1, 0));
        for(int i=1; i<=n; i++) {
            for(int j=0; j<=k && j<=(i-1)*i/2; j++) {
                if(0 == j || j==(i-1)*i/2) {
                    data[i][j] = 1;
                } else {
                    data[i][j] = (data[i-1][j] + data[i][j-1]) % m;
                    if(j >= i) {
                        data[i][j] -= data[i-1][j-i];
                        if(0 > data[i][j]) {
                            data[i][j] += m;
                        }
                    }
                }
            }
        }
        
        return data[n][k];
    }
};
