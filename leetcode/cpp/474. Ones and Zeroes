class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        if(m < 0 || n < 0 || strs.size() == 0) return 0;
        
        int idx = 0;
        int len = strs.size();
        int maxN = 0;
        for(string s : strs) {
            int one = n;
            int zero = m;
            for(char c : s) {
                if(c == '1') one--;
                if(c == '0') zero--;
            }
            
            if(one < 0 || zero < 0) {
                idx++;
                continue;
            }
            
            //swap
            string tmp = strs[idx];
            strs[idx] = strs[len-1];
            strs[len-1] = tmp;
            
            strs.pop_back();
            maxN = max(maxN, findMaxForm(strs, zero, one) + 1);
            strs.push_back(s);
            
            //swap
            tmp = strs[idx];
            strs[idx] = strs[len-1];
            strs[len-1] = tmp;
            
            idx++;
        }
        
        return maxN;
    }
};


class Solution {
    //dp[i][j][k] = max{dp[i-1][j-zeros[i]][k-ones[i]], dp[i-1][j][k]}
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        int l = strs.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        for(int i=0; i<=l; i++) {
            int one = 0;
            int zero = 0;
            if(i > 0) {
                calc(strs[i-1], &one, &zero);
            }
            
            for(int j=m; j>=0; j--) {
                for(int k=n; k>=0; k--) {
                    if(i == 0) {
                        dp[j][k] = 0;
                    } else {
                        if(j>=zero && k>=one) {
                            dp[j][k] = max(dp[j][k], dp[j-zero][k-one] + 1);
                        } else {
                            dp[j][k] = dp[j][k];
                        }
                    }
                }
            }
        }
        
        return dp[m][n];
    }
    
    void calc(string& str, int* a, int* b) {
        for(char c : str) {
            if(c == '0') {
                (*b)++;
            } 
            
            if(c == '1') {
                (*a)++;
            }
        }
    }
};
