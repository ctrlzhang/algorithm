class Solution {
public:
    int getMaxRepetitions(string s1, int n1, string s2, int n2) {
        if(0 == n1) return 0;
        int len1 = s1.length();
        int len2 = s2.length();
        if(len1 * n1 < len2 * n2) return 0;
        
        if(s1 == s2) return n1 / n2;
        
        int c[26];
        memset(c, 0, sizeof(c));
        for(int i=0; i<len1; i++) {
            c[s1[i] - 'a'] = 1;
        }
        
        for(int i=0; i<len2; i++) {
            if(c[s2[i] - 'a'] == 0) return 0;
        }
        
        int begin = 0;
        int m = 0;
        int j = 0;
        int b1 = 0, b2 = 0, e1 = 0, e2 = 0;
        for(int i=0; i<len1*n1; i++) {
            if(s1[i%len1] == s2[j%len2]) {
                if(j == 0) {
                    if(begin == 0) {
                        b1 = i;
                    }
                }
                j++;
                if(j == len2*n2) {
                    m++;
                    j = 0;
                    if(begin == 0) {
                        begin = 1;
                        e1 = i;
                    } else {
                        if(i%len1 == e1%len1) {
                            e2 = i;
                            break;
                        }
                    }
                }
            }
        }
        
        int len = e2 - e1;
        if(len <= 0) return m;
        
        int cnt = (len1*n1 - b1) / len;
        //return len;
        //return len1*n1 - b1;
        //return cnt;
        int ans = cnt * (m - 1);
        int next = b1 + cnt * len;
        
        m = 0;
        j = 0;
        for(int i=next; i<len1*n1; i++) {
            if(s1[i%len1] == s2[j%len2]) {
                j++;
                if(j == len2*n2) {
                    j=0;
                    m++;
                }
            }
        }
        
        return ans + m;
    }
};

class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& A) {
        int n = A.size();
        vector<unordered_map<int, int>> dp(n, unordered_map<int, int>());
        int ans = 0;
       
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < i; j++) {
                int diff = A[i] - A[j];
                if(diff >= 0 && A[i] < A[j]) continue;
                if(diff <= 0 && A[i] > A[j]) continue;
                dp[i][diff]++;
                
                if(dp[j].find(diff) != dp[j].end()) {
                    dp[i][diff] += dp[j][diff];
                    ans += dp[j][diff];
                }
            }
        }
        
        return ans;
    }
};
