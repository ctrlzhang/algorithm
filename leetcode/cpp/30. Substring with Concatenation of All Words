class Solution {
public:
    //slide window
    //using map
    vector<int> findSubstring(string s, vector<string>& words) {
        int n = words.size();
        vector<int> ans;
        if(n == 0 || s.empty()) return ans;
        int len = words[0].size();
        int totalLen = n * len;
        if(totalLen > s.length()) return ans;
        
        unordered_map<string, int> mp;
        for(string word : words) {
            mp[word]++;
        }
        
        for(int i = 0; i < s.length(); i++) {
            int j = i;
            int cnt = 0;
            while(j + len <= s.length() && cnt < n) {
                string cur = s.substr(j, len);
                if(mp.find(cur) == mp.end() || mp[cur] == 0) {
                    break;
                }
                
                mp[cur]--;
                cnt++;
                j += len;       
            }
            
            if(cnt == n) {
                ans.push_back(i);
            }
            
            mp.clear();
            for(string word : words) {
                mp[word]++;
            }
        }
        
        return ans;
    }
};
