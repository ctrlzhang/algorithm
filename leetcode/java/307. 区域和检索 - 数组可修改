class NumArray {
    //Fenwick tree, index starts from 1
    private int[] sum;
    private int[] data;
    public NumArray(int[] nums) {
        if (nums == null) return;
        int n = nums.length;
        this.sum = new int[n + 1];
        this.data = new int[n];
        for (int i = 0; i < n; i++) {
            update(i, nums[i]);
        }
    }
    
    public void update(int i, int val) {
        int delta = val - this.data[i];
        this.data[i] = val;
        int pos = i + 1;
        while (pos < this.sum.length) {
            this.sum[pos] += delta;
            pos += lowbit(pos);
        }
    }
    
    public int sumRange(int i, int j) {
        int left = i;
        int right = j + 1;
        int ansL = 0, ansR = 0;
        // System.out.println("leftT=" + left + " rightT=" + right);
        while (left > 0) {
            ansL += this.sum[left];
            left -= lowbit(left);
            // System.out.println("left=" + left + " n=" + this.sum.length);
        }

        while (right > 0) {
            ansR += this.sum[right];
            right -= lowbit(right);
            // System.out.println("right=" + right + " n=" + this.sum.length);
        }

        return ansR - ansL;
    }

    private int lowbit(int x) {
        //-x = ~x + 1
        //1100
        //~x = 0011
        //~x + 1 = 0100
        //x & ~x = 100 -> this is the last bit
        //x = 100
        //x - 1 = 011
        //x & (x - 1) = 0
        return x & (-x);
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
 
 
 
 
 class FenwickTree {
    private int[] sum;
    FenwickTree(int n) {
        this.sum = new int[n + 1];
    }
    
    public void update(int pos, int val) {
        while (pos < sum.length) {
            sum[pos] += val;
            pos += lowbit(pos);
        }
    }

    public int query(int pos) {
        int ans = 0;
        while (pos > 0) {
            ans += sum[pos];
            pos -= lowbit(pos);
        }
        return ans;
    }

    private int lowbit(int pos) {
        return pos & (-pos);
    }
}

public class NumArray {
    private FenwickTree tree;
    private int[] data;
    public NumArray(int[] nums) {
        if (nums == null || nums.length == 0) return;
        this.data = nums;
        tree = new FenwickTree(nums.length + 1);
        for (int i = 0; i < nums.length; i++) {
            tree.update(i + 1, nums[i]);
        }
    }
    
    public void update(int i, int val) {
        int delta = val - data[i];
        tree.update(i + 1, delta);
        data[i] = val;
    }
    
    public int sumRange(int i, int j) {
        return tree.query(j + 1) - tree.query(i);
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
