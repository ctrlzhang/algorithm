class NumMatrix {
    //常规解法, 维护每一行的前n项和的数组
    //当其中一个元素更新时，只更新改行 o(N)
    //然后计算区间和也是O(N))
    private int[][] sum;
    private int[][] data;
    public NumMatrix(int[][] matrix) {
        int row = matrix.length;
        int col = matrix[0].length;
        sum = new int[row][col];
        for (int i = 0; i < row; i++) {
            int t = 0;
            for (int j = 0; j < col; j++) {
                sum[i][j] = t;
                t += matrix[i][j];
            }
        }
    }
    
    public void update(int row, int col, int val) {
        int n = sum[0].length;
        for (int y = col + 1; y < n; y++) {
            sum[row][y] += val;
        }
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int ans = 0;
        for (int i = row1; i <= row2; i++) {
            ans += sum[i][col2] - sum[i][col1] + data[i][col2];
        }
        return ans;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * obj.update(row,col,val);
 * int param_2 = obj.sumRegion(row1,col1,row2,col2);
 */
