class Solution {
    //dfs -> dp
    public int[][] updateMatrix(int[][] matrix) {
        //edge case
        int row = matrix.length;
        if (row == 0) return matrix;
        int col = matrix[0].length;
        if (col == 0) return matrix;
        
        //normal case
        int[][] ans = new int[row][col];
        for (int[] item : ans) {
            Arrays.fill(item, 10000);    
        }
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (matrix[i][j] == 0) {
                    ans[i][j] = 0;
                } else {
                    //top
                    if (i - 1 >= 0) {
                        ans[i][j] = Math.min(ans[i][j], ans[i - 1][j] + 1);
                    }
                    
                    //left
                    if (j - 1 >= 0) {
                        ans[i][j] = Math.min(ans[i][j], ans[i][j - 1] + 1);
                    }
                }
            }
        }
        
        for (int i = row - 1; i >= 0; i--) {
            for (int j = col - 1; j >= 0; j--) {
                if (matrix[i][j] == 0) {
                    ans[i][j] = 0;
                } else {
                    //bottom
                    if (i + 1 < row) {
                        ans[i][j] = Math.min(ans[i][j], ans[i + 1][j] + 1);
                    }
                    
                    //right
                    if (j + 1 < col) {
                        ans[i][j] = Math.min(ans[i][j], ans[i][j + 1] + 1);
                    }
                }
            }
        }
        
        return ans;
    }
}
//test case
