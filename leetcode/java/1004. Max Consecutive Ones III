class Solution {
    public int longestOnes(int[] A, int K) {
        int n = A.length;
        int[] left = new int[n];
        int[] right = new int[n];
        
        for (int i = 1; i < n; i++) {
            if (A[i - 1] == 0) {
                left[i] = 0;
            } else {
                left[i] = 1 + left[i - 1];
            }
        }
        
        for (int i = n - 2; i >= 0; i--) {
            if (A[i + 1] == 0) {
                right[i] = 0;
            } else {
                right[i] = 1 + right[i + 1];
            }
        }
        
        List<Integer> zeros = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (A[i] == 0) {
                zeros.add(i);
            }
        }
        
        if (zeros.size() <= K) return n;
        int ans = 0;
        if (K == 0) {
            for (int i = 0; i < n; i++) {
                if (A[i] == 1) {
                    ans = Math.max(ans, 1 + left[i] + right[i]); 
                }
            }
            return ans;
        }
        
        for (int j = 0; j + K - 1 < zeros.size(); j++) {
            int l = zeros.get(j);
            int r = zeros.get(j + K - 1);
            // System.out.println("l=" + l + " r=" + r + " left[j]=" + left[j] + " right[r]=" + right[r]);
            ans = Math.max(ans, left[l] + right[r] + r - l + 1);
        }
        
        return ans;
    }
}

//sliding window
class Solution {
    public int longestOnes(int[] A, int K) {
        int l = 0, r = 0, ans = 0, cnt = 0;
        int n = A.length;
        while (r < n) {
            if (A[r] == 0) {
                cnt++;
            }
            
            while (cnt > K) {
                if (A[l] == 0) {
                    --cnt;
                }
                ++l;
            }
            
            ans = Math.max(ans, r - l + 1);
            ++r;
        }
        return ans;
    }
}
