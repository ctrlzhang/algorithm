class Solution {
public:
    //
    int kEmptySlots(vector<int>& flowers, int k) {
        set<int> active;
        bool isFirst = true;
        for (int i = 0; i < flowers.size(); i++) {
            int flower = flowers[i];
            active.insert(flower);
            if (isFirst) {
                isFirst = false;
                continue;
            }
            
            set<int>::iterator low = active.lower_bound(flower);
            if (low != active.begin()) {
                if (flower - *(--low) - 1 == k) return i + 1;
            }
            //cout<<"low="<<*low<<endl;
            
            set<int>::iterator high = active.upper_bound(flower);
            if (high != active.end()) {
                if (*high - flower - 1 == k) return i + 1;
            }
            //cout<<"high="<<*high<<endl;
        }
        
        return -1;
    }
};


class Solution {
    public int kEmptySlots(int[] flowers, int k) {
        TreeSet<Integer> tree = new TreeSet<>();
        int day = 0;
        for (int flower : flowers) {
            ++day;
            tree.add(flower);
            Integer lower = tree.lower(flower);
            if (lower != null && flower - lower - 1 == k) return day;
            
            Integer higher = tree.higher(flower);
            if (higher != null && higher - flower - 1 == k) return day;
        }
        
        return -1;
    }
}

class Solution {
    public int kEmptySlots(int[] flowers, int k) {
        int[] days = new int[flowers.length];
        for (int i = 0; i < days.length; i++) {
            days[flowers[i] - 1] = i + 1;
        }
        
        int ans = Integer.MAX_VALUE;
        MinQueue<Integer> minQ = new MinQueue<>();
        for (int i = 0; i < days.length; i++) {
            minQ.addLast(days[i]);
            //0..k,k+1
            if (i >= k) {
                int x = minQ.pollFirst();
                if (i + 1 < days.length && (k == 0 || (x < minQ.min() && days[i + 1] < minQ.min()))) {
                    ans = Math.min(ans, Math.max(x, days[i + 1]));
                }
            }
        }
        
        if (ans == Integer.MAX_VALUE) {
            ans = -1;
        }
        
        return ans;
    }
}

class MinQueue<E extends Comparable<E>> extends ArrayDeque<E> {
    Deque<E> mins;
    
    public MinQueue() {
        mins = new ArrayDeque<E>();
    }
    
    @Override
    public void addLast(E x) {
        super.addLast(x);
        while (mins.peekLast() != null && x.compareTo(mins.peekLast()) < 0) {
            mins.pollLast();
        }
        mins.addLast(x);
    }
    
    @Override
    public E pollFirst() {
        E x = super.pollFirst();
        if (x.compareTo(mins.peekFirst()) == 0) {
            mins.pollFirst();
        }
        
        return x;
    }
    
    public E min() {
        return mins.peekFirst();
    }
}

class Solution {
    public int kEmptySlots(int[] flowers, int k) {
        int[] days = new int[flowers.length];
        for (int i = 0; i < days.length; i++) {
            days[flowers[i] - 1] = i + 1;
        }
        
        int ans = Integer.MAX_VALUE;
        MinQueue<Integer> mins = new MinQueue<>();
        for (int i = 0; i < days.length; i++) {
            mins.addLast(days[i]);
            if (i >= k) {
                Integer x = mins.pollFirst();
                if (mins.isEmpty()) {
                    if (i + 1 < days.length) {
                        ans = Math.min(ans, Math.max(x, days[i + 1]));
                    }
                } else {
                    if (x < mins.min() && i + 1 < days.length && days[i + 1] < mins.min()) {
                        ans = Math.min(ans, Math.max(x, days[i + 1]));
                    }
                }
            }
        }
        
        if (ans == Integer.MAX_VALUE) {
            ans = -1;
        }
        
        return ans;
    }
}

class MinQueue<E extends Comparable<E>> extends ArrayDeque<E> {
    Deque<E> mins;
    
    public MinQueue() {
        mins = new ArrayDeque<E>();
    }
    
    @Override
    public void addLast(E x) {
        super.addLast(x);
        while (mins.peekLast() != null && x.compareTo(mins.peekLast()) < 0) {
            mins.pollLast();
        }
        mins.addLast(x);
    }
    
    @Override
    public E pollFirst() {
        E x = super.pollFirst();
        if (0 == x.compareTo(mins.peekFirst())) {
            mins.pollFirst();
        }
        return x;
    }
    
    public E min() {
        return mins.peekFirst();
    }
}

class Solution {
    public int kEmptySlots(int[] flowers, int k) {
        int[] days = new int[flowers.length];
        for (int i = 0; i < days.length; i++) {
            days[flowers[i] - 1] = i + 1;
        }
        
        int left = 0, right = k + 1;
        int ans = Integer.MAX_VALUE;
        search: while (right < days.length) {
            for (int j = left + 1; j < right; j++) {
                if (days[j] < days[left] || days[j] < days[right]) {
                    left = j;
                    right = j + k + 1;
                    continue search;
                }
            }
            
            ans = Math.min(ans, Math.max(days[left], days[right]));
            left = right;
            right = left + k + 1;
        }
        
        if (ans == Integer.MAX_VALUE) {
            ans = -1;
        }
        
        return ans;
    }
}

//latest, use treeset lower and higher, do the binary search
class Solution {
    public int kEmptySlots(int[] bulbs, int K) {
        TreeSet<Integer> slots = new TreeSet<>();
        for (int i = 0; i < bulbs.length; i++) {
            Integer ret = slots.lower(bulbs[i]);
            if (ret != null && bulbs[i] - ret == K + 1) return i + 1;
            
            ret = slots.higher(bulbs[i]);
            if (ret != null && ret - bulbs[i] == K + 1) return i + 1;

            slots.add(bulbs[i]);
        }

        return -1;
    }
}

class Solution {
    // slide window
    // check the range
    public int kEmptySlots(int[] bulbs, int K) {
        int left = 0, right = K + 1;
        int n = bulbs.length;
        int[] days = new int[n];
        for (int j = 0; j < n; j++) {
            days[bulbs[j] - 1] = j;
        }

        int ans = Integer.MAX_VALUE;
        while (right < n) {
            int i = left + 1;
            for (; i < right; i++) {
                if (days[i] < days[left] || days[i] < days[right]) {
                    left = i;
                    right = i + K + 1;
                    break;
                }   
            }
            
            if (i == right) {
                ans = Math.min(ans, Math.max(days[left], days[right]) + 1);
                left = right;
                right = right + K + 1;
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
}

class Solution {
    //单调栈 - 这种数据结构可以用o(1)的时间求出距离当前数最近的一个比它小或者大的数
    //进而可以在o(n)时间内求出整个数组
    //如果用暴力的解法或者二分查找, 则需要o(n**2)或者o(nlogN)的时间复杂度
    //如果数组有序则o(nlogN), 如果数组无序则o(n**2)
    //本题需要构造days数组, 第i盆花开放的时间是days[i],则我们会尝试找到离它最近的两盆花, 左和右,
    //这两盆花肯定要先与当前花开放, 所以我们就是找小于当前花开放时间的花，看下他俩的间距是不是K
    //单调栈我们通常是存储下标的, 用于计算间隔, 这里存储的下标应该是花盆的位置
    //比较的值是花盆的开放时间
    public int kEmptySlots(int[] bulbs, int K) {
        int n = bulbs.length;
        int[] days = new int[n];
        for (int i = 0; i < n; i++) {
            days[bulbs[i] - 1] = i + 1;
        }

        int ans = Integer.MAX_VALUE;
        Deque<Integer> stack = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && days[stack.peek()] > days[i]) {
                stack.pop();
            }

            if (!stack.isEmpty() && i - stack.peek() == K + 1) {
                ans = Math.min(ans, days[i]);
            }

            stack.push(i);
        }

        stack = new LinkedList<>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && days[stack.peek()] > days[i]) {
                stack.pop();
            }

            if (!stack.isEmpty() && stack.peek() - i == K + 1) {
                ans = Math.min(ans, days[i]);
            }

            stack.push(i);
        }

        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
}
