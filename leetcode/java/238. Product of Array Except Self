class Solution {
    //left and right
    public int[] productExceptSelf(int[] nums) {
        //thought
        //1.edge case
        //2.compute product arrays - main logic
        //3.output
    
        //error handle
        //product may cause overflow
        
        //1.edge case
        if (nums == null || nums.length == 0) {
            return new int[0];
        }
        
        //2.main logic
        int n = nums.length;
        int[] ans = new int[n];
        int[] left = new int[n];
        int[] right = new int[n];
        
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                left[i] = nums[i];
            } else {
                left[i] = left[i - 1] * nums[i];
            }
        }
        
        for (int j = n - 1; j >= 0; j--) {
            if (j == n - 1) {
                right[j] = nums[j];
            } else {
                right[j] = right[j + 1] * nums[j];
            }
        }
        
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ans[i] = right[i + 1];
            } else if (i == n - 1) {
                ans[i] = left[i - 1];
            } else {
                ans[i] = left[i - 1] * right[i + 1];
            }
        }
        return ans;
    }
}

//Space O(N)
class Solution {
    //left and right
    public int[] productExceptSelf(int[] nums) {
        //thought
        //1.edge case
        //2.compute product arrays - main logic
        //3.output
    
        //error handle
        //product may cause overflow
        
        //1.edge case
        if (nums == null || nums.length == 0) {
            return new int[0];
        }
        
        //2.main logic
        int n = nums.length;
        int[] ans = new int[n];
        int[] left = new int[n];
        int[] right = new int[n];
        
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                left[i] = nums[i];
            } else {
                left[i] = left[i - 1] * nums[i];
            }
        }
        
        for (int j = n - 1; j >= 0; j--) {
            if (j == n - 1) {
                right[j] = nums[j];
            } else {
                right[j] = right[j + 1] * nums[j];
            }
        }
        
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ans[i] = right[i + 1];
            } else if (i == n - 1) {
                ans[i] = left[i - 1];
            } else {
                ans[i] = left[i - 1] * right[i + 1];
            }
        }
        return ans;
    }
}

//space O(1)
class Solution {
    public int[] productExceptSelf(int[] nums) {
        if (nums == null || nums.length == 0) {
            return new int[0];
        }
        
        // ans[i] = ans[i - 1] * nums[i - 1]
        // base = 1
        // 
        int n = nums.length;
        int[] ans = new int[n];
        int base = 1;
        for (int i = 0; i < n; i++) {
            ans[i] = base;
            base *= nums[i];
        }
        
        base = 1;
        for (int i = n - 1; i >= 0; i--) {
            ans[i] *= base;
            base *= nums[i];
        }
        
        return ans;
    }
}
