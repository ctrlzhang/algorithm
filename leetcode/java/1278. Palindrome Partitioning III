class Solution {
    //dp[i][j][k] 求最小值
    //dp[1][n][k] = min(dp[1][n-1][k-1] + cost1, dp[1][n - 2][k -1] + cost2, dp[1][n - 3][k - 1] + cost3 ...)
    //dp[n][k] = min(dp[n - 1][k - 1] + cost1, dp[n - 2][k - 1] + cost2, dp[n - 3][k - 1] + cost3, ...)
    //how to implement it?
    //
    public int palindromePartition(String s, int k) {
        int n = s.length();
        int[][] dp = new int[n + 1][k + 1];
        int bigVal = 1000000;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                dp[i][j] = bigVal;
            }
        }
        
        for (int i = 1; i <= n; i++) {
            dp[i][1] = calc(s, 0, i - 1);
        }
        
        for (int i = 2; i <= n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int d = 1; d < i; d++) {
                    dp[i][j] = Math.min(dp[i][j], dp[d][j - 1] + calc(s, d + 1 - 1, i - 1));
                    // System.out.println("i=" + i + " j=" + j + " d=" + d + " val=" + dp[i][j]);
                }
            }
        }
        
        return dp[n][k];
    }
    
    int calc(String s, int left, int right) {
        int cost = 0;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                cost += 1;
            }
            left++;
            right--;
        }
        return cost;
    }
}
