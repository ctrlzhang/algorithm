#include <iostream>
#include <vector>
#include <math.h>
using namespace std;

int getMin(vector<int>& hi, int i, int j);

//保存在数组中
int constructST(vector<int>& hi, vector<int>& st, int idx, int l, int r) {
    if(l > r) return -1;
    if(l == r) {
        st[idx] = l;
        return st[idx];
    }

    int mid = l + (r - l) / 2;
    int pos = getMin(hi, constructST(hi, st, 2 * idx + 1, l, mid), constructST(hi, st, 2 * idx + 2, mid + 1, r));
    st[idx] = pos;
    return st[idx];
}

//返回索引下标
int getMin(vector<int>& hi, int i, int j) {
    if(i == -1) return j;
    if(j == -1) return i;
    return hi[i] < hi[j] ? i : j;
}

//范围查找,返回下标
int find(vector<int>& hi, vector<int>& st, int s, int e, int fs, int fe, int pos) {
    if(s > fe || e < fs || s > e || fs > fe) return -1;
    if(fs <= s && fe >= e) {
        return st[pos];
    }

    int mid = s + (e - s) / 2;
    int ans = getMin(hi, find(hi, st, s, mid, fs, fe, 2 * pos + 1), find(hi, st, mid + 1, e, fs, fe, 2 * pos + 2));
    return ans;
}

int getStSize(int n) {
    int level = ceil(log(n) / log(2)) + 1;
    cout<<"log(n)="<<log(n)<<endl;
    cout <<level<<" "<< pow(2, level) - 1<<endl;
    return pow(2, level) - 1;
}

int main() {
    int arr[5] = {1,4,2,6,9};
    vector<int> hi(arr, arr + sizeof(arr)/sizeof(int));
    int n = hi.size();
    cout<<"hi size="<<n<<endl;
    vector<int> st(getStSize(n), -1);
    constructST(hi, st, 0, 0, n - 1);
    for(int i=0; i<st.size(); i++) {
        cout<<st[i]<<" "; 
    }
    cout<<endl;
    return 0;
}
