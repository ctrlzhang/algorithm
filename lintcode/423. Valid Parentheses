class Solution {
public:
    /**
     * @param s: A string
     * @return: whether the string is a valid parentheses
     */
    bool isValidParentheses(string &s) {
        // write your code here
        stack<char> st;
        for(char c : s) {
            if(st.empty()) {
                if(c == '(' || c == '{' || c == '[') {
                    st.push(c);
                } else {
                    return false;
                }
            } else {
                if(c == '(' || c == '{' || c == '[') {
                    st.push(c);
                } else {
                    char head = st.top();
                    if((head == '(' && c == ')') ||
                    (head == '{' && c == '}') || 
                    (head == '[' && c == ']')) {
                        st.pop();
                    } else {
                        return false;
                    }
                }
            }
        }
        
        if(!st.empty()) return false;
        return true;
    }
};

class Solution {
public:
    /**
     * @param s: A string
     * @return: whether the string is a valid parentheses
     */
    bool isValidParentheses(string &s) {
        // write your code here
        stack<char> st;
        for(char c : s) {
            if(c == '(' || c == '{' || c == '[') {
                st.push(c);
            } else {
                if(st.empty()) {
                    return false;
                } else {
                    char head = st.top();
                    if((head == '(' && c == ')') || 
                    (head == '{' && c == '}') || 
                    (head == '[' && c == ']')) {
                        st.pop();
                    } else {
                        return false;
                    }
                }
            }
        }
        if(!st.empty()) return false;
        return true;
    }
};

import java.util.Stack;
public class Solution {
    /**
     * @param s: A string
     * @return: whether the string is a valid parentheses
     */
    public boolean isValidParentheses(String s) {
        // write your code here
        Stack<Character> st = new Stack<>();
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(c == '(' || c == '{' || c == '[') {
                st.push(c);
            } else {
                if(st.empty()) {
                    return false;
                } else {
                    char head = st.peek();
                    if((head == '(' && c == ')') || 
                    (head == '{' && c == '}') || 
                    (head == '[' && c == ']')) {
                        st.pop();
                    } else {
                        return false;
                    }
                }
            }
        }
        if(!st.empty()) {
            return false;
        }
        return true;
    }
}
