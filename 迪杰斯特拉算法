/**
 * @author ctrlzhang on 2017/2/17.
 */
public class TestC {
    private int n = 4;
    int[][] weight = {
            {0,1,10,6},
            {-1,0,-1,-1},
            {-1,-1,0,-1},
            {-1,1,3,0}
    };

    //表示起点到各个点的最短距离
    int [] d = {0, 0, 0, 0};

    //标记节点
    int [] flag = {1, 0, 0, 0};
    
    //前一个节点
    int [] prev = {-1, 0, 0, 0};

    /**
     * 1.找到标记点中每一个元素,按顺序遍历标记点,找到与标记点直连的点,计算长度 公式d[j]=min(d[k] + weight[k][j])
     * 2.
     */
    public void solution() {
        int num = n;
        while(num > 0) {
            int nextIdx = 0;
            int prevIdx = 0;
            int min = 10000000;
            boolean find = false;
            for(int i=0; i<n; i++) {
                if(flag[i] == 1) {//起点
                    for (int j = 0; j < n; j++) {
                        if (flag[j] == 0 && weight[i][j] != -1) {
                            int tmp = d[i] + weight[i][j];
                            if (tmp < min) {
                                min = tmp;
                                nextIdx = j;
                                prevIdx = i;
                                find = true;
                            }
                        }
                    }
                }
            }

            if(find) {
                d[nextIdx] = min;
                prev[nextIdx] = prevIdx;
                flag[nextIdx] = 1;
            }

            --num;
        }
    }

    public static void main(String[] args) {
        TestC t = new TestC();
        t.solution();

        for(int i=0; i<4; i++) {
            System.out.println(t.prev[i]);
        }
    }
}
