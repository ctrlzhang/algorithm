问题：给定一个链表 L1->l2->L3->...->Ln-1->Ln  请使用原地排序的方式, 使链表变为L1->Ln->L2->Ln-1.....
思路: 仔细找规律，会发现 L1 Ln  和 L2 Ln-1 他们的和都为n+1, 所以Lk它的下一个元素必为Ln+1-k 
如果使用原地排序，并且采用单链表的数据结构,则处理过程为, 
1)找到第i个节点
2)找到地n+1-i个节点，及其前1个节点，即第n-i个节点
3)n-i.next = n+1-i.next
4)n+1-i.next = i.next
5)i.next = n+1-i.next
通过上述的步骤, 我们只需要遍历到size/2个节点. 此时第size/2+1节点必为最后的为尾部节点，使它的next指向null即可

复杂度分析: 第一个节点 1 + n, 第二个节点 2 + n - 1  第三个节点 2 + n - 2 ... 共需要n/2次，故复杂度大约为o(n*n)

优化的方法: 第一种方法有点类似于蛮力， 这个问题， 因为我们不关心空间， 所以想使用大划小，分而治之的策略，这里是不起作用的, 
那么对于时间上的优化，我们可以借助于数据结构， 从数据结构上优化这个求解过程

优化方案:  不采用单链表组织数据， 使用数组， 每个数组元素是一个Node结构体， Node结构体中有next元素，表示该Node指向的下一个节点在数组中的下标.
为什么如此组织数据结构？
因为最开始，我们提到了 1+n 的规律， 那么对于第K个数， 它的下一个元素应该是 N+1-K， 这样只需要更新第K元素的next值为n+1-k就可以了. 
省去了指针操作和链表的遍历.

重置next值的过程是什么样的呢？
1->n+1-1
2->n+1-2
k->n+1-k
n个数, 我们只需要更新前n/2个数即可.
如果n为奇数,则 n/2+1 为 链表的尾节点
如果n为偶数,则 n/2+1 也 还是链表的尾节点
这样问题变的简单了, 对于第K个节点， 把该节点的next值，设为n+1-k,  按照此逻辑，设置前n/2个数, 然后把 n/2+1个数，next置为-1， 表示到了链表的尾部

优化方法的复杂度分析:  时间复杂度o(n) 空间复杂度o(1)


扩展: 如果允许非原地排序，那么只需要对链表逆序，原链表和逆序后的链表做归并，问题既可以得到解.  复杂度同样为o(n)， 但是空间复杂度也为o(n)

/**
* 优化方案的代码如下
*/
#include <iostream>
#include <vector>
using namespace std;

struct Node {
	int no;
	int next;
};

Node empty;

Node getNext(const vector<Node>& v, Node cur) {
	if(-1 == cur.next) return empty;

	return v[cur.next];
}

void output(const vector<Node>& v) {
	Node cur = v[1];
	cout<<"cur="<<cur.no<<endl;

	int size = v.size() - 1;
	cout<<"size="<<size<<endl;

	for(int i=1; i<=size; i++) {
		Node next = getNext(v, cur);
		cout<<"current node="<<cur.no<<endl;
		cout<<"next="<<cur.next<<endl;
		cout<<"next node="<<next.no<<endl;
		cout<<"next next="<<next.next<<endl;
		cur = next;
	}
}

void test2() {
	vector<Node> v;
	Node a;
	a.no = 1;
	a.next = 2;

	Node b;
	b.no = 2;
	b.next = 3;

	Node c;
	c.no = 3;
	c.next = 4;

	Node d;
	d.no = 4;
	d.next = 5;

	Node e;
	e.no = 5;
	e.next = -1;

	v.push_back(empty);
	v.push_back(a);
	v.push_back(b);
	v.push_back(c);
	v.push_back(d);
	v.push_back(e);

	vector<Node>::iterator vit = v.begin();
	for(; vit != v.end(); vit++) {
		cout<<(*vit).no<<(*vit).next<<endl;
	}

	output(v);

	//排序0 1 2 3 4    0 1 4 2 3 
	//排序0 1 2 3 4 5  0 1 5 2 4 3
	//奇数 偶数
	//重新排序,更改的是Node的next值
	//奇数1->1 3->4 偶数 2->3 4->2
	//奇数1->1 3->5 2->3 4->4 5->2
	//奇数 4->next=1->next 1->next=4
	//最后一个数要重置为-1
	
	int size = v.size();
	int mid = (size-1)/2;
	for(int i=1; i<=mid; i++) {
		v[size-i].next = v[i].next;
		v[i].next = size-i;
	}

	//最后一个元素, next重置为-1	
	v[mid+1].next = -1;
	
	cout<<"after sort"<<endl;
	output(v);
}
