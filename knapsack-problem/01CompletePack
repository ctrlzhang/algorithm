#include <iostream>
using namespace std;

/*
* 0-1背包问题
* f[i][j] 表示给出i件物品，当背包总容量为j时，所能得到的最大价值
* f[i][j] = max(f[i-1][j-w[i]] + p[i], f[i-1][j])
* 
* 重量数组w[i] 表示第i个物品的重量
* 价值数组p[i] 表示第i个物品的价值
*/
int main() {
	int p[6][11] = {0}; //定义的价值数组,f[i][j]表示前i个物品,在背包容量为j的情况下的最大价值.
	int m[6] = {0, 1, 2, 3, 4, 5}; //单个物品的重量
	int n[6] = {0, 5, 4, 3, 2, 1}; //单个物品的价格
	int output[6] = {0}; //最优解数组

	for(int i = 1; i <= 5; i++) {
		for(int j = 1; j <= 10; j++) {
			if(j >= m[i]) {
				p[i][j] = p[i-1][j-m[i]] + n[i] > p[i-1][j] ? p[i-1][j-m[i]] + n[i] : p[i-1][j];
			} else {
				p[i][j] = p[i-1][j];
			}
		}
	}

	int max = 0;
	for(int k=0; k<6; k++) {
		for(int m=0; m<11; m++) {
			cout<<p[k][m]<<" ";
			max = max < p[k][m] ? p[k][m] : max;
		}
		cout<<endl;
	}

	cout<<max<<endl;
	int cap = 10;
	for(int h = 5; h >=2; h--) {
		//说明没有取h这个物品, p[i][j] == p[i-1][j] 
		//因为最大值没有变化, 如果取了，则肯定要比p[h-1][10]要大.
		if(p[h][cap] == p[h-1][cap]) {  
			output[h] = 0;
		} else {
			output[h] = 1;
			cap = cap - m[h]; //背包容量就变为了cap - m[h]
		}
	}

	//第一层的取值是看p[1][cap]是否为0, 价值为0，表示没有取，不为0表示取了
	//其它行要看跟上一行的比较，如果值跟上一行相同，娜根据递推公式，表明没有取当前行对应的物品
	//否则，表示取了，继续寻找下一件物品
	output[1] = p[1][cap] ? 1 : 0;

	for(int r = 0; r < 6; r++) {
		cout<<output[r]<<" ";
	}
	cout<<endl;

	return 0;
}
